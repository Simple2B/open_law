/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
/* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator)
/* harmony export */ });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference.contextElement) : [],
          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(modifiers);

          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ contains)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isLayoutViewport.js */ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");




function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (includeScale && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
    scaleX = element.offsetWidth > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  var _ref = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) : window,
      visualViewport = _ref.visualViewport;

  var addVisualOffsets = !(0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__["default"])() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getClippingRect)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element, strategy) {
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element, strategy)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(element) : element;

  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);
    accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);
    accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);
    accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCompositeRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");









function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.width) / element.offsetWidth || 1;
  var scaleY = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);
  var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent);
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__["default"])(documentElement)) {
      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__["default"])(offsetParent);
    }

    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent)) {
      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getComputedStyle)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentElement)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentRect)
/* harmony export */ });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var y = -winScroll.scrollTop;

  if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(body || html).direction === 'rtl') {
    x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
/* harmony export */ });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLayoutRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeName)
/* harmony export */ });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeScroll)
/* harmony export */ });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
  } else {
    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOffsetParent)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/userAgent.js */ "./node_modules/@popperjs/core/lib/utils/userAgent.js");








function getTrueOffsetParent(element) {
  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = /firefox/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__["default"])());
  var isIE = /Trident/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__["default"])());

  if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(currentNode)) {
    currentNode = currentNode.host;
  }

  while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(currentNode)) < 0) {
    var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getParentNode)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getScrollParent)
/* harmony export */ });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
    return node;
  }

  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportRect)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isLayoutViewport.js */ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");




function getViewportRect(element, strategy) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = (0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__["default"])();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindow)
/* harmony export */ });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScroll)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement),
/* harmony export */   "isShadowRoot": () => (/* binding */ isShadowRoot)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isLayoutViewport)
/* harmony export */ });
/* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/userAgent.js */ "./node_modules/@popperjs/core/lib/utils/userAgent.js");

function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__["default"])());
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isScrollParent)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isTableElement)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listScrollParents)
/* harmony export */ });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(target)));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "afterMain": () => (/* binding */ afterMain),
/* harmony export */   "afterRead": () => (/* binding */ afterRead),
/* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
/* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
/* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
/* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
/* harmony export */   "end": () => (/* binding */ end),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "main": () => (/* binding */ main),
/* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases),
/* harmony export */   "placements": () => (/* binding */ placements),
/* harmony export */   "popper": () => (/* binding */ popper),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "reference": () => (/* binding */ reference),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
/* harmony export */   "viewport": () => (/* binding */ viewport),
/* harmony export */   "write": () => (/* binding */ write)
/* harmony export */ });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state.placement);
  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__.within)(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");







 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x,
      y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr || 0,
    y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;
  var win = window;

  if (adaptive) {
    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) {
      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper);

      if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }, (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.placement),
    variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
    return [];
  }

  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    }

    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyStyles": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "arrow": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "flip": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "hide": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "offset": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");










/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");

 // eslint-disable-next-line import/no-unused-modules

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = offset + overflow[mainSide];
    var max = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

    var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [_enums_js__WEBPACK_IMPORTED_MODULE_5__.top, _enums_js__WEBPACK_IMPORTED_MODULE_5__.left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");










var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
/* harmony export */ });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeOffsets)
/* harmony export */ });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debounce)
/* harmony export */ });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ detectOverflow)
/* harmony export */ });
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.reference);
  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ expandToHashMap)
/* harmony export */ });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ format)
/* harmony export */ });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAltAxis)
/* harmony export */ });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBasePlacement)
/* harmony export */ });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFreshSideObject)
/* harmony export */ });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
/* harmony export */ });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositePlacement)
/* harmony export */ });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
/* harmony export */ });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getVariation)
/* harmony export */ });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "round": () => (/* binding */ round)
/* harmony export */ });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeByName)
/* harmony export */ });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergePaddingObject)
/* harmony export */ });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ orderModifiers)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rectToClientRect)
/* harmony export */ });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ uniqueBy)
/* harmony export */ });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/userAgent.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/userAgent.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getUAString)
/* harmony export */ });
function getUAString() {
  var uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }

  return navigator.userAgent;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ validateModifiers)
/* harmony export */ });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    .filter(function (value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

          break;

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (modifier.effect != null && typeof modifier.effect !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "within": () => (/* binding */ within),
/* harmony export */   "withinMaxClamp": () => (/* binding */ withinMaxClamp)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles.css":
/*!********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236B7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e */ "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236B7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e */ "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e */ "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e */ "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*\n! tailwindcss v3.3.1 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #E5E7EB; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9CA3AF; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9CA3AF; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n[type='text'],[type='email'],[type='url'],[type='password'],[type='number'],[type='date'],[type='datetime-local'],[type='month'],[type='search'],[type='tel'],[type='time'],[type='week'],[multiple],textarea,select {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  background-color: #fff;\n  border-color: #6B7280;\n  border-width: 1px;\n  border-radius: 0px;\n  padding-top: 0.5rem;\n  padding-right: 0.75rem;\n  padding-bottom: 0.5rem;\n  padding-left: 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n}\n\n[type='text']:focus, [type='email']:focus, [type='url']:focus, [type='password']:focus, [type='number']:focus, [type='date']:focus, [type='datetime-local']:focus, [type='month']:focus, [type='search']:focus, [type='tel']:focus, [type='time']:focus, [type='week']:focus, [multiple]:focus, textarea:focus, select:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #1C64F2;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: /*!*/ /*!*/ 0 0 0 0px #fff, /*!*/ /*!*/ 0 0 0 calc(1px + 0px) #1C64F2, var(--tw-shadow);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n  border-color: #1C64F2;\n}\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  color: #6B7280;\n  opacity: 1;\n}\n\ninput::placeholder,textarea::placeholder {\n  color: #6B7280;\n  opacity: 1;\n}\n\n::-webkit-datetime-edit-fields-wrapper {\n  padding: 0;\n}\n\n::-webkit-date-and-time-value {\n  min-height: 1.5em;\n}\n\nselect:not([size]) {\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\n  background-position: right 0.5rem center;\n  background-repeat: no-repeat;\n  background-size: 1.5em 1.5em;\n  padding-right: 2.5rem;\n  -webkit-print-color-adjust: exact;\n          print-color-adjust: exact;\n}\n\n[multiple] {\n  background-image: none;\n  background-image: initial;\n  background-position: 0 0;\n  background-position: initial;\n  background-repeat: repeat;\n  background-repeat: initial;\n  background-size: auto auto;\n  background-size: initial;\n  padding-right: 0.75rem;\n  -webkit-print-color-adjust: inherit;\n          print-color-adjust: inherit;\n}\n\n[type='checkbox'],[type='radio'] {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  padding: 0;\n  -webkit-print-color-adjust: exact;\n          print-color-adjust: exact;\n  display: inline-block;\n  vertical-align: middle;\n  background-origin: border-box;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  flex-shrink: 0;\n  height: 1rem;\n  width: 1rem;\n  color: #1C64F2;\n  background-color: #fff;\n  border-color: #6B7280;\n  border-width: 1px;\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n}\n\n[type='checkbox'] {\n  border-radius: 0px;\n}\n\n[type='radio'] {\n  border-radius: 100%;\n}\n\n[type='checkbox']:focus,[type='radio']:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);\n  --tw-ring-offset-width: 2px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #1C64F2;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: /*!*/ /*!*/ 0 0 0 2px #fff, /*!*/ /*!*/ 0 0 0 calc(2px + 2px) #1C64F2, var(--tw-shadow);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n}\n\n[type='checkbox']:checked,[type='radio']:checked,.dark [type='checkbox']:checked,.dark [type='radio']:checked {\n  border-color: transparent;\n  background-color: currentColor;\n  background-size: 100% 100%;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n[type='checkbox']:checked {\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ");\n}\n\n[type='radio']:checked {\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\n}\n\n[type='checkbox']:indeterminate {\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ");\n  border-color: transparent;\n  background-color: currentColor;\n  background-size: 100% 100%;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n[type='checkbox']:indeterminate:hover,[type='checkbox']:indeterminate:focus {\n  border-color: transparent;\n  background-color: currentColor;\n}\n\n[type='file'] {\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  background: initial;\n  border-color: inherit;\n  border-width: 0;\n  border-radius: 0;\n  padding: 0;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n[type='file']:focus {\n  outline: 1px auto inherit;\n}\n\ninput[type=file]::file-selector-button {\n  color: white;\n  background: #1F2937;\n  border: 0;\n  font-weight: 500;\n  font-size: 0.875rem;\n  cursor: pointer;\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n  padding-left: 2rem;\n  padding-right: 1rem;\n  margin-left: -1rem;\n  margin-right: 1rem;\n}\n\ninput[type=file]::file-selector-button:hover {\n  background: #374151;\n}\n\n.dark input[type=file]::file-selector-button {\n  color: white;\n  background: #4B5563;\n}\n\n.dark input[type=file]::file-selector-button:hover {\n  background: #6B7280;\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  background: #1C64F2;\n  border-radius: 9999px;\n  border: 0;\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  cursor: pointer;\n}\n\ninput[type=\"range\"]:disabled::-webkit-slider-thumb {\n  background: #9CA3AF;\n}\n\n.dark input[type=\"range\"]:disabled::-webkit-slider-thumb {\n  background: #6B7280;\n}\n\ninput[type=\"range\"]:focus::-webkit-slider-thumb {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color), var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) rgb(164 202 254 / 1px), 0 0 rgba(0,0,0,0);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n  --tw-ring-opacity: 1px;\n  --tw-ring-color: rgba(164, 202, 254, var(--tw-ring-opacity));\n}\n\ninput[type=\"range\"]::-moz-range-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  background: #1C64F2;\n  border-radius: 9999px;\n  border: 0;\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  cursor: pointer;\n}\n\ninput[type=\"range\"]:disabled::-moz-range-thumb {\n  background: #9CA3AF;\n}\n\n.dark input[type=\"range\"]:disabled::-moz-range-thumb {\n  background: #6B7280;\n}\n\ninput[type=\"range\"]::-moz-range-progress {\n  background: #3F83F8;\n}\n\ninput[type=\"range\"]::-ms-fill-lower {\n  background: #3F83F8;\n}\n\n.toggle-bg:after {\n  content: \"\";\n  position: absolute;\n  top: 0.125rem;\n  left: 0.125rem;\n  background: white;\n  border-color: #D1D5DB;\n  border-width: 1px;\n  border-radius: 9999px;\n  height: 1.25rem;\n  width: 1.25rem;\n  transition-property: background-color,border-color,color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;\n  transition-duration: .15s;\n  box-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n}\n\ninput:checked + .toggle-bg:after {\n  transform: translateX(100%);;\n  border-color: white;\n}\n\ninput:checked + .toggle-bg {\n  background: #1C64F2;\n  border-color: #1C64F2;\n}\n\n.tooltip-arrow,.tooltip-arrow:before {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: inherit;\n}\n\n.tooltip-arrow {\n  visibility: hidden;\n}\n\n.tooltip-arrow:before {\n  content: \"\";\n  visibility: visible;\n  transform: rotate(45deg);\n}\n\n[data-tooltip-style^='light'] + .tooltip > .tooltip-arrow:before {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n\n[data-tooltip-style^='light'] + .tooltip[data-popper-placement^='top'] > .tooltip-arrow:before {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n\n[data-tooltip-style^='light'] + .tooltip[data-popper-placement^='right'] > .tooltip-arrow:before {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-tooltip-style^='light'] + .tooltip[data-popper-placement^='bottom'] > .tooltip-arrow:before {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-tooltip-style^='light'] + .tooltip[data-popper-placement^='left'] > .tooltip-arrow:before {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n\n.tooltip[data-popper-placement^='top'] > .tooltip-arrow {\n  bottom: -4px;\n}\n\n.tooltip[data-popper-placement^='bottom'] > .tooltip-arrow {\n  top: -4px;\n}\n\n.tooltip[data-popper-placement^='left'] > .tooltip-arrow {\n  right: -4px;\n}\n\n.tooltip[data-popper-placement^='right'] > .tooltip-arrow {\n  left: -4px;\n}\n\n.tooltip.invisible > .tooltip-arrow:before {\n  visibility: hidden;\n}\n\n[data-popper-arrow],[data-popper-arrow]:before {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: inherit;\n}\n\n[data-popper-arrow] {\n  visibility: hidden;\n}\n\n[data-popper-arrow]:before {\n  content: \"\";\n  visibility: visible;\n  transform: rotate(45deg);\n}\n\n[data-popper-arrow]:after {\n  content: \"\";\n  visibility: visible;\n  transform: rotate(45deg);\n  position: absolute;\n  width: 9px;\n  height: 9px;\n  background: inherit;\n}\n\n[role=\"tooltip\"] > [data-popper-arrow]:before {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n\n.dark [role=\"tooltip\"] > [data-popper-arrow]:before {\n  border-style: solid;\n  border-color: #4b5563;\n}\n\n[role=\"tooltip\"] > [data-popper-arrow]:after {\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n\n.dark [role=\"tooltip\"] > [data-popper-arrow]:after {\n  border-style: solid;\n  border-color: #4b5563;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='top'] > [data-popper-arrow]:before {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='top'] > [data-popper-arrow]:after {\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='right'] > [data-popper-arrow]:before {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='right'] > [data-popper-arrow]:after {\n  border-bottom-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='bottom'] > [data-popper-arrow]:before {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='bottom'] > [data-popper-arrow]:after {\n  border-top-width: 1px;\n  border-left-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='left'] > [data-popper-arrow]:before {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='left'] > [data-popper-arrow]:after {\n  border-top-width: 1px;\n  border-right-width: 1px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='top'] > [data-popper-arrow] {\n  bottom: -5px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='bottom'] > [data-popper-arrow] {\n  top: -5px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='left'] > [data-popper-arrow] {\n  right: -5px;\n}\n\n[data-popover][role=\"tooltip\"][data-popper-placement^='right'] > [data-popper-arrow] {\n  left: -5px;\n}\n\n[role=\"tooltip\"].invisible > [data-popper-arrow]:before {\n  visibility: hidden;\n}\n\n[role=\"tooltip\"].invisible > [data-popper-arrow]:after {\n  visibility: hidden;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(63, 131, 248, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(63, 131, 248, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.pointer-events-none {\n  pointer-events: none;\n}\n.visible {\n  visibility: visible;\n}\n.invisible {\n  visibility: hidden;\n}\n.collapse {\n  visibility: collapse;\n}\n.static {\n  position: static;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\n.-top-2 {\n  top: -0.5rem;\n}\n.bottom-0 {\n  bottom: 0px;\n}\n.bottom-14 {\n  bottom: 3.5rem;\n}\n.bottom-2 {\n  bottom: 0.5rem;\n}\n.bottom-2\\.5 {\n  bottom: 0.625rem;\n}\n.bottom-3 {\n  bottom: 0.75rem;\n}\n.bottom-\\[60px\\] {\n  bottom: 60px;\n}\n.left-0 {\n  left: 0px;\n}\n.left-10 {\n  left: 2.5rem;\n}\n.left-3 {\n  left: 0.75rem;\n}\n.left-auto {\n  left: auto;\n}\n.right-0 {\n  right: 0px;\n}\n.right-2 {\n  right: 0.5rem;\n}\n.right-2\\.5 {\n  right: 0.625rem;\n}\n.right-3 {\n  right: 0.75rem;\n}\n.top-0 {\n  top: 0px;\n}\n.top-10 {\n  top: 2.5rem;\n}\n.z-10 {\n  z-index: 10;\n}\n.z-20 {\n  z-index: 20;\n}\n.z-30 {\n  z-index: 30;\n}\n.z-40 {\n  z-index: 40;\n}\n.z-50 {\n  z-index: 50;\n}\n.col-span-6 {\n  grid-column: span 6 / span 6;\n}\n.col-span-full {\n  grid-column: 1 / -1;\n}\n.m-3 {\n  margin: 0.75rem;\n}\n.-mx-1 {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\n.-mx-1\\.5 {\n  margin-left: -0.375rem;\n  margin-right: -0.375rem;\n}\n.-my-1 {\n  margin-top: -0.25rem;\n  margin-bottom: -0.25rem;\n}\n.-my-1\\.5 {\n  margin-top: -0.375rem;\n  margin-bottom: -0.375rem;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.my-2 {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n.my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.-mb-px {\n  margin-bottom: -1px;\n}\n.-mr-1 {\n  margin-right: -0.25rem;\n}\n.-mt-5 {\n  margin-top: -1.25rem;\n}\n.mb-0 {\n  margin-bottom: 0px;\n}\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\n.mb-1\\.5 {\n  margin-bottom: 0.375rem;\n}\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n.mb-3 {\n  margin-bottom: 0.75rem;\n}\n.mb-4 {\n  margin-bottom: 1rem;\n}\n.ml-0 {\n  margin-left: 0px;\n}\n.ml-2 {\n  margin-left: 0.5rem;\n}\n.ml-3 {\n  margin-left: 0.75rem;\n}\n.ml-4 {\n  margin-left: 1rem;\n}\n.ml-5 {\n  margin-left: 1.25rem;\n}\n.ml-6 {\n  margin-left: 1.5rem;\n}\n.ml-auto {\n  margin-left: auto;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mr-2 {\n  margin-right: 0.5rem;\n}\n.mr-3 {\n  margin-right: 0.75rem;\n}\n.mr-64 {\n  margin-right: 16rem;\n}\n.mt-1 {\n  margin-top: 0.25rem;\n}\n.mt-16 {\n  margin-top: 4rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mt-3 {\n  margin-top: 0.75rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.mt-5 {\n  margin-top: 1.25rem;\n}\n.mt-8 {\n  margin-top: 2rem;\n}\n.block {\n  display: block;\n}\n.inline-block {\n  display: inline-block;\n}\n.inline {\n  display: inline;\n}\n.flex {\n  display: flex;\n}\n.inline-flex {\n  display: inline-flex;\n}\n.table {\n  display: table;\n}\n.grid {\n  display: grid;\n}\n.hidden {\n  display: none;\n}\n.h-11 {\n  height: 2.75rem;\n}\n.h-2 {\n  height: 0.5rem;\n}\n.h-2\\.5 {\n  height: 0.625rem;\n}\n.h-3 {\n  height: 0.75rem;\n}\n.h-4 {\n  height: 1rem;\n}\n.h-5 {\n  height: 1.25rem;\n}\n.h-6 {\n  height: 1.5rem;\n}\n.h-8 {\n  height: 2rem;\n}\n.h-80 {\n  height: 20rem;\n}\n.h-\\[calc\\(100\\%-1rem\\)\\] {\n  height: calc(100% - 1rem);\n}\n.h-full {\n  height: 100%;\n}\n.h-screen {\n  height: 100vh;\n}\n.max-h-full {\n  max-height: 100%;\n}\n.w-1\\/2 {\n  width: 50%;\n}\n.w-11 {\n  width: 2.75rem;\n}\n.w-11\\/12 {\n  width: 91.666667%;\n}\n.w-2 {\n  width: 0.5rem;\n}\n.w-2\\.5 {\n  width: 0.625rem;\n}\n.w-3 {\n  width: 0.75rem;\n}\n.w-4 {\n  width: 1rem;\n}\n.w-44 {\n  width: 11rem;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-6 {\n  width: 1.5rem;\n}\n.w-64 {\n  width: 16rem;\n}\n.w-8 {\n  width: 2rem;\n}\n.w-80 {\n  width: 20rem;\n}\n.w-full {\n  width: 100%;\n}\n.w-screen {\n  width: 100vw;\n}\n.max-w-2xl {\n  max-width: 42rem;\n}\n.max-w-6xl {\n  max-width: 72rem;\n}\n.max-w-full {\n  max-width: 100%;\n}\n.max-w-xs {\n  max-width: 20rem;\n}\n.flex-1 {\n  flex: 1 1 0%;\n}\n.flex-shrink {\n  flex-shrink: 1;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.-translate-x-full {\n  --tw-translate-x: -100%;\n  transform: translate(-100%, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.-translate-y-full {\n  --tw-translate-y: -100%;\n  transform: translate(var(--tw-translate-x), -100%) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-x-0 {\n  --tw-translate-x: 0px;\n  transform: translate(0px, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-x-96 {\n  --tw-translate-x: 24rem;\n  transform: translate(24rem, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-x-full {\n  --tw-translate-x: 100%;\n  transform: translate(100%, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-y-full {\n  --tw-translate-y: 100%;\n  transform: translate(var(--tw-translate-x), 100%) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.rotate-180 {\n  --tw-rotate: 180deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(180deg) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform-none {\n  transform: none;\n}\n.cursor-default {\n  cursor: default;\n}\n.cursor-not-allowed {\n  cursor: not-allowed;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n.select-none {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.resize {\n  resize: both;\n}\n.list-none {\n  list-style-type: none;\n}\n.grid-cols-4 {\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n}\n.grid-cols-6 {\n  grid-template-columns: repeat(6, minmax(0, 1fr));\n}\n.grid-cols-7 {\n  grid-template-columns: repeat(7, minmax(0, 1fr));\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-wrap {\n  flex-wrap: wrap;\n}\n.content-center {\n  align-content: center;\n}\n.items-start {\n  align-items: flex-start;\n}\n.items-end {\n  align-items: flex-end;\n}\n.items-center {\n  align-items: center;\n}\n.justify-start {\n  justify-content: flex-start;\n}\n.justify-end {\n  justify-content: flex-end;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-2 {\n  gap: 0.5rem;\n}\n.gap-6 {\n  gap: 1.5rem;\n}\n.-space-x-px > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(-1px * 0);\n  margin-right: calc(-1px * var(--tw-space-x-reverse));\n  margin-left: calc(-1px * (1 - 0));\n  margin-left: calc(-1px * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(-1px * calc(1 - 0));\n  margin-left: calc(-1px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-0 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0px * 0);\n  margin-right: calc(0px * var(--tw-space-x-reverse));\n  margin-left: calc(0px * (1 - 0));\n  margin-left: calc(0px * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(0px * calc(1 - 0));\n  margin-left: calc(0px * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-0\\.5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.125rem * 0);\n  margin-right: calc(0.125rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.125rem * (1 - 0));\n  margin-left: calc(0.125rem * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(0.125rem * calc(1 - 0));\n  margin-left: calc(0.125rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-1 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.25rem * 0);\n  margin-right: calc(0.25rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.25rem * (1 - 0));\n  margin-left: calc(0.25rem * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(0.25rem * calc(1 - 0));\n  margin-left: calc(0.25rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * 0);\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * (1 - 0));\n  margin-left: calc(0.5rem * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(0.5rem * calc(1 - 0));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-x-3 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.75rem * 0);\n  margin-right: calc(0.75rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.75rem * (1 - 0));\n  margin-left: calc(0.75rem * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(0.75rem * calc(1 - 0));\n  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * (1 - 0));\n  margin-top: calc(0.5rem * (1 - var(--tw-space-y-reverse)));\n  margin-top: calc(0.5rem * calc(1 - 0));\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * 0);\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1rem * (1 - 0));\n  margin-top: calc(1rem * (1 - var(--tw-space-y-reverse)));\n  margin-top: calc(1rem * calc(1 - 0));\n  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1rem * 0);\n  margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n}\n.space-y-6 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5rem * (1 - 0));\n  margin-top: calc(1.5rem * (1 - var(--tw-space-y-reverse)));\n  margin-top: calc(1.5rem * calc(1 - 0));\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5rem * 0);\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\n}\n.space-y-8 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(2rem * (1 - 0));\n  margin-top: calc(2rem * (1 - var(--tw-space-y-reverse)));\n  margin-top: calc(2rem * calc(1 - 0));\n  margin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(2rem * 0);\n  margin-bottom: calc(2rem * var(--tw-space-y-reverse));\n}\n.divide-y > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-y-reverse: 0;\n  border-top-width: calc(1px * (1 - 0));\n  border-top-width: calc(1px * (1 - var(--tw-divide-y-reverse)));\n  border-top-width: calc(1px * calc(1 - 0));\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n  border-bottom-width: calc(1px * 0);\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n}\n.divide-gray-100 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgba(243, 244, 246, 1);\n  border-color: rgb(243 244 246 / var(--tw-divide-opacity));\n}\n.divide-gray-200 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgba(229, 231, 235, 1);\n  border-color: rgb(229 231 235 / var(--tw-divide-opacity));\n}\n.self-center {\n  align-self: center;\n}\n.overflow-hidden {\n  overflow: hidden;\n}\n.overflow-x-auto {\n  overflow-x: auto;\n}\n.overflow-y-auto {\n  overflow-y: auto;\n}\n.overflow-x-hidden {\n  overflow-x: hidden;\n}\n.whitespace-nowrap {\n  white-space: nowrap;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-md {\n  border-radius: 0.375rem;\n}\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n.rounded-b {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n.rounded-b-lg {\n  border-bottom-right-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n.rounded-l-lg {\n  border-top-left-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n.rounded-r-lg {\n  border-top-right-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n}\n.rounded-t {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.rounded-t-lg {\n  border-top-left-radius: 0.5rem;\n  border-top-right-radius: 0.5rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-0 {\n  border-width: 0px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-b-2 {\n  border-bottom-width: 2px;\n}\n.border-r {\n  border-right-width: 1px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-solid {\n  border-style: solid;\n}\n.border-blue-300 {\n  --tw-border-opacity: 1;\n  border-color: rgba(164, 202, 254, 1);\n  border-color: rgb(164 202 254 / var(--tw-border-opacity));\n}\n.border-blue-600 {\n  --tw-border-opacity: 1;\n  border-color: rgba(28, 100, 242, 1);\n  border-color: rgb(28 100 242 / var(--tw-border-opacity));\n}\n.border-blue-700 {\n  --tw-border-opacity: 1;\n  border-color: rgba(26, 86, 219, 1);\n  border-color: rgb(26 86 219 / var(--tw-border-opacity));\n}\n.border-gray-100 {\n  --tw-border-opacity: 1;\n  border-color: rgba(243, 244, 246, 1);\n  border-color: rgb(243 244 246 / var(--tw-border-opacity));\n}\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgba(229, 231, 235, 1);\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgba(209, 213, 219, 1);\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n.border-gray-600 {\n  --tw-border-opacity: 1;\n  border-color: rgba(75, 85, 99, 1);\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n.border-transparent {\n  border-color: transparent;\n}\n.border-white {\n  --tw-border-opacity: 1;\n  border-color: rgba(255, 255, 255, 1);\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n.bg-blue-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(235, 245, 255, 1);\n  background-color: rgb(235 245 255 / var(--tw-bg-opacity));\n}\n.bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(28, 100, 242, 1);\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n.bg-blue-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(26, 86, 219, 1);\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n.bg-emerald-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(4, 120, 87, 1);\n  background-color: rgb(4 120 87 / var(--tw-bg-opacity));\n}\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(243, 244, 246, 1);\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(229, 231, 235, 1);\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n.bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(249, 250, 251, 1);\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n.bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(31, 41, 55, 1);\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n.bg-gray-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(17, 24, 39, 1);\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n.bg-green-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(222, 247, 236, 1);\n  background-color: rgb(222 247 236 / var(--tw-bg-opacity));\n}\n.bg-green-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(49, 196, 141, 1);\n  background-color: rgb(49 196 141 / var(--tw-bg-opacity));\n}\n.bg-red-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(253, 232, 232, 1);\n  background-color: rgb(253 232 232 / var(--tw-bg-opacity));\n}\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(240, 82, 82, 1);\n  background-color: rgb(240 82 82 / var(--tw-bg-opacity));\n}\n.bg-red-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(224, 36, 36, 1);\n  background-color: rgb(224 36 36 / var(--tw-bg-opacity));\n}\n.bg-red-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(200, 30, 30, 1);\n  background-color: rgb(200 30 30 / var(--tw-bg-opacity));\n}\n.bg-teal-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(3, 102, 114, 1);\n  background-color: rgb(3 102 114 / var(--tw-bg-opacity));\n}\n.bg-transparent {\n  background-color: transparent;\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgba(255, 255, 255, 1);\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-white\\/50 {\n  background-color: rgba(255, 255, 255, 0.5);\n}\n.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}\n.p-0 {\n  padding: 0px;\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-1\\.5 {\n  padding: 0.375rem;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-2\\.5 {\n  padding: 0.625rem;\n}\n.p-3 {\n  padding: 0.75rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.p-5 {\n  padding: 1.25rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.py-1\\.5 {\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-2\\.5 {\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n}\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n.pb-2 {\n  padding-bottom: 0.5rem;\n}\n.pb-3 {\n  padding-bottom: 0.75rem;\n}\n.pb-4 {\n  padding-bottom: 1rem;\n}\n.pl-10 {\n  padding-left: 2.5rem;\n}\n.pl-3 {\n  padding-left: 0.75rem;\n}\n.pt-0 {\n  padding-top: 0px;\n}\n.pt-2 {\n  padding-top: 0.5rem;\n}\n.pt-20 {\n  padding-top: 5rem;\n}\n.pt-28 {\n  padding-top: 7rem;\n}\n.pt-6 {\n  padding-top: 1.5rem;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-extrabold {\n  font-weight: 800;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-normal {\n  font-weight: 400;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.uppercase {\n  text-transform: uppercase;\n}\n.leading-6 {\n  line-height: 1.5rem;\n}\n.leading-9 {\n  line-height: 2.25rem;\n}\n.leading-tight {\n  line-height: 1.25;\n}\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgba(0, 0, 0, 1);\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n.text-blue-600 {\n  --tw-text-opacity: 1;\n  color: rgba(28, 100, 242, 1);\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgba(156, 163, 175, 1);\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgba(107, 114, 128, 1);\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgba(55, 65, 81, 1);\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, 1);\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n.text-green-500 {\n  --tw-text-opacity: 1;\n  color: rgba(14, 159, 110, 1);\n  color: rgb(14 159 110 / var(--tw-text-opacity));\n}\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgba(240, 82, 82, 1);\n  color: rgb(240 82 82 / var(--tw-text-opacity));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n.opacity-0 {\n  opacity: 0;\n}\n.opacity-100 {\n  opacity: 1;\n}\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-xl {\n  --tw-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.outline {\n  outline-style: solid;\n}\n.blur {\n  --tw-blur: blur(8px);\n  filter: blur(8px) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.transition {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-opacity {\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.duration-75 {\n  transition-duration: 75ms;\n}\n.ease-out {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n\n\n.text-danger {\n    color: red;\n}\n\n\n.hover\\:border-gray-300:hover {\n  --tw-border-opacity: 1;\n  border-color: rgba(209, 213, 219, 1);\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n\n\n.hover\\:bg-blue-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(225, 239, 254, 1);\n  background-color: rgb(225 239 254 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-blue-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(30, 66, 159, 1);\n  background-color: rgb(30 66 159 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(243, 244, 246, 1);\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-gray-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(229, 231, 235, 1);\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-gray-50:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(249, 250, 251, 1);\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-red-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(155, 28, 28, 1);\n  background-color: rgb(155 28 28 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-white:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(255, 255, 255, 1);\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:text-blue-600:hover {\n  --tw-text-opacity: 1;\n  color: rgba(28, 100, 242, 1);\n  color: rgb(28 100 242 / var(--tw-text-opacity));\n}\n\n\n.hover\\:text-blue-700:hover {\n  --tw-text-opacity: 1;\n  color: rgba(26, 86, 219, 1);\n  color: rgb(26 86 219 / var(--tw-text-opacity));\n}\n\n\n.hover\\:text-gray-600:hover {\n  --tw-text-opacity: 1;\n  color: rgba(75, 85, 99, 1);\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n\n\n.hover\\:text-gray-700:hover {\n  --tw-text-opacity: 1;\n  color: rgba(55, 65, 81, 1);\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n\n\n.hover\\:text-gray-900:hover {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, 1);\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n\n\n.focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgba(63, 131, 248, 1);\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n\n\n.focus\\:border-blue-600:focus {\n  --tw-border-opacity: 1;\n  border-color: rgba(28, 100, 242, 1);\n  border-color: rgb(28 100 242 / var(--tw-border-opacity));\n}\n\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color), var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color), 0 0 rgba(0,0,0,0);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n\n.focus\\:ring-4:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color), var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color), 0 0 rgba(0,0,0,0);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n\n.focus\\:ring-blue-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(164, 202, 254, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-blue-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(63, 131, 248, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-blue-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(28, 100, 242, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-emerald-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(110, 231, 183, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-gray-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(229, 231, 235, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-gray-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(209, 213, 219, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-red-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(248, 180, 180, var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-teal-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(126, 220, 226, var(--tw-ring-opacity));\n}\n\n\n.group:hover .group-hover\\:text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, 1);\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:block {\n  display: block;\n}\n\n\n.dark .dark\\:hidden {\n  display: none;\n}\n\n\n.dark .dark\\:divide-gray-600 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgba(75, 85, 99, 1);\n  border-color: rgb(75 85 99 / var(--tw-divide-opacity));\n}\n\n\n.dark .dark\\:divide-gray-700 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgba(55, 65, 81, 1);\n  border-color: rgb(55 65 81 / var(--tw-divide-opacity));\n}\n\n\n.dark .dark\\:border-blue-500 {\n  --tw-border-opacity: 1;\n  border-color: rgba(63, 131, 248, 1);\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-gray-500 {\n  --tw-border-opacity: 1;\n  border-color: rgba(107, 114, 128, 1);\n  border-color: rgb(107 114 128 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-gray-600 {\n  --tw-border-opacity: 1;\n  border-color: rgba(75, 85, 99, 1);\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-gray-700 {\n  --tw-border-opacity: 1;\n  border-color: rgba(55, 65, 81, 1);\n  border-color: rgb(55 65 81 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-gray-800 {\n  --tw-border-opacity: 1;\n  border-color: rgba(31, 41, 55, 1);\n  border-color: rgb(31 41 55 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-gray-900 {\n  --tw-border-opacity: 1;\n  border-color: rgba(17, 24, 39, 1);\n  border-color: rgb(17 24 39 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:border-transparent {\n  border-color: transparent;\n}\n\n\n.dark .dark\\:bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(28, 100, 242, 1);\n  background-color: rgb(28 100 242 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-emerald-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(5, 150, 105, 1);\n  background-color: rgb(5 150 105 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(75, 85, 99, 1);\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-gray-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(55, 65, 81, 1);\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(31, 41, 55, 1);\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-gray-800\\/50 {\n  background-color: rgba(31, 41, 55, 0.5);\n}\n\n\n.dark .dark\\:bg-gray-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(17, 24, 39, 1);\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-green-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(3, 84, 63, 1);\n  background-color: rgb(3 84 63 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-red-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(224, 36, 36, 1);\n  background-color: rgb(224 36 36 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-red-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(155, 28, 28, 1);\n  background-color: rgb(155 28 28 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-teal-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(4, 116, 129, 1);\n  background-color: rgb(4 116 129 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:bg-opacity-80 {\n  --tw-bg-opacity: 0.8;\n}\n\n\n.dark .dark\\:text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgba(63, 131, 248, 1);\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-gray-200 {\n  --tw-text-opacity: 1;\n  color: rgba(229, 231, 235, 1);\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgba(156, 163, 175, 1);\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgba(107, 114, 128, 1);\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-green-200 {\n  --tw-text-opacity: 1;\n  color: rgba(188, 240, 218, 1);\n  color: rgb(188 240 218 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-red-200 {\n  --tw-text-opacity: 1;\n  color: rgba(251, 213, 213, 1);\n  color: rgb(251 213 213 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:placeholder-gray-400::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgba(156, 163, 175, 1);\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\n\n\n.dark .dark\\:placeholder-gray-400::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgba(156, 163, 175, 1);\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\n\n\n.dark .dark\\:shadow-gray-600 {\n  --tw-shadow-color: #4B5563;\n  --tw-shadow: var(--tw-shadow-colored);\n}\n\n\n.dark .dark\\:hover\\:border-gray-600:hover {\n  --tw-border-opacity: 1;\n  border-color: rgba(75, 85, 99, 1);\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-blue-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(26, 86, 219, 1);\n  background-color: rgb(26 86 219 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-emerald-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(4, 120, 87, 1);\n  background-color: rgb(4 120 87 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-gray-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(75, 85, 99, 1);\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-gray-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(55, 65, 81, 1);\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-gray-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(31, 41, 55, 1);\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-red-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(200, 30, 30, 1);\n  background-color: rgb(200 30 30 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:bg-teal-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(3, 102, 114, 1);\n  background-color: rgb(3 102 114 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:hover\\:text-blue-500:hover {\n  --tw-text-opacity: 1;\n  color: rgba(63, 131, 248, 1);\n  color: rgb(63 131 248 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:hover\\:text-gray-300:hover {\n  --tw-text-opacity: 1;\n  color: rgba(209, 213, 219, 1);\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:hover\\:text-white:hover {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n\n.dark .dark\\:focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgba(63, 131, 248, 1);\n  border-color: rgb(63 131 248 / var(--tw-border-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-blue-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(63, 131, 248, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-blue-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(30, 66, 159, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-emerald-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(6, 95, 70, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-gray-600:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(75, 85, 99, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-gray-700:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(55, 65, 81, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-red-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(155, 28, 28, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-red-900:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(119, 29, 29, var(--tw-ring-opacity));\n}\n\n\n.dark .dark\\:focus\\:ring-teal-800:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgba(5, 80, 92, var(--tw-ring-opacity));\n}\n\n\n.dark .group:hover .dark\\:group-hover\\:text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n\n@media (min-width: 640px) {\n\n  .sm\\:col-span-3 {\n    grid-column: span 3 / span 3;\n  }\n\n  .sm\\:w-auto {\n    width: auto;\n  }\n\n  .sm\\:rounded-lg {\n    border-radius: 0.5rem;\n  }\n\n  .sm\\:p-8 {\n    padding: 2rem;\n  }\n\n  .sm\\:text-2xl {\n    font-size: 1.5rem;\n    line-height: 2rem;\n  }\n}\n\n\n@media (min-width: 768px) {\n\n  .md\\:inset-0 {\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n  }\n\n  .md\\:ml-3 {\n    margin-left: 0.75rem;\n  }\n\n  .md\\:ml-64 {\n    margin-left: 16rem;\n  }\n\n  .md\\:ml-auto {\n    margin-left: auto;\n  }\n\n  .md\\:mr-2 {\n    margin-right: 0.5rem;\n  }\n\n  .md\\:mr-24 {\n    margin-right: 6rem;\n  }\n\n  .md\\:mr-3 {\n    margin-right: 0.75rem;\n  }\n\n  .md\\:mr-64 {\n    margin-right: 16rem;\n  }\n\n  .md\\:block {\n    display: block;\n  }\n\n  .md\\:inline-block {\n    display: inline-block;\n  }\n\n  .md\\:flex {\n    display: flex;\n  }\n\n  .md\\:hidden {\n    display: none;\n  }\n\n  .md\\:w-auto {\n    width: auto;\n  }\n\n  .md\\:w-full {\n    width: 100%;\n  }\n\n  .md\\:translate-x-0 {\n    --tw-translate-x: 0px;\n    transform: translate(0px, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  }\n\n  .md\\:flex-row {\n    flex-direction: row;\n  }\n\n  .md\\:space-x-3 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(0.75rem * 0);\n    margin-right: calc(0.75rem * var(--tw-space-x-reverse));\n    margin-left: calc(0.75rem * (1 - 0));\n    margin-left: calc(0.75rem * (1 - var(--tw-space-x-reverse)));\n    margin-left: calc(0.75rem * calc(1 - 0));\n    margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\n  }\n\n  .md\\:text-lg {\n    font-size: 1.125rem;\n    line-height: 1.75rem;\n  }\n}\n\n\n@media (min-width: 1024px) {\n\n  .lg\\:w-4\\/12 {\n    width: 33.333333%;\n  }\n\n  .lg\\:max-w-xl {\n    max-width: 36rem;\n  }\n\n  .lg\\:px-5 {\n    padding-left: 1.25rem;\n    padding-right: 1.25rem;\n  }\n\n  .lg\\:pl-3 {\n    padding-left: 0.75rem;\n  }\n}\n\n\n.\\[\\&\\>\\*\\]\\:\\!border-none>* {\n  border-style: none !important;\n}\n\n\n.\\[\\&\\>\\*\\]\\:\\!stroke-black>* {\n  stroke: #000000 !important;\n}\n\n\n.dark .\\[\\&\\>\\*\\]\\:dark\\:bg-gray-600>* {\n  --tw-bg-opacity: 1;\n  background-color: rgba(75, 85, 99, 1);\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n\n.dark .dark\\:\\[\\&\\>\\*\\]\\:\\!stroke-white>* {\n  stroke: #ffffff !important;\n}", "",{"version":3,"sources":["webpack://./src/styles.css","<no source>"],"names":[],"mappings":"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;;CAAc;;AAAd;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,wRAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,0BAAc;EAAd,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;;AAAd;EAAA,wBAAc;KAAd,qBAAc;UAAd,gBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,mBAAc;EAAd,sBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,eAAc;EAAd,mBAAc;EAAd,8BAAc;AAAA;;AAAd;EAAA,8BAAc;EAAd,mBAAc;EAAd,4CAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wBAAc;EAAd,2GAAc;EAAd,yGAAc;EAAd,mGAAc;EAAd,iFAAc;EAAd;AAAc;;AAAd;EAAA,cAAc;EAAd;AAAc;;AAAd;EAAA,cAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,yDAAc;EAAd,wCAAc;EAAd,4BAAc;EAAd,4BAAc;EAAd,qBAAc;EAAd,iCAAc;UAAd;AAAc;;AAAd;EAAA,sBAAc;EAAd,yBAAc;EAAd,wBAAc;EAAd,4BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,0BAAc;EAAd,wBAAc;EAAd,sBAAc;EAAd,mCAAc;UAAd;AAAc;;AAAd;EAAA,wBAAc;KAAd,qBAAc;UAAd,gBAAc;EAAd,UAAc;EAAd,iCAAc;UAAd,yBAAc;EAAd,qBAAc;EAAd,sBAAc;EAAd,6BAAc;EAAd,yBAAc;KAAd,sBAAc;UAAd,iBAAc;EAAd,cAAc;EAAd,YAAc;EAAd,WAAc;EAAd,cAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,iBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,8BAAc;EAAd,mBAAc;EAAd,4CAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wBAAc;EAAd,2GAAc;EAAd,yGAAc;EAAd,mGAAc;EAAd;AAAc;;AAAd;EAAA,yBAAc;EAAd,8BAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,yDAAc;EAAd,yBAAc;EAAd,8BAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd;AAAc;;AAAd;EAAA,yBAAc;EAAd;AAAc;;AAAd;EAAA,iFAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,eAAc;EAAd,gBAAc;EAAd,UAAc;EAAd,kBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,YAAc;EAAd,mBAAc;EAAd,SAAc;EAAd,gBAAc;EAAd,mBAAc;EAAd,eAAc;EAAd,qBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,mBAAc;EAAd,kBAAc;EAAd,kBAAc;AAAA;;AAAd;EAAA;AAAc;;AAAd;EAAA,YAAc;EAAd,mBAAc;AAAA;;AAAd;EAAA;AAAc;;AAAd;EAAA,eAAc;EAAd,cAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,SAAc;EAAd,gBAAc;EAAd,qBAAc;EAAd,wBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,8BAAc;EAAd,mBAAc;EAAd,2GAAc;EAAd,yGAAc;EAAd,4MAAc;EAAd,4FAAc;EAAd,sBAAc;EAAd;AAAc;;AAAd;EAAA,eAAc;EAAd,cAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,SAAc;EAAd,gBAAc;EAAd,qBAAc;EAAd,wBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,WAAc;EAAd,kBAAc;EAAd,aAAc;EAAd,cAAc;EAAd,iBAAc;EAAd,qBAAc;EAAd,iBAAc;EAAd,qBAAc;EAAd,eAAc;EAAd,cAAc;EAAd,gJAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,4BAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,kBAAc;EAAd,UAAc;EAAd,WAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,WAAc;EAAd,mBAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,kBAAc;EAAd,UAAc;EAAd,WAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,WAAc;EAAd,mBAAc;EAAd;AAAc;;AAAd;EAAA,WAAc;EAAd,mBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,UAAc;EAAd,WAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,mBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA,qBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;AACd;EAAA;AAAoB;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AACpB;EAAA,kBAAmB;EAAnB,UAAmB;EAAnB,WAAmB;EAAnB,UAAmB;EAAnB,YAAmB;EAAnB,gBAAmB;EAAnB,sBAAmB;EAAnB,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,QAAmB;EAAnB,UAAmB;EAAnB,WAAmB;EAAnB;AAAmB;AAAnB;EAAA,QAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,gBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+KAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+KAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB,6KAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+KAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,8KAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,8KAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB,qLAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,yBAAmB;KAAnB,sBAAmB;UAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,4BAAmB;EAAnB,oDAAmB;EAAnB,iCAAmB;EAAnB,yDAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,2BAAmB;EAAnB,mDAAmB;EAAnB,gCAAmB;EAAnB,wDAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,gCAAmB;EAAnB,wDAAmB;EAAnB,qCAAmB;EAAnB,6DAAmB;EAAnB,yCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+BAAmB;EAAnB,uDAAmB;EAAnB,oCAAmB;EAAnB,4DAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8BAAmB;EAAnB,sDAAmB;EAAnB,mCAAmB;EAAnB,2DAAmB;EAAnB,uCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+BAAmB;EAAnB,uDAAmB;EAAnB,oCAAmB;EAAnB,4DAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,kCAAmB;EAAnB,0DAAmB;EAAnB,sCAAmB;EAAnB,8DAAmB;EAAnB,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,gCAAmB;EAAnB,wDAAmB;EAAnB,oCAAmB;EAAnB,4DAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,kCAAmB;EAAnB,0DAAmB;EAAnB,sCAAmB;EAAnB,8DAAmB;EAAnB,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,gCAAmB;EAAnB,wDAAmB;EAAnB,oCAAmB;EAAnB,4DAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,wBAAmB;EAAnB,qCAAmB;EAAnB,8DAAmB;EAAnB,yCAAmB;EAAnB,kEAAmB;EAAnB,kCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kCAAmB;EAAnB;AAAmB;AAAnB;EAAA,8BAAmB;EAAnB;AAAmB;AAAnB;EAAA,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,8BAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,mCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,kCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,iCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,oCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,uCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,uCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,eAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,uBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,4BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,4BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,2BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,8EAAmB;EAAnB,8FAAmB;EAAnB,mHAAmB;EAAnB;AAAmB;AAAnB;EAAA,mFAAmB;EAAnB,mGAAmB;EAAnB,wHAAmB;EAAnB;AAAmB;AAAnB;EAAA,iFAAmB;EAAnB,iGAAmB;EAAnB,sHAAmB;EAAnB;AAAmB;AAAnB;EAAA,4CAAmB;EAAnB,uDAAmB;EAAnB,iFAAmB;EAAnB;AAAmB;AAAnB;EAAA,oFAAmB;EAAnB,oGAAmB;EAAnB,yHAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,4KAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,gKAAmB;EAAnB,wJAAmB;EAAnB,iLAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,4BAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,8BAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;;;AAGnB;IACI,UAAU;AACd;;;AAPA;EAAA,uBCAA;EDAA,qCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,6BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,4BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,2BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,2BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,2BCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,oCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,oCCAA;EDAA;CCAA;;;ADAA;EAAA,+BCAA;EDAA;CCAA;;;ADAA;EAAA,4GCAA;EDAA,0GCAA;EDAA,2MCAA;EDAA;CCAA;;;ADAA;EAAA,4GCAA;EDAA,0GCAA;EDAA,2MCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,2BCAA;EDAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,oCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,qCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,wCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,qCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,6BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,4BCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,4BCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,2BCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,kCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,6BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;EAAA,uBCAA;EDAA,oCCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA;CCAA;;;ADAA;EAAA,qBCAA;EDAA,8BCAA;EDAA;CCAA;;;ADAA;;EAAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,kBCAA;IDAA;GCAA;CAAA;;;ADAA;;EAAA;IAAA,SCAA;IDAA,WCAA;IDAA,YCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,sBCAA;IDAA,8KCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,wBCAA;IDAA,gCCAA;IDAA,wDCAA;IDAA,qCCAA;IDAA,6DCAA;IDAA,yCCAA;IDAA;GCAA;;EDAA;IAAA,oBCAA;IDAA;GCAA;CAAA;;;ADAA;;EAAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,sBCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;CAAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA;CCAA;;;ADAA;EAAA,mBCAA;EDAA,sCCAA;EDAA;CCAA;;;ADAA;EAAA;CCAA","sourcesContent":["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n\n.text-danger {\n    color: red;\n}",null],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/accordion/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/accordion/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initAccordions": () => (/* binding */ initAccordions)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    alwaysOpen: false,
    activeClasses: 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white',
    inactiveClasses: 'text-gray-500 dark:text-gray-400',
    onOpen: function () { },
    onClose: function () { },
    onToggle: function () { },
};
var Accordion = /** @class */ (function () {
    function Accordion(items, options) {
        if (items === void 0) { items = []; }
        if (options === void 0) { options = Default; }
        this._items = items;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Accordion.prototype._init = function () {
        var _this = this;
        if (this._items.length) {
            // show accordion item based on click
            this._items.map(function (item) {
                if (item.active) {
                    _this.open(item.id);
                }
                item.triggerEl.addEventListener('click', function () {
                    _this.toggle(item.id);
                });
            });
        }
    };
    Accordion.prototype.getItem = function (id) {
        return this._items.filter(function (item) { return item.id === id; })[0];
    };
    Accordion.prototype.open = function (id) {
        var _a, _b;
        var _this = this;
        var item = this.getItem(id);
        // don't hide other accordions if always open
        if (!this._options.alwaysOpen) {
            this._items.map(function (i) {
                var _a, _b;
                if (i !== item) {
                    (_a = i.triggerEl.classList).remove.apply(_a, _this._options.activeClasses.split(' '));
                    (_b = i.triggerEl.classList).add.apply(_b, _this._options.inactiveClasses.split(' '));
                    i.targetEl.classList.add('hidden');
                    i.triggerEl.setAttribute('aria-expanded', 'false');
                    i.active = false;
                    // rotate icon if set
                    if (i.iconEl) {
                        i.iconEl.classList.remove('rotate-180');
                    }
                }
            });
        }
        // show active item
        (_a = item.triggerEl.classList).add.apply(_a, this._options.activeClasses.split(' '));
        (_b = item.triggerEl.classList).remove.apply(_b, this._options.inactiveClasses.split(' '));
        item.triggerEl.setAttribute('aria-expanded', 'true');
        item.targetEl.classList.remove('hidden');
        item.active = true;
        // rotate icon if set
        if (item.iconEl) {
            item.iconEl.classList.add('rotate-180');
        }
        // callback function
        this._options.onOpen(this, item);
    };
    Accordion.prototype.toggle = function (id) {
        var item = this.getItem(id);
        if (item.active) {
            this.close(id);
        }
        else {
            this.open(id);
        }
        // callback function
        this._options.onToggle(this, item);
    };
    Accordion.prototype.close = function (id) {
        var _a, _b;
        var item = this.getItem(id);
        (_a = item.triggerEl.classList).remove.apply(_a, this._options.activeClasses.split(' '));
        (_b = item.triggerEl.classList).add.apply(_b, this._options.inactiveClasses.split(' '));
        item.targetEl.classList.add('hidden');
        item.triggerEl.setAttribute('aria-expanded', 'false');
        item.active = false;
        // rotate icon if set
        if (item.iconEl) {
            item.iconEl.classList.remove('rotate-180');
        }
        // callback function
        this._options.onClose(this, item);
    };
    return Accordion;
}());
if (typeof window !== 'undefined') {
    window.Accordion = Accordion;
}
function initAccordions() {
    document.querySelectorAll('[data-accordion]').forEach(function ($accordionEl) {
        var alwaysOpen = $accordionEl.getAttribute('data-accordion');
        var activeClasses = $accordionEl.getAttribute('data-active-classes');
        var inactiveClasses = $accordionEl.getAttribute('data-inactive-classes');
        var items = [];
        $accordionEl
            .querySelectorAll('[data-accordion-target]')
            .forEach(function ($triggerEl) {
            var item = {
                id: $triggerEl.getAttribute('data-accordion-target'),
                triggerEl: $triggerEl,
                targetEl: document.querySelector($triggerEl.getAttribute('data-accordion-target')),
                iconEl: $triggerEl.querySelector('[data-accordion-icon]'),
                active: $triggerEl.getAttribute('aria-expanded') === 'true'
                    ? true
                    : false,
            };
            items.push(item);
        });
        new Accordion(items, {
            alwaysOpen: alwaysOpen === 'open' ? true : false,
            activeClasses: activeClasses
                ? activeClasses
                : Default.activeClasses,
            inactiveClasses: inactiveClasses
                ? inactiveClasses
                : Default.inactiveClasses,
        });
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Accordion);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/accordion/interface.js":
/*!*************************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/accordion/interface.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/accordion/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/accordion/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/carousel/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/carousel/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initCarousels": () => (/* binding */ initCarousels)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    defaultPosition: 0,
    indicators: {
        items: [],
        activeClasses: 'bg-white dark:bg-gray-800',
        inactiveClasses: 'bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800',
    },
    interval: 3000,
    onNext: function () { },
    onPrev: function () { },
    onChange: function () { },
};
var Carousel = /** @class */ (function () {
    function Carousel(items, options) {
        if (items === void 0) { items = []; }
        if (options === void 0) { options = Default; }
        this._items = items;
        this._options = __assign(__assign(__assign({}, Default), options), { indicators: __assign(__assign({}, Default.indicators), options.indicators) });
        this._activeItem = this.getItem(this._options.defaultPosition);
        this._indicators = this._options.indicators.items;
        this._intervalDuration = this._options.interval;
        this._intervalInstance = null;
        this._init();
    }
    /**
     * initialize carousel and items based on active one
     */
    Carousel.prototype._init = function () {
        var _this = this;
        this._items.map(function (item) {
            item.el.classList.add('absolute', 'inset-0', 'transition-transform', 'transform');
        });
        // if no active item is set then first position is default
        if (this._getActiveItem()) {
            this.slideTo(this._getActiveItem().position);
        }
        else {
            this.slideTo(0);
        }
        this._indicators.map(function (indicator, position) {
            indicator.el.addEventListener('click', function () {
                _this.slideTo(position);
            });
        });
    };
    Carousel.prototype.getItem = function (position) {
        return this._items[position];
    };
    /**
     * Slide to the element based on id
     * @param {*} position
     */
    Carousel.prototype.slideTo = function (position) {
        var nextItem = this._items[position];
        var rotationItems = {
            left: nextItem.position === 0
                ? this._items[this._items.length - 1]
                : this._items[nextItem.position - 1],
            middle: nextItem,
            right: nextItem.position === this._items.length - 1
                ? this._items[0]
                : this._items[nextItem.position + 1],
        };
        this._rotate(rotationItems);
        this._setActiveItem(nextItem);
        if (this._intervalInstance) {
            this.pause();
            this.cycle();
        }
        this._options.onChange(this);
    };
    /**
     * Based on the currently active item it will go to the next position
     */
    Carousel.prototype.next = function () {
        var activeItem = this._getActiveItem();
        var nextItem = null;
        // check if last item
        if (activeItem.position === this._items.length - 1) {
            nextItem = this._items[0];
        }
        else {
            nextItem = this._items[activeItem.position + 1];
        }
        this.slideTo(nextItem.position);
        // callback function
        this._options.onNext(this);
    };
    /**
     * Based on the currently active item it will go to the previous position
     */
    Carousel.prototype.prev = function () {
        var activeItem = this._getActiveItem();
        var prevItem = null;
        // check if first item
        if (activeItem.position === 0) {
            prevItem = this._items[this._items.length - 1];
        }
        else {
            prevItem = this._items[activeItem.position - 1];
        }
        this.slideTo(prevItem.position);
        // callback function
        this._options.onPrev(this);
    };
    /**
     * This method applies the transform classes based on the left, middle, and right rotation carousel items
     * @param {*} rotationItems
     */
    Carousel.prototype._rotate = function (rotationItems) {
        // reset
        this._items.map(function (item) {
            item.el.classList.add('hidden');
        });
        // left item (previously active)
        rotationItems.left.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-20');
        rotationItems.left.el.classList.add('-translate-x-full', 'z-10');
        // currently active item
        rotationItems.middle.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-10');
        rotationItems.middle.el.classList.add('translate-x-0', 'z-20');
        // right item (upcoming active)
        rotationItems.right.el.classList.remove('-translate-x-full', 'translate-x-full', 'translate-x-0', 'hidden', 'z-20');
        rotationItems.right.el.classList.add('translate-x-full', 'z-10');
    };
    /**
     * Set an interval to cycle through the carousel items
     */
    Carousel.prototype.cycle = function () {
        var _this = this;
        if (typeof window !== 'undefined') {
            this._intervalInstance = window.setInterval(function () {
                _this.next();
            }, this._intervalDuration);
        }
    };
    /**
     * Clears the cycling interval
     */
    Carousel.prototype.pause = function () {
        clearInterval(this._intervalInstance);
    };
    /**
     * Get the currently active item
     */
    Carousel.prototype._getActiveItem = function () {
        return this._activeItem;
    };
    /**
     * Set the currently active item and data attribute
     * @param {*} position
     */
    Carousel.prototype._setActiveItem = function (item) {
        var _a, _b;
        var _this = this;
        this._activeItem = item;
        var position = item.position;
        // update the indicators if available
        if (this._indicators.length) {
            this._indicators.map(function (indicator) {
                var _a, _b;
                indicator.el.setAttribute('aria-current', 'false');
                (_a = indicator.el.classList).remove.apply(_a, _this._options.indicators.activeClasses.split(' '));
                (_b = indicator.el.classList).add.apply(_b, _this._options.indicators.inactiveClasses.split(' '));
            });
            (_a = this._indicators[position].el.classList).add.apply(_a, this._options.indicators.activeClasses.split(' '));
            (_b = this._indicators[position].el.classList).remove.apply(_b, this._options.indicators.inactiveClasses.split(' '));
            this._indicators[position].el.setAttribute('aria-current', 'true');
        }
    };
    return Carousel;
}());
if (typeof window !== 'undefined') {
    window.Carousel = Carousel;
}
function initCarousels() {
    document.querySelectorAll('[data-carousel]').forEach(function ($carouselEl) {
        var interval = $carouselEl.getAttribute('data-carousel-interval');
        var slide = $carouselEl.getAttribute('data-carousel') === 'slide'
            ? true
            : false;
        var items = [];
        var defaultPosition = 0;
        if ($carouselEl.querySelectorAll('[data-carousel-item]').length) {
            Array.from($carouselEl.querySelectorAll('[data-carousel-item]')).map(function ($carouselItemEl, position) {
                items.push({
                    position: position,
                    el: $carouselItemEl,
                });
                if ($carouselItemEl.getAttribute('data-carousel-item') ===
                    'active') {
                    defaultPosition = position;
                }
            });
        }
        var indicators = [];
        if ($carouselEl.querySelectorAll('[data-carousel-slide-to]').length) {
            Array.from($carouselEl.querySelectorAll('[data-carousel-slide-to]')).map(function ($indicatorEl) {
                indicators.push({
                    position: parseInt($indicatorEl.getAttribute('data-carousel-slide-to')),
                    el: $indicatorEl,
                });
            });
        }
        var carousel = new Carousel(items, {
            defaultPosition: defaultPosition,
            indicators: {
                items: indicators,
            },
            interval: interval ? interval : Default.interval,
        });
        if (slide) {
            carousel.cycle();
        }
        // check for controls
        var carouselNextEl = $carouselEl.querySelector('[data-carousel-next]');
        var carouselPrevEl = $carouselEl.querySelector('[data-carousel-prev]');
        if (carouselNextEl) {
            carouselNextEl.addEventListener('click', function () {
                carousel.next();
            });
        }
        if (carouselPrevEl) {
            carouselPrevEl.addEventListener('click', function () {
                carousel.prev();
            });
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Carousel);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/carousel/interface.js":
/*!************************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/carousel/interface.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/carousel/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/carousel/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/collapse/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/collapse/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initCollapses": () => (/* binding */ initCollapses)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    onCollapse: function () { },
    onExpand: function () { },
    onToggle: function () { },
};
var Collapse = /** @class */ (function () {
    function Collapse(targetEl, triggerEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (triggerEl === void 0) { triggerEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Collapse.prototype._init = function () {
        var _this = this;
        if (this._triggerEl) {
            if (this._triggerEl.hasAttribute('aria-expanded')) {
                this._visible =
                    this._triggerEl.getAttribute('aria-expanded') === 'true';
            }
            else {
                // fix until v2 not to break previous single collapses which became dismiss
                this._visible = !this._targetEl.classList.contains('hidden');
            }
            this._triggerEl.addEventListener('click', function () {
                _this.toggle();
            });
        }
    };
    Collapse.prototype.collapse = function () {
        this._targetEl.classList.add('hidden');
        if (this._triggerEl) {
            this._triggerEl.setAttribute('aria-expanded', 'false');
        }
        this._visible = false;
        // callback function
        this._options.onCollapse(this);
    };
    Collapse.prototype.expand = function () {
        this._targetEl.classList.remove('hidden');
        if (this._triggerEl) {
            this._triggerEl.setAttribute('aria-expanded', 'true');
        }
        this._visible = true;
        // callback function
        this._options.onExpand(this);
    };
    Collapse.prototype.toggle = function () {
        if (this._visible) {
            this.collapse();
        }
        else {
            this.expand();
        }
        // callback function
        this._options.onToggle(this);
    };
    return Collapse;
}());
if (typeof window !== 'undefined') {
    window.Collapse = Collapse;
}
function initCollapses() {
    document
        .querySelectorAll('[data-collapse-toggle]')
        .forEach(function ($triggerEl) {
        var targetId = $triggerEl.getAttribute('data-collapse-toggle');
        var $targetEl = document.getElementById(targetId);
        // check if the target element exists
        if ($targetEl) {
            new Collapse($targetEl, $triggerEl);
        }
        else {
            console.error("The target element with id \"".concat(targetId, "\" does not exist. Please check the data-collapse-toggle attribute."));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Collapse);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/collapse/interface.js":
/*!************************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/collapse/interface.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/collapse/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/collapse/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dial/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dial/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initDials": () => (/* binding */ initDials)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    triggerType: 'hover',
    onShow: function () { },
    onHide: function () { },
    onToggle: function () { },
};
var Dial = /** @class */ (function () {
    function Dial(parentEl, triggerEl, targetEl, options) {
        if (parentEl === void 0) { parentEl = null; }
        if (triggerEl === void 0) { triggerEl = null; }
        if (targetEl === void 0) { targetEl = null; }
        if (options === void 0) { options = Default; }
        this._parentEl = parentEl;
        this._triggerEl = triggerEl;
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Dial.prototype._init = function () {
        var _this = this;
        if (this._triggerEl) {
            var triggerEventTypes = this._getTriggerEventTypes(this._options.triggerType);
            triggerEventTypes.showEvents.forEach(function (ev) {
                _this._triggerEl.addEventListener(ev, function () {
                    _this.show();
                });
                _this._targetEl.addEventListener(ev, function () {
                    _this.show();
                });
            });
            triggerEventTypes.hideEvents.forEach(function (ev) {
                _this._parentEl.addEventListener(ev, function () {
                    if (!_this._parentEl.matches(':hover')) {
                        _this.hide();
                    }
                });
            });
        }
    };
    Dial.prototype.hide = function () {
        this._targetEl.classList.add('hidden');
        if (this._triggerEl) {
            this._triggerEl.setAttribute('aria-expanded', 'false');
        }
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    Dial.prototype.show = function () {
        this._targetEl.classList.remove('hidden');
        if (this._triggerEl) {
            this._triggerEl.setAttribute('aria-expanded', 'true');
        }
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Dial.prototype.toggle = function () {
        if (this._visible) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    Dial.prototype.isHidden = function () {
        return !this._visible;
    };
    Dial.prototype.isVisible = function () {
        return this._visible;
    };
    Dial.prototype._getTriggerEventTypes = function (triggerType) {
        switch (triggerType) {
            case 'hover':
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
            case 'click':
                return {
                    showEvents: ['click', 'focus'],
                    hideEvents: ['focusout', 'blur'],
                };
            case 'none':
                return {
                    showEvents: [],
                    hideEvents: [],
                };
            default:
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
        }
    };
    return Dial;
}());
if (typeof window !== 'undefined') {
    window.Dial = Dial;
}
function initDials() {
    document.querySelectorAll('[data-dial-init]').forEach(function ($parentEl) {
        var $triggerEl = $parentEl.querySelector('[data-dial-toggle]');
        if ($triggerEl) {
            var dialId = $triggerEl.getAttribute('data-dial-toggle');
            var $dialEl = document.getElementById(dialId);
            if ($dialEl) {
                var triggerType = $triggerEl.getAttribute('data-dial-trigger');
                new Dial($parentEl, $triggerEl, $dialEl, {
                    triggerType: triggerType
                        ? triggerType
                        : Default.triggerType,
                });
            }
            else {
                console.error("Dial with id ".concat(dialId, " does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"));
            }
        }
        else {
            console.error("Dial with id ".concat($parentEl.id, " does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dial);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dial/interface.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dial/interface.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dial/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dial/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dismiss/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dismiss/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initDismisses": () => (/* binding */ initDismisses)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    transition: 'transition-opacity',
    duration: 300,
    timing: 'ease-out',
    onHide: function () { },
};
var Dismiss = /** @class */ (function () {
    function Dismiss(targetEl, triggerEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (triggerEl === void 0) { triggerEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Dismiss.prototype._init = function () {
        var _this = this;
        if (this._triggerEl) {
            this._triggerEl.addEventListener('click', function () {
                _this.hide();
            });
        }
    };
    Dismiss.prototype.hide = function () {
        var _this = this;
        this._targetEl.classList.add(this._options.transition, "duration-".concat(this._options.duration), this._options.timing, 'opacity-0');
        setTimeout(function () {
            _this._targetEl.classList.add('hidden');
        }, this._options.duration);
        // callback function
        this._options.onHide(this, this._targetEl);
    };
    return Dismiss;
}());
if (typeof window !== 'undefined') {
    window.Dismiss = Dismiss;
}
function initDismisses() {
    document.querySelectorAll('[data-dismiss-target]').forEach(function ($triggerEl) {
        var targetId = $triggerEl.getAttribute('data-dismiss-target');
        var $dismissEl = document.querySelector(targetId);
        if ($dismissEl) {
            new Dismiss($dismissEl, $triggerEl);
        }
        else {
            console.error("The dismiss element with id \"".concat(targetId, "\" does not exist. Please check the data-dismiss-target attribute."));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dismiss);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dismiss/interface.js":
/*!***********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dismiss/interface.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dismiss/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dismiss/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/drawer/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/drawer/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initDrawers": () => (/* binding */ initDrawers)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    placement: 'left',
    bodyScrolling: false,
    backdrop: true,
    edge: false,
    edgeOffset: 'bottom-[60px]',
    backdropClasses: 'bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30',
    onShow: function () { },
    onHide: function () { },
    onToggle: function () { },
};
var Drawer = /** @class */ (function () {
    function Drawer(targetEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._visible = false;
        this._init();
    }
    Drawer.prototype._init = function () {
        var _this = this;
        // set initial accessibility attributes
        if (this._targetEl) {
            this._targetEl.setAttribute('aria-hidden', 'true');
            this._targetEl.classList.add('transition-transform');
        }
        // set base placement classes
        this._getPlacementClasses(this._options.placement).base.map(function (c) {
            _this._targetEl.classList.add(c);
        });
        // add keyboard event listener to document
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                // if 'Escape' key is pressed
                if (_this.isVisible()) {
                    // if the Drawer is visible
                    _this.hide(); // hide the Drawer
                }
            }
        });
    };
    Drawer.prototype.hide = function () {
        var _this = this;
        // based on the edge option show placement classes
        if (this._options.edge) {
            this._getPlacementClasses(this._options.placement + '-edge').active.map(function (c) {
                _this._targetEl.classList.remove(c);
            });
            this._getPlacementClasses(this._options.placement + '-edge').inactive.map(function (c) {
                _this._targetEl.classList.add(c);
            });
        }
        else {
            this._getPlacementClasses(this._options.placement).active.map(function (c) {
                _this._targetEl.classList.remove(c);
            });
            this._getPlacementClasses(this._options.placement).inactive.map(function (c) {
                _this._targetEl.classList.add(c);
            });
        }
        // set accessibility attributes
        this._targetEl.setAttribute('aria-hidden', 'true');
        this._targetEl.removeAttribute('aria-modal');
        this._targetEl.removeAttribute('role');
        // enable body scroll
        if (!this._options.bodyScrolling) {
            document.body.classList.remove('overflow-hidden');
        }
        // destroy backdrop
        if (this._options.backdrop) {
            this._destroyBackdropEl();
        }
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    Drawer.prototype.show = function () {
        var _this = this;
        if (this._options.edge) {
            this._getPlacementClasses(this._options.placement + '-edge').active.map(function (c) {
                _this._targetEl.classList.add(c);
            });
            this._getPlacementClasses(this._options.placement + '-edge').inactive.map(function (c) {
                _this._targetEl.classList.remove(c);
            });
        }
        else {
            this._getPlacementClasses(this._options.placement).active.map(function (c) {
                _this._targetEl.classList.add(c);
            });
            this._getPlacementClasses(this._options.placement).inactive.map(function (c) {
                _this._targetEl.classList.remove(c);
            });
        }
        // set accessibility attributes
        this._targetEl.setAttribute('aria-modal', 'true');
        this._targetEl.setAttribute('role', 'dialog');
        this._targetEl.removeAttribute('aria-hidden');
        // disable body scroll
        if (!this._options.bodyScrolling) {
            document.body.classList.add('overflow-hidden');
        }
        // show backdrop
        if (this._options.backdrop) {
            this._createBackdrop();
        }
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Drawer.prototype.toggle = function () {
        if (this.isVisible()) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    Drawer.prototype._createBackdrop = function () {
        var _a;
        var _this = this;
        if (!this._visible) {
            var backdropEl = document.createElement('div');
            backdropEl.setAttribute('drawer-backdrop', '');
            (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(' '));
            document.querySelector('body').append(backdropEl);
            backdropEl.addEventListener('click', function () {
                _this.hide();
            });
        }
    };
    Drawer.prototype._destroyBackdropEl = function () {
        if (this._visible) {
            document.querySelector('[drawer-backdrop]').remove();
        }
    };
    Drawer.prototype._getPlacementClasses = function (placement) {
        switch (placement) {
            case 'top':
                return {
                    base: ['top-0', 'left-0', 'right-0'],
                    active: ['transform-none'],
                    inactive: ['-translate-y-full'],
                };
            case 'right':
                return {
                    base: ['right-0', 'top-0'],
                    active: ['transform-none'],
                    inactive: ['translate-x-full'],
                };
            case 'bottom':
                return {
                    base: ['bottom-0', 'left-0', 'right-0'],
                    active: ['transform-none'],
                    inactive: ['translate-y-full'],
                };
            case 'left':
                return {
                    base: ['left-0', 'top-0'],
                    active: ['transform-none'],
                    inactive: ['-translate-x-full'],
                };
            case 'bottom-edge':
                return {
                    base: ['left-0', 'top-0'],
                    active: ['transform-none'],
                    inactive: ['translate-y-full', this._options.edgeOffset],
                };
            default:
                return {
                    base: ['left-0', 'top-0'],
                    active: ['transform-none'],
                    inactive: ['-translate-x-full'],
                };
        }
    };
    Drawer.prototype.isHidden = function () {
        return !this._visible;
    };
    Drawer.prototype.isVisible = function () {
        return this._visible;
    };
    return Drawer;
}());
if (typeof window !== 'undefined') {
    window.Drawer = Drawer;
}
var getDrawerInstance = function (id, instances) {
    if (instances.some(function (drawerInstance) { return drawerInstance.id === id; })) {
        return instances.find(function (drawerInstance) { return drawerInstance.id === id; });
    }
};
function initDrawers() {
    var drawerInstances = [];
    document.querySelectorAll('[data-drawer-target]').forEach(function ($triggerEl) {
        // mandatory
        var drawerId = $triggerEl.getAttribute('data-drawer-target');
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            // optional
            var placement = $triggerEl.getAttribute('data-drawer-placement');
            var bodyScrolling = $triggerEl.getAttribute('data-drawer-body-scrolling');
            var backdrop = $triggerEl.getAttribute('data-drawer-backdrop');
            var edge = $triggerEl.getAttribute('data-drawer-edge');
            var edgeOffset = $triggerEl.getAttribute('data-drawer-edge-offset');
            if (!getDrawerInstance(drawerId, drawerInstances)) {
                drawerInstances.push({
                    id: drawerId,
                    object: new Drawer($drawerEl, {
                        placement: placement ? placement : Default.placement,
                        bodyScrolling: bodyScrolling
                            ? bodyScrolling === 'true'
                                ? true
                                : false
                            : Default.bodyScrolling,
                        backdrop: backdrop
                            ? backdrop === 'true'
                                ? true
                                : false
                            : Default.backdrop,
                        edge: edge
                            ? edge === 'true'
                                ? true
                                : false
                            : Default.edge,
                        edgeOffset: edgeOffset
                            ? edgeOffset
                            : Default.edgeOffset,
                    }),
                });
            }
        }
        else {
            console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
        }
    });
    document.querySelectorAll('[data-drawer-toggle]').forEach(function ($triggerEl) {
        var drawerId = $triggerEl.getAttribute('data-drawer-toggle');
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_1 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_1) {
                $triggerEl.addEventListener('click', function () {
                    drawer_1.object.toggle();
                });
            }
            else {
                console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            }
        }
        else {
            console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
        }
    });
    document
        .querySelectorAll('[data-drawer-dismiss], [data-drawer-hide]')
        .forEach(function ($triggerEl) {
        var drawerId = $triggerEl.getAttribute('data-drawer-dismiss')
            ? $triggerEl.getAttribute('data-drawer-dismiss')
            : $triggerEl.getAttribute('data-drawer-hide');
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_2 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_2) {
                $triggerEl.addEventListener('click', function () {
                    drawer_2.object.hide();
                });
            }
            else {
                console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            }
        }
        else {
            console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"));
        }
    });
    document.querySelectorAll('[data-drawer-show]').forEach(function ($triggerEl) {
        var drawerId = $triggerEl.getAttribute('data-drawer-show');
        var $drawerEl = document.getElementById(drawerId);
        if ($drawerEl) {
            var drawer_3 = getDrawerInstance(drawerId, drawerInstances);
            if (drawer_3) {
                $triggerEl.addEventListener('click', function () {
                    drawer_3.object.show();
                });
            }
            else {
                console.error("Drawer with id ".concat(drawerId, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            }
        }
        else {
            console.error("Drawer with id ".concat(drawerId, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Drawer);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/drawer/interface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/drawer/interface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/drawer/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/drawer/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dropdown/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dropdown/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initDropdowns": () => (/* binding */ initDropdowns)
/* harmony export */ });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/* eslint-disable @typescript-eslint/no-empty-function */

var Default = {
    placement: 'bottom',
    triggerType: 'click',
    offsetSkidding: 0,
    offsetDistance: 10,
    delay: 300,
    onShow: function () { },
    onHide: function () { },
    onToggle: function () { },
};
var Dropdown = /** @class */ (function () {
    function Dropdown(targetElement, triggerElement, options) {
        if (targetElement === void 0) { targetElement = null; }
        if (triggerElement === void 0) { triggerElement = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetElement;
        this._triggerEl = triggerElement;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Dropdown.prototype._init = function () {
        if (this._triggerEl) {
            this._setupEventListeners();
        }
    };
    Dropdown.prototype._setupEventListeners = function () {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        // click event handling for trigger element
        if (this._options.triggerType === 'click') {
            triggerEvents.showEvents.forEach(function (ev) {
                _this._triggerEl.addEventListener(ev, function () {
                    _this.toggle();
                });
            });
        }
        // hover event handling for trigger element
        if (this._options.triggerType === 'hover') {
            triggerEvents.showEvents.forEach(function (ev) {
                _this._triggerEl.addEventListener(ev, function () {
                    if (ev === 'click') {
                        _this.toggle();
                    }
                    else {
                        setTimeout(function () {
                            _this.show();
                        }, _this._options.delay);
                    }
                });
                _this._targetEl.addEventListener(ev, function () {
                    _this.show();
                });
            });
            triggerEvents.hideEvents.forEach(function (ev) {
                _this._triggerEl.addEventListener(ev, function () {
                    setTimeout(function () {
                        if (!_this._targetEl.matches(':hover')) {
                            _this.hide();
                        }
                    }, _this._options.delay);
                });
                _this._targetEl.addEventListener(ev, function () {
                    setTimeout(function () {
                        if (!_this._triggerEl.matches(':hover')) {
                            _this.hide();
                        }
                    }, _this._options.delay);
                });
            });
        }
    };
    Dropdown.prototype._createPopperInstance = function () {
        return (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [
                            this._options.offsetSkidding,
                            this._options.offsetDistance,
                        ],
                    },
                },
            ],
        });
    };
    Dropdown.prototype._setupClickOutsideListener = function () {
        var _this = this;
        this._clickOutsideEventListener = function (ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener('click', this._clickOutsideEventListener, true);
    };
    Dropdown.prototype._removeClickOutsideListener = function () {
        document.body.removeEventListener('click', this._clickOutsideEventListener, true);
    };
    Dropdown.prototype._handleClickOutside = function (ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl &&
            !targetEl.contains(clickedEl) &&
            !this._triggerEl.contains(clickedEl) &&
            this.isVisible()) {
            this.hide();
        }
    };
    Dropdown.prototype._getTriggerEvents = function () {
        switch (this._options.triggerType) {
            case 'hover':
                return {
                    showEvents: ['mouseenter', 'click'],
                    hideEvents: ['mouseleave'],
                };
            case 'click':
                return {
                    showEvents: ['click'],
                    hideEvents: [],
                };
            case 'none':
                return {
                    showEvents: [],
                    hideEvents: [],
                };
            default:
                return {
                    showEvents: ['click'],
                    hideEvents: [],
                };
        }
    };
    Dropdown.prototype.toggle = function () {
        if (this.isVisible()) {
            this.hide();
        }
        else {
            this.show();
        }
        this._options.onToggle(this);
    };
    Dropdown.prototype.isVisible = function () {
        return this._visible;
    };
    Dropdown.prototype.show = function () {
        this._targetEl.classList.remove('hidden');
        this._targetEl.classList.add('block');
        // Enable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: true },
            ], false) })); });
        this._setupClickOutsideListener();
        // Update its position
        this._popperInstance.update();
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Dropdown.prototype.hide = function () {
        this._targetEl.classList.remove('block');
        this._targetEl.classList.add('hidden');
        // Disable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: false },
            ], false) })); });
        this._visible = false;
        this._removeClickOutsideListener();
        // callback function
        this._options.onHide(this);
    };
    return Dropdown;
}());
if (typeof window !== 'undefined') {
    window.Dropdown = Dropdown;
}
function initDropdowns() {
    document
        .querySelectorAll('[data-dropdown-toggle]')
        .forEach(function ($triggerEl) {
        var dropdownId = $triggerEl.getAttribute('data-dropdown-toggle');
        var $dropdownEl = document.getElementById(dropdownId);
        if ($dropdownEl) {
            var placement = $triggerEl.getAttribute('data-dropdown-placement');
            var offsetSkidding = $triggerEl.getAttribute('data-dropdown-offset-skidding');
            var offsetDistance = $triggerEl.getAttribute('data-dropdown-offset-distance');
            var triggerType = $triggerEl.getAttribute('data-dropdown-trigger');
            var delay = $triggerEl.getAttribute('data-dropdown-delay');
            new Dropdown($dropdownEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                triggerType: triggerType
                    ? triggerType
                    : Default.triggerType,
                offsetSkidding: offsetSkidding
                    ? parseInt(offsetSkidding)
                    : Default.offsetSkidding,
                offsetDistance: offsetDistance
                    ? parseInt(offsetDistance)
                    : Default.offsetDistance,
                delay: delay ? parseInt(delay) : Default.delay,
            });
        }
        else {
            console.error("The dropdown element with id \"".concat(dropdownId, "\" does not exist. Please check the data-dropdown-toggle attribute."));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dropdown);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dropdown/interface.js":
/*!************************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dropdown/interface.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/dropdown/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/dropdown/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initFlowbite": () => (/* binding */ initFlowbite)
/* harmony export */ });
/* harmony import */ var _accordion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordion */ "./node_modules/flowbite/lib/esm/components/accordion/index.js");
/* harmony import */ var _carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel */ "./node_modules/flowbite/lib/esm/components/carousel/index.js");
/* harmony import */ var _collapse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collapse */ "./node_modules/flowbite/lib/esm/components/collapse/index.js");
/* harmony import */ var _dial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dial */ "./node_modules/flowbite/lib/esm/components/dial/index.js");
/* harmony import */ var _dismiss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dismiss */ "./node_modules/flowbite/lib/esm/components/dismiss/index.js");
/* harmony import */ var _drawer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./drawer */ "./node_modules/flowbite/lib/esm/components/drawer/index.js");
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dropdown */ "./node_modules/flowbite/lib/esm/components/dropdown/index.js");
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modal */ "./node_modules/flowbite/lib/esm/components/modal/index.js");
/* harmony import */ var _popover__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./popover */ "./node_modules/flowbite/lib/esm/components/popover/index.js");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tabs */ "./node_modules/flowbite/lib/esm/components/tabs/index.js");
/* harmony import */ var _tooltip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tooltip */ "./node_modules/flowbite/lib/esm/components/tooltip/index.js");











function initFlowbite() {
    (0,_accordion__WEBPACK_IMPORTED_MODULE_0__.initAccordions)();
    (0,_collapse__WEBPACK_IMPORTED_MODULE_2__.initCollapses)();
    (0,_carousel__WEBPACK_IMPORTED_MODULE_1__.initCarousels)();
    (0,_dismiss__WEBPACK_IMPORTED_MODULE_4__.initDismisses)();
    (0,_dropdown__WEBPACK_IMPORTED_MODULE_6__.initDropdowns)();
    (0,_modal__WEBPACK_IMPORTED_MODULE_7__.initModals)();
    (0,_drawer__WEBPACK_IMPORTED_MODULE_5__.initDrawers)();
    (0,_tabs__WEBPACK_IMPORTED_MODULE_9__.initTabs)();
    (0,_tooltip__WEBPACK_IMPORTED_MODULE_10__.initTooltips)();
    (0,_popover__WEBPACK_IMPORTED_MODULE_8__.initPopovers)();
    (0,_dial__WEBPACK_IMPORTED_MODULE_3__.initDials)();
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/modal/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/modal/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initModals": () => (/* binding */ initModals)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    placement: 'center',
    backdropClasses: 'bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40',
    backdrop: 'dynamic',
    closable: true,
    onHide: function () { },
    onShow: function () { },
    onToggle: function () { },
};
var Modal = /** @class */ (function () {
    function Modal(targetEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._options = __assign(__assign({}, Default), options);
        this._isHidden = true;
        this._backdropEl = null;
        this._init();
    }
    Modal.prototype._init = function () {
        var _this = this;
        if (this._targetEl) {
            this._getPlacementClasses().map(function (c) {
                _this._targetEl.classList.add(c);
            });
        }
    };
    Modal.prototype._createBackdrop = function () {
        var _a;
        if (this._isHidden) {
            var backdropEl = document.createElement('div');
            backdropEl.setAttribute('modal-backdrop', '');
            (_a = backdropEl.classList).add.apply(_a, this._options.backdropClasses.split(' '));
            document.querySelector('body').append(backdropEl);
            this._backdropEl = backdropEl;
        }
    };
    Modal.prototype._destroyBackdropEl = function () {
        if (!this._isHidden) {
            document.querySelector('[modal-backdrop]').remove();
        }
    };
    Modal.prototype._setupModalCloseEventListeners = function () {
        var _this = this;
        if (this._options.backdrop === 'dynamic') {
            this._clickOutsideEventListener = function (ev) {
                _this._handleOutsideClick(ev.target);
            };
            this._targetEl.addEventListener('click', this._clickOutsideEventListener, true);
        }
        this._keydownEventListener = function (ev) {
            if (ev.key === 'Escape') {
                _this.hide();
            }
        };
        document.body.addEventListener('keydown', this._keydownEventListener, true);
    };
    Modal.prototype._removeModalCloseEventListeners = function () {
        if (this._options.backdrop === 'dynamic') {
            this._targetEl.removeEventListener('click', this._clickOutsideEventListener, true);
        }
        document.body.removeEventListener('keydown', this._keydownEventListener, true);
    };
    Modal.prototype._handleOutsideClick = function (target) {
        if (target === this._targetEl ||
            (target === this._backdropEl && this.isVisible())) {
            this.hide();
        }
    };
    Modal.prototype._getPlacementClasses = function () {
        switch (this._options.placement) {
            // top
            case 'top-left':
                return ['justify-start', 'items-start'];
            case 'top-center':
                return ['justify-center', 'items-start'];
            case 'top-right':
                return ['justify-end', 'items-start'];
            // center
            case 'center-left':
                return ['justify-start', 'items-center'];
            case 'center':
                return ['justify-center', 'items-center'];
            case 'center-right':
                return ['justify-end', 'items-center'];
            // bottom
            case 'bottom-left':
                return ['justify-start', 'items-end'];
            case 'bottom-center':
                return ['justify-center', 'items-end'];
            case 'bottom-right':
                return ['justify-end', 'items-end'];
            default:
                return ['justify-center', 'items-center'];
        }
    };
    Modal.prototype.toggle = function () {
        if (this._isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
        // callback function
        this._options.onToggle(this);
    };
    Modal.prototype.show = function () {
        if (this.isHidden) {
            this._targetEl.classList.add('flex');
            this._targetEl.classList.remove('hidden');
            this._targetEl.setAttribute('aria-modal', 'true');
            this._targetEl.setAttribute('role', 'dialog');
            this._targetEl.removeAttribute('aria-hidden');
            this._createBackdrop();
            this._isHidden = false;
            // prevent body scroll
            document.body.classList.add('overflow-hidden');
            // Add keyboard event listener to the document
            if (this._options.closable) {
                this._setupModalCloseEventListeners();
            }
            // callback function
            this._options.onShow(this);
        }
    };
    Modal.prototype.hide = function () {
        if (this.isVisible) {
            this._targetEl.classList.add('hidden');
            this._targetEl.classList.remove('flex');
            this._targetEl.setAttribute('aria-hidden', 'true');
            this._targetEl.removeAttribute('aria-modal');
            this._targetEl.removeAttribute('role');
            this._destroyBackdropEl();
            this._isHidden = true;
            // re-apply body scroll
            document.body.classList.remove('overflow-hidden');
            if (this._options.closable) {
                this._removeModalCloseEventListeners();
            }
            // callback function
            this._options.onHide(this);
        }
    };
    Modal.prototype.isVisible = function () {
        return !this._isHidden;
    };
    Modal.prototype.isHidden = function () {
        return this._isHidden;
    };
    return Modal;
}());
if (typeof window !== 'undefined') {
    window.Modal = Modal;
}
var getModalInstance = function (id, instances) {
    if (instances.some(function (modalInstance) { return modalInstance.id === id; })) {
        return instances.find(function (modalInstance) { return modalInstance.id === id; });
    }
    return null;
};
function initModals() {
    var modalInstances = [];
    // initiate modal based on data-modal-target
    document.querySelectorAll('[data-modal-target]').forEach(function ($triggerEl) {
        var modalId = $triggerEl.getAttribute('data-modal-target');
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var placement = $modalEl.getAttribute('data-modal-placement');
            var backdrop = $modalEl.getAttribute('data-modal-backdrop');
            if (!getModalInstance(modalId, modalInstances)) {
                modalInstances.push({
                    id: modalId,
                    object: new Modal($modalEl, {
                        placement: placement
                            ? placement
                            : Default.placement,
                        backdrop: backdrop ? backdrop : Default.backdrop,
                    }),
                });
            }
        }
        else {
            console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."));
        }
    });
    // support pre v1.6.0 data-modal-toggle initialization
    document.querySelectorAll('[data-modal-toggle]').forEach(function ($triggerEl) {
        var modalId = $triggerEl.getAttribute('data-modal-toggle');
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var placement = $modalEl.getAttribute('data-modal-placement');
            var backdrop = $modalEl.getAttribute('data-modal-backdrop');
            var modal_1 = getModalInstance(modalId, modalInstances);
            if (!modal_1) {
                modal_1 = {
                    id: modalId,
                    object: new Modal($modalEl, {
                        placement: placement
                            ? placement
                            : Default.placement,
                        backdrop: backdrop ? backdrop : Default.backdrop,
                    }),
                };
                modalInstances.push(modal_1);
            }
            $triggerEl.addEventListener('click', function () {
                modal_1.object.toggle();
            });
        }
        else {
            console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"));
        }
    });
    // show modal on click if exists based on id
    document.querySelectorAll('[data-modal-show]').forEach(function ($triggerEl) {
        var modalId = $triggerEl.getAttribute('data-modal-show');
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var modal_2 = getModalInstance(modalId, modalInstances);
            if (modal_2) {
                $triggerEl.addEventListener('click', function () {
                    if (modal_2.object.isHidden) {
                        modal_2.object.show();
                    }
                });
            }
            else {
                console.error("Modal with id ".concat(modalId, " has not been initialized. Please initialize it using the data-modal-target attribute."));
            }
        }
        else {
            console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"));
        }
    });
    // hide modal on click if exists based on id
    document.querySelectorAll('[data-modal-hide]').forEach(function ($triggerEl) {
        var modalId = $triggerEl.getAttribute('data-modal-hide');
        var $modalEl = document.getElementById(modalId);
        if ($modalEl) {
            var modal_3 = getModalInstance(modalId, modalInstances);
            if (modal_3) {
                $triggerEl.addEventListener('click', function () {
                    if (modal_3.object.isVisible) {
                        modal_3.object.hide();
                    }
                });
            }
            else {
                console.error("Modal with id ".concat(modalId, " has not been initialized. Please initialize it using the data-modal-target attribute."));
            }
        }
        else {
            console.error("Modal with id ".concat(modalId, " does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Modal);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/modal/interface.js":
/*!*********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/modal/interface.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/modal/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/modal/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/popover/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/popover/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initPopovers": () => (/* binding */ initPopovers)
/* harmony export */ });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/* eslint-disable @typescript-eslint/no-empty-function */

var Default = {
    placement: 'top',
    offset: 10,
    triggerType: 'hover',
    onShow: function () { },
    onHide: function () { },
    onToggle: function () { },
};
var Popover = /** @class */ (function () {
    function Popover(targetEl, triggerEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (triggerEl === void 0) { triggerEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Popover.prototype._init = function () {
        if (this._triggerEl) {
            this._setupEventListeners();
        }
    };
    Popover.prototype._setupEventListeners = function () {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        triggerEvents.showEvents.forEach(function (ev) {
            _this._triggerEl.addEventListener(ev, function () {
                _this.show();
            });
            _this._targetEl.addEventListener(ev, function () {
                _this.show();
            });
        });
        triggerEvents.hideEvents.forEach(function (ev) {
            _this._triggerEl.addEventListener(ev, function () {
                setTimeout(function () {
                    if (!_this._targetEl.matches(':hover')) {
                        _this.hide();
                    }
                }, 100);
            });
            _this._targetEl.addEventListener(ev, function () {
                setTimeout(function () {
                    if (!_this._triggerEl.matches(':hover')) {
                        _this.hide();
                    }
                }, 100);
            });
        });
    };
    Popover.prototype._createPopperInstance = function () {
        return (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, this._options.offset],
                    },
                },
            ],
        });
    };
    Popover.prototype._getTriggerEvents = function () {
        switch (this._options.triggerType) {
            case 'hover':
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
            case 'click':
                return {
                    showEvents: ['click', 'focus'],
                    hideEvents: ['focusout', 'blur'],
                };
            case 'none':
                return {
                    showEvents: [],
                    hideEvents: [],
                };
            default:
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
        }
    };
    Popover.prototype._setupKeydownListener = function () {
        var _this = this;
        this._keydownEventListener = function (ev) {
            if (ev.key === 'Escape') {
                _this.hide();
            }
        };
        document.body.addEventListener('keydown', this._keydownEventListener, true);
    };
    Popover.prototype._removeKeydownListener = function () {
        document.body.removeEventListener('keydown', this._keydownEventListener, true);
    };
    Popover.prototype._setupClickOutsideListener = function () {
        var _this = this;
        this._clickOutsideEventListener = function (ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener('click', this._clickOutsideEventListener, true);
    };
    Popover.prototype._removeClickOutsideListener = function () {
        document.body.removeEventListener('click', this._clickOutsideEventListener, true);
    };
    Popover.prototype._handleClickOutside = function (ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl &&
            !targetEl.contains(clickedEl) &&
            !this._triggerEl.contains(clickedEl) &&
            this.isVisible()) {
            this.hide();
        }
    };
    Popover.prototype.isVisible = function () {
        return this._visible;
    };
    Popover.prototype.toggle = function () {
        if (this.isVisible()) {
            this.hide();
        }
        else {
            this.show();
        }
        this._options.onToggle(this);
    };
    Popover.prototype.show = function () {
        this._targetEl.classList.remove('opacity-0', 'invisible');
        this._targetEl.classList.add('opacity-100', 'visible');
        // Enable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: true },
            ], false) })); });
        // handle click outside
        this._setupClickOutsideListener();
        // handle esc keydown
        this._setupKeydownListener();
        // Update its position
        this._popperInstance.update();
        // set visibility to true
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Popover.prototype.hide = function () {
        this._targetEl.classList.remove('opacity-100', 'visible');
        this._targetEl.classList.add('opacity-0', 'invisible');
        // Disable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: false },
            ], false) })); });
        // handle click outside
        this._removeClickOutsideListener();
        // handle esc keydown
        this._removeKeydownListener();
        // set visibility to false
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    return Popover;
}());
if (typeof window !== 'undefined') {
    window.Popover = Popover;
}
function initPopovers() {
    document.querySelectorAll('[data-popover-target]').forEach(function ($triggerEl) {
        var popoverID = $triggerEl.getAttribute('data-popover-target');
        var $popoverEl = document.getElementById(popoverID);
        if ($popoverEl) {
            var triggerType = $triggerEl.getAttribute('data-popover-trigger');
            var placement = $triggerEl.getAttribute('data-popover-placement');
            var offset = $triggerEl.getAttribute('data-popover-offset');
            new Popover($popoverEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                offset: offset ? parseInt(offset) : Default.offset,
                triggerType: triggerType
                    ? triggerType
                    : Default.triggerType,
            });
        }
        else {
            console.error("The popover element with id \"".concat(popoverID, "\" does not exist. Please check the data-popover-target attribute."));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popover);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/popover/interface.js":
/*!***********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/popover/interface.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/popover/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/popover/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tabs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tabs/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initTabs": () => (/* binding */ initTabs)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Default = {
    defaultTabId: null,
    activeClasses: 'text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500',
    inactiveClasses: 'dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300',
    onShow: function () { },
};
var Tabs = /** @class */ (function () {
    function Tabs(items, options) {
        if (items === void 0) { items = []; }
        if (options === void 0) { options = Default; }
        this._items = items;
        this._activeTab = options ? this.getTab(options.defaultTabId) : null;
        this._options = __assign(__assign({}, Default), options);
        this._init();
    }
    Tabs.prototype._init = function () {
        var _this = this;
        if (this._items.length) {
            // set the first tab as active if not set by explicitly
            if (!this._activeTab) {
                this._setActiveTab(this._items[0]);
            }
            // force show the first default tab
            this.show(this._activeTab.id, true);
            // show tab content based on click
            this._items.map(function (tab) {
                tab.triggerEl.addEventListener('click', function () {
                    _this.show(tab.id);
                });
            });
        }
    };
    Tabs.prototype.getActiveTab = function () {
        return this._activeTab;
    };
    Tabs.prototype._setActiveTab = function (tab) {
        this._activeTab = tab;
    };
    Tabs.prototype.getTab = function (id) {
        return this._items.filter(function (t) { return t.id === id; })[0];
    };
    Tabs.prototype.show = function (id, forceShow) {
        var _a, _b;
        var _this = this;
        if (forceShow === void 0) { forceShow = false; }
        var tab = this.getTab(id);
        // don't do anything if already active
        if (tab === this._activeTab && !forceShow) {
            return;
        }
        // hide other tabs
        this._items.map(function (t) {
            var _a, _b;
            if (t !== tab) {
                (_a = t.triggerEl.classList).remove.apply(_a, _this._options.activeClasses.split(' '));
                (_b = t.triggerEl.classList).add.apply(_b, _this._options.inactiveClasses.split(' '));
                t.targetEl.classList.add('hidden');
                t.triggerEl.setAttribute('aria-selected', 'false');
            }
        });
        // show active tab
        (_a = tab.triggerEl.classList).add.apply(_a, this._options.activeClasses.split(' '));
        (_b = tab.triggerEl.classList).remove.apply(_b, this._options.inactiveClasses.split(' '));
        tab.triggerEl.setAttribute('aria-selected', 'true');
        tab.targetEl.classList.remove('hidden');
        this._setActiveTab(tab);
        // callback function
        this._options.onShow(this, tab);
    };
    return Tabs;
}());
if (typeof window !== 'undefined') {
    window.Tabs = Tabs;
}
function initTabs() {
    document.querySelectorAll('[data-tabs-toggle]').forEach(function ($triggerEl) {
        var tabItems = [];
        var defaultTabId = null;
        $triggerEl
            .querySelectorAll('[role="tab"]')
            .forEach(function ($triggerEl) {
            var isActive = $triggerEl.getAttribute('aria-selected') === 'true';
            var tab = {
                id: $triggerEl.getAttribute('data-tabs-target'),
                triggerEl: $triggerEl,
                targetEl: document.querySelector($triggerEl.getAttribute('data-tabs-target')),
            };
            tabItems.push(tab);
            if (isActive) {
                defaultTabId = tab.id;
            }
        });
        new Tabs(tabItems, {
            defaultTabId: defaultTabId,
        });
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Tabs);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tabs/interface.js":
/*!********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tabs/interface.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tabs/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tabs/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tooltip/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tooltip/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "initTooltips": () => (/* binding */ initTooltips)
/* harmony export */ });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/* eslint-disable @typescript-eslint/no-empty-function */

var Default = {
    placement: 'top',
    triggerType: 'hover',
    onShow: function () { },
    onHide: function () { },
    onToggle: function () { },
};
var Tooltip = /** @class */ (function () {
    function Tooltip(targetEl, triggerEl, options) {
        if (targetEl === void 0) { targetEl = null; }
        if (triggerEl === void 0) { triggerEl = null; }
        if (options === void 0) { options = Default; }
        this._targetEl = targetEl;
        this._triggerEl = triggerEl;
        this._options = __assign(__assign({}, Default), options);
        this._popperInstance = this._createPopperInstance();
        this._visible = false;
        this._init();
    }
    Tooltip.prototype._init = function () {
        if (this._triggerEl) {
            this._setupEventListeners();
        }
    };
    Tooltip.prototype._setupEventListeners = function () {
        var _this = this;
        var triggerEvents = this._getTriggerEvents();
        triggerEvents.showEvents.forEach(function (ev) {
            _this._triggerEl.addEventListener(ev, function () {
                _this.show();
            });
        });
        triggerEvents.hideEvents.forEach(function (ev) {
            _this._triggerEl.addEventListener(ev, function () {
                _this.hide();
            });
        });
    };
    Tooltip.prototype._createPopperInstance = function () {
        return (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(this._triggerEl, this._targetEl, {
            placement: this._options.placement,
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 8],
                    },
                },
            ],
        });
    };
    Tooltip.prototype._getTriggerEvents = function () {
        switch (this._options.triggerType) {
            case 'hover':
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
            case 'click':
                return {
                    showEvents: ['click', 'focus'],
                    hideEvents: ['focusout', 'blur'],
                };
            case 'none':
                return {
                    showEvents: [],
                    hideEvents: [],
                };
            default:
                return {
                    showEvents: ['mouseenter', 'focus'],
                    hideEvents: ['mouseleave', 'blur'],
                };
        }
    };
    Tooltip.prototype._setupKeydownListener = function () {
        var _this = this;
        this._keydownEventListener = function (ev) {
            if (ev.key === 'Escape') {
                _this.hide();
            }
        };
        document.body.addEventListener('keydown', this._keydownEventListener, true);
    };
    Tooltip.prototype._removeKeydownListener = function () {
        document.body.removeEventListener('keydown', this._keydownEventListener, true);
    };
    Tooltip.prototype._setupClickOutsideListener = function () {
        var _this = this;
        this._clickOutsideEventListener = function (ev) {
            _this._handleClickOutside(ev, _this._targetEl);
        };
        document.body.addEventListener('click', this._clickOutsideEventListener, true);
    };
    Tooltip.prototype._removeClickOutsideListener = function () {
        document.body.removeEventListener('click', this._clickOutsideEventListener, true);
    };
    Tooltip.prototype._handleClickOutside = function (ev, targetEl) {
        var clickedEl = ev.target;
        if (clickedEl !== targetEl &&
            !targetEl.contains(clickedEl) &&
            !this._triggerEl.contains(clickedEl) &&
            this.isVisible()) {
            this.hide();
        }
    };
    Tooltip.prototype.isVisible = function () {
        return this._visible;
    };
    Tooltip.prototype.toggle = function () {
        if (this.isVisible()) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    Tooltip.prototype.show = function () {
        this._targetEl.classList.remove('opacity-0', 'invisible');
        this._targetEl.classList.add('opacity-100', 'visible');
        // Enable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: true },
            ], false) })); });
        // handle click outside
        this._setupClickOutsideListener();
        // handle esc keydown
        this._setupKeydownListener();
        // Update its position
        this._popperInstance.update();
        // set visibility
        this._visible = true;
        // callback function
        this._options.onShow(this);
    };
    Tooltip.prototype.hide = function () {
        this._targetEl.classList.remove('opacity-100', 'visible');
        this._targetEl.classList.add('opacity-0', 'invisible');
        // Disable the event listeners
        this._popperInstance.setOptions(function (options) { return (__assign(__assign({}, options), { modifiers: __spreadArray(__spreadArray([], options.modifiers, true), [
                { name: 'eventListeners', enabled: false },
            ], false) })); });
        // handle click outside
        this._removeClickOutsideListener();
        // handle esc keydown
        this._removeKeydownListener();
        // set visibility
        this._visible = false;
        // callback function
        this._options.onHide(this);
    };
    return Tooltip;
}());
if (typeof window !== 'undefined') {
    window.Tooltip = Tooltip;
}
function initTooltips() {
    document.querySelectorAll('[data-tooltip-target]').forEach(function ($triggerEl) {
        var tooltipId = $triggerEl.getAttribute('data-tooltip-target');
        var $tooltipEl = document.getElementById(tooltipId);
        if ($tooltipEl) {
            var triggerType = $triggerEl.getAttribute('data-tooltip-trigger');
            var placement = $triggerEl.getAttribute('data-tooltip-placement');
            new Tooltip($tooltipEl, $triggerEl, {
                placement: placement ? placement : Default.placement,
                triggerType: triggerType
                    ? triggerType
                    : Default.triggerType,
            });
        }
        else {
            console.error("The tooltip element with id \"".concat(tooltipId, "\" does not exist. Please check the data-tooltip-target attribute."));
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Tooltip);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tooltip/interface.js":
/*!***********************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tooltip/interface.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=interface.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/components/tooltip/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/components/tooltip/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/dom/events.js":
/*!*****************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/dom/events.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Events = /** @class */ (function () {
    function Events(eventType, eventFunctions) {
        if (eventFunctions === void 0) { eventFunctions = []; }
        this._eventType = eventType;
        this._eventFunctions = eventFunctions;
    }
    Events.prototype.init = function () {
        var _this = this;
        this._eventFunctions.forEach(function (eventFunction) {
            if (typeof window !== 'undefined') {
                window.addEventListener(_this._eventType, eventFunction);
            }
        });
    };
    return Events;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/flowbite/lib/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/flowbite/lib/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Accordion": () => (/* reexport safe */ _components_accordion__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "Carousel": () => (/* reexport safe */ _components_carousel__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "Collapse": () => (/* reexport safe */ _components_collapse__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "Dial": () => (/* reexport safe */ _components_dial__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   "Dismiss": () => (/* reexport safe */ _components_dismiss__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "Drawer": () => (/* reexport safe */ _components_drawer__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "Dropdown": () => (/* reexport safe */ _components_dropdown__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "Modal": () => (/* reexport safe */ _components_modal__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "Popover": () => (/* reexport safe */ _components_popover__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "Tabs": () => (/* reexport safe */ _components_tabs__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "Tooltip": () => (/* reexport safe */ _components_tooltip__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "initAccordions": () => (/* reexport safe */ _components_accordion__WEBPACK_IMPORTED_MODULE_1__.initAccordions),
/* harmony export */   "initCarousels": () => (/* reexport safe */ _components_carousel__WEBPACK_IMPORTED_MODULE_3__.initCarousels),
/* harmony export */   "initCollapses": () => (/* reexport safe */ _components_collapse__WEBPACK_IMPORTED_MODULE_2__.initCollapses),
/* harmony export */   "initDials": () => (/* reexport safe */ _components_dial__WEBPACK_IMPORTED_MODULE_11__.initDials),
/* harmony export */   "initDismisses": () => (/* reexport safe */ _components_dismiss__WEBPACK_IMPORTED_MODULE_4__.initDismisses),
/* harmony export */   "initDrawers": () => (/* reexport safe */ _components_drawer__WEBPACK_IMPORTED_MODULE_7__.initDrawers),
/* harmony export */   "initDropdowns": () => (/* reexport safe */ _components_dropdown__WEBPACK_IMPORTED_MODULE_5__.initDropdowns),
/* harmony export */   "initFlowbite": () => (/* reexport safe */ _components_index__WEBPACK_IMPORTED_MODULE_34__.initFlowbite),
/* harmony export */   "initModals": () => (/* reexport safe */ _components_modal__WEBPACK_IMPORTED_MODULE_6__.initModals),
/* harmony export */   "initPopovers": () => (/* reexport safe */ _components_popover__WEBPACK_IMPORTED_MODULE_10__.initPopovers),
/* harmony export */   "initTabs": () => (/* reexport safe */ _components_tabs__WEBPACK_IMPORTED_MODULE_8__.initTabs),
/* harmony export */   "initTooltips": () => (/* reexport safe */ _components_tooltip__WEBPACK_IMPORTED_MODULE_9__.initTooltips)
/* harmony export */ });
/* harmony import */ var _dom_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom/events */ "./node_modules/flowbite/lib/esm/dom/events.js");
/* harmony import */ var _components_accordion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/accordion */ "./node_modules/flowbite/lib/esm/components/accordion/index.js");
/* harmony import */ var _components_collapse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/collapse */ "./node_modules/flowbite/lib/esm/components/collapse/index.js");
/* harmony import */ var _components_carousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/carousel */ "./node_modules/flowbite/lib/esm/components/carousel/index.js");
/* harmony import */ var _components_dismiss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/dismiss */ "./node_modules/flowbite/lib/esm/components/dismiss/index.js");
/* harmony import */ var _components_dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/dropdown */ "./node_modules/flowbite/lib/esm/components/dropdown/index.js");
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/modal */ "./node_modules/flowbite/lib/esm/components/modal/index.js");
/* harmony import */ var _components_drawer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/drawer */ "./node_modules/flowbite/lib/esm/components/drawer/index.js");
/* harmony import */ var _components_tabs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/tabs */ "./node_modules/flowbite/lib/esm/components/tabs/index.js");
/* harmony import */ var _components_tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/tooltip */ "./node_modules/flowbite/lib/esm/components/tooltip/index.js");
/* harmony import */ var _components_popover__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/popover */ "./node_modules/flowbite/lib/esm/components/popover/index.js");
/* harmony import */ var _components_dial__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/dial */ "./node_modules/flowbite/lib/esm/components/dial/index.js");
/* harmony import */ var _components_accordion_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/accordion/types */ "./node_modules/flowbite/lib/esm/components/accordion/types.js");
/* harmony import */ var _components_carousel_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/carousel/types */ "./node_modules/flowbite/lib/esm/components/carousel/types.js");
/* harmony import */ var _components_collapse_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/collapse/types */ "./node_modules/flowbite/lib/esm/components/collapse/types.js");
/* harmony import */ var _components_dial_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/dial/types */ "./node_modules/flowbite/lib/esm/components/dial/types.js");
/* harmony import */ var _components_dismiss_types__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/dismiss/types */ "./node_modules/flowbite/lib/esm/components/dismiss/types.js");
/* harmony import */ var _components_drawer_types__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/drawer/types */ "./node_modules/flowbite/lib/esm/components/drawer/types.js");
/* harmony import */ var _components_dropdown_types__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/dropdown/types */ "./node_modules/flowbite/lib/esm/components/dropdown/types.js");
/* harmony import */ var _components_modal_types__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/modal/types */ "./node_modules/flowbite/lib/esm/components/modal/types.js");
/* harmony import */ var _components_popover_types__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/popover/types */ "./node_modules/flowbite/lib/esm/components/popover/types.js");
/* harmony import */ var _components_tabs_types__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/tabs/types */ "./node_modules/flowbite/lib/esm/components/tabs/types.js");
/* harmony import */ var _components_tooltip_types__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/tooltip/types */ "./node_modules/flowbite/lib/esm/components/tooltip/types.js");
/* harmony import */ var _components_accordion_interface__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/accordion/interface */ "./node_modules/flowbite/lib/esm/components/accordion/interface.js");
/* harmony import */ var _components_carousel_interface__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/carousel/interface */ "./node_modules/flowbite/lib/esm/components/carousel/interface.js");
/* harmony import */ var _components_collapse_interface__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/collapse/interface */ "./node_modules/flowbite/lib/esm/components/collapse/interface.js");
/* harmony import */ var _components_dial_interface__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/dial/interface */ "./node_modules/flowbite/lib/esm/components/dial/interface.js");
/* harmony import */ var _components_dismiss_interface__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/dismiss/interface */ "./node_modules/flowbite/lib/esm/components/dismiss/interface.js");
/* harmony import */ var _components_drawer_interface__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/drawer/interface */ "./node_modules/flowbite/lib/esm/components/drawer/interface.js");
/* harmony import */ var _components_dropdown_interface__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/dropdown/interface */ "./node_modules/flowbite/lib/esm/components/dropdown/interface.js");
/* harmony import */ var _components_modal_interface__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/modal/interface */ "./node_modules/flowbite/lib/esm/components/modal/interface.js");
/* harmony import */ var _components_popover_interface__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./components/popover/interface */ "./node_modules/flowbite/lib/esm/components/popover/interface.js");
/* harmony import */ var _components_tabs_interface__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/tabs/interface */ "./node_modules/flowbite/lib/esm/components/tabs/interface.js");
/* harmony import */ var _components_tooltip_interface__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./components/tooltip/interface */ "./node_modules/flowbite/lib/esm/components/tooltip/interface.js");
/* harmony import */ var _components_index__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./components/index */ "./node_modules/flowbite/lib/esm/components/index.js");












// setup events for data attributes
var events = new _dom_events__WEBPACK_IMPORTED_MODULE_0__["default"]('load', [
    _components_accordion__WEBPACK_IMPORTED_MODULE_1__.initAccordions,
    _components_collapse__WEBPACK_IMPORTED_MODULE_2__.initCollapses,
    _components_carousel__WEBPACK_IMPORTED_MODULE_3__.initCarousels,
    _components_dismiss__WEBPACK_IMPORTED_MODULE_4__.initDismisses,
    _components_dropdown__WEBPACK_IMPORTED_MODULE_5__.initDropdowns,
    _components_modal__WEBPACK_IMPORTED_MODULE_6__.initModals,
    _components_drawer__WEBPACK_IMPORTED_MODULE_7__.initDrawers,
    _components_tabs__WEBPACK_IMPORTED_MODULE_8__.initTabs,
    _components_tooltip__WEBPACK_IMPORTED_MODULE_9__.initTooltips,
    _components_popover__WEBPACK_IMPORTED_MODULE_10__.initPopovers,
    _components_dial__WEBPACK_IMPORTED_MODULE_11__.initDials,
]);
events.init();
// export all components











// export all types











// export all interfaces











// export init functions











// export all init functions

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/books.ts":
/*!**********************!*\
  !*** ./src/books.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initBooks = void 0;
var flowbite_1 = __webpack_require__(/*! flowbite */ "./node_modules/flowbite/lib/esm/index.js");
// // For your js code
var $addUserModalElement = document.querySelector('#add-book-modal');
var modalOptions = {
    placement: 'bottom-right',
    closable: true,
    onHide: function () {
        console.log('modal is hidden');
    },
    onShow: function () {
        console.log('user id: ');
    },
    onToggle: function () {
        console.log('modal has been toggled');
    },
};
var addModal = new flowbite_1.Modal($addUserModalElement, modalOptions);
function initBooks() {
    // closing add book modal
    var addModalCloseBtn = document.querySelector('#modalAddCloseButton');
    if (addModalCloseBtn) {
        addModalCloseBtn.addEventListener('click', function () {
            addModal.hide();
        });
    }
}
exports.initBooks = initBooks;


/***/ }),

/***/ "./src/contributors.ts":
/*!*****************************!*\
  !*** ./src/contributors.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initContributors = void 0;
var searchAndShowResults = function (userSearchbar, searchResultsTbody, trExample, userIdInput) { return __awaiter(void 0, void 0, void 0, function () {
    var bookId, searchQuery, urlParams, res, json;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                searchResultsTbody.innerHTML = '';
                bookId = userSearchbar.getAttribute('data-book-id');
                searchQuery = userSearchbar.value;
                if (!searchQuery.length) {
                    return [2 /*return*/];
                }
                urlParams = new URLSearchParams({
                    q: searchQuery,
                    book_id: bookId,
                });
                return [4 /*yield*/, fetch('/user/search?' + urlParams)];
            case 1:
                res = _a.sent();
                return [4 /*yield*/, res.json()];
            case 2:
                json = _a.sent();
                json.users.forEach(function (user) {
                    var clone = trExample.cloneNode(true);
                    var selectUserBtn = clone.querySelector('.select-user-btn');
                    selectUserBtn.setAttribute('data-user-id', user.id);
                    selectUserBtn.addEventListener('click', function (e) {
                        var allSelectBtns = document.querySelectorAll('.select-user-btn');
                        allSelectBtns.forEach(function (btn) {
                            btn.innerHTML = 'Select';
                        });
                        var userId = e.target.getAttribute('data-user-id');
                        userIdInput.value = userId;
                        selectUserBtn.innerHTML = 'Selected';
                    });
                    var usernameTh = clone.querySelector('.username-th');
                    usernameTh.innerHTML = user.username;
                    clone.classList.remove('hidden');
                    searchResultsTbody.appendChild(clone);
                });
                return [2 /*return*/, undefined];
        }
    });
}); };
function initContributors() {
    var _this = this;
    var searchBtn = document.querySelector('#search-btn');
    var userSearchbar = document.querySelector('#username');
    var userIdInput = document.querySelector('#user_id');
    if (!searchBtn && !userSearchbar && !userIdInput) {
        return;
    }
    var searchResultsTbody = document.querySelector('#search-results-tbody');
    var trExample = document.querySelector('#tr-example');
    searchBtn.addEventListener('click', function (e) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    e.preventDefault();
                    userIdInput.value = '';
                    return [4 /*yield*/, searchAndShowResults(userSearchbar, searchResultsTbody, trExample, userIdInput)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.initContributors = initContributors;


/***/ }),

/***/ "./src/initQuill.ts":
/*!**************************!*\
  !*** ./src/initQuill.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initQuill = void 0;
var Quill = __webpack_require__(/*! ./quill */ "./src/quill.js");
function initQuill() {
    var toolbarOptions = [
        ['bold', 'italic', 'underline'],
        [{ list: 'ordered' }, { list: 'bullet' }],
        [{ header: [1, 2, 3, 4, 5, 6, false] }],
        [{ indent: '-1' }, { indent: '+1' }],
        ['clean'],
    ];
    var editorElement = document.querySelector('#editor');
    if (editorElement) {
        var quill = new Quill('#editor', {
            theme: 'snow',
            modules: {
                toolbar: toolbarOptions,
            },
        });
    }
}
exports.initQuill = initQuill;


/***/ }),

/***/ "./src/quill_value_to_textarea.ts":
/*!****************************************!*\
  !*** ./src/quill_value_to_textarea.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initQuillValueToTextArea = void 0;
var quill_value_to_textarea = function () {
    var aboutInput = document.querySelector('#about');
    var qlEditor = document.querySelector('.ql-editor');
    var editorContent = qlEditor.innerHTML;
    aboutInput.value = editorContent;
    return undefined;
};
function initQuillValueToTextArea() {
    var _this = this;
    var qlEditor = document.querySelector('.ql-editor');
    if (!qlEditor) {
        return;
    }
    qlEditor.addEventListener('DOMSubtreeModified', function (e) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            quill_value_to_textarea();
            return [2 /*return*/];
        });
    }); });
}
exports.initQuillValueToTextArea = initQuillValueToTextArea;


/***/ }),

/***/ "./src/quill.js":
/*!**********************!*\
  !*** ./src/quill.js ***!
  \**********************/
/***/ (function(module) {

/*!
 * Quill Editor v1.3.6
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (true)
    module.exports = factory();
  else {}
})(typeof self !== 'undefined' ? self : this, function () {
  return /******/ (function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {};
    /******/
    /******/ // The require function
    /******/ function __nested_webpack_require_724__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) {
        /******/ return installedModules[moduleId].exports;
        /******/
      }
      /******/ // Create a new module (and put it into the cache)
      /******/ var module = (installedModules[moduleId] = {
        /******/ i: moduleId,
        /******/ l: false,
        /******/ exports: {},
        /******/
      });
      /******/
      /******/ // Execute the module function
      /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __nested_webpack_require_724__,
      );
      /******/
      /******/ // Flag the module as loaded
      /******/ module.l = true;
      /******/
      /******/ // Return the exports of the module
      /******/ return module.exports;
      /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/ __nested_webpack_require_724__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/ __nested_webpack_require_724__.c = installedModules;
    /******/
    /******/ // define getter function for harmony exports
    /******/ __nested_webpack_require_724__.d = function (exports, name, getter) {
      /******/ if (!__nested_webpack_require_724__.o(exports, name)) {
        /******/ Object.defineProperty(exports, name, {
          /******/ configurable: false,
          /******/ enumerable: true,
          /******/ get: getter,
          /******/
        });
        /******/
      }
      /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __nested_webpack_require_724__.n = function (module) {
      /******/ var getter =
        module && module.__esModule
          ? /******/ function getDefault() {
              return module['default'];
            }
          : /******/ function getModuleExports() {
              return module;
            };
      /******/ __nested_webpack_require_724__.d(getter, 'a', getter);
      /******/ return getter;
      /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/ __nested_webpack_require_724__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/ __nested_webpack_require_724__.p = '';
    /******/
    /******/ // Load entry module and return exports
    /******/ return __nested_webpack_require_724__((__nested_webpack_require_724__.s = 109));
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function (module, exports, __nested_webpack_require_3440__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {value: true});
        var container_1 = __nested_webpack_require_3440__(17);
        var format_1 = __nested_webpack_require_3440__(18);
        var leaf_1 = __nested_webpack_require_3440__(19);
        var scroll_1 = __nested_webpack_require_3440__(45);
        var inline_1 = __nested_webpack_require_3440__(46);
        var block_1 = __nested_webpack_require_3440__(47);
        var embed_1 = __nested_webpack_require_3440__(48);
        var text_1 = __nested_webpack_require_3440__(49);
        var attributor_1 = __nested_webpack_require_3440__(12);
        var class_1 = __nested_webpack_require_3440__(32);
        var style_1 = __nested_webpack_require_3440__(33);
        var store_1 = __nested_webpack_require_3440__(31);
        var Registry = __nested_webpack_require_3440__(1);
        var Parchment = {
          Scope: Registry.Scope,
          create: Registry.create,
          find: Registry.find,
          query: Registry.query,
          register: Registry.register,
          Container: container_1.default,
          Format: format_1.default,
          Leaf: leaf_1.default,
          Embed: embed_1.default,
          Scroll: scroll_1.default,
          Block: block_1.default,
          Inline: inline_1.default,
          Text: text_1.default,
          Attributor: {
            Attribute: attributor_1.default,
            Class: class_1.default,
            Style: style_1.default,
            Store: store_1.default,
          },
        };
        exports.default = Parchment;

        /***/
      },
      /* 1 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var ParchmentError = /** @class */ (function (_super) {
          __extends(ParchmentError, _super);
          function ParchmentError(message) {
            var _this = this;
            message = '[Parchment] ' + message;
            _this = _super.call(this, message) || this;
            _this.message = message;
            _this.name = _this.constructor.name;
            return _this;
          }
          return ParchmentError;
        })(Error);
        exports.ParchmentError = ParchmentError;
        var attributes = {};
        var classes = {};
        var tags = {};
        var types = {};
        exports.DATA_KEY = '__blot';
        var Scope;
        (function (Scope) {
          Scope[(Scope['TYPE'] = 3)] = 'TYPE';
          Scope[(Scope['LEVEL'] = 12)] = 'LEVEL';
          Scope[(Scope['ATTRIBUTE'] = 13)] = 'ATTRIBUTE';
          Scope[(Scope['BLOT'] = 14)] = 'BLOT';
          Scope[(Scope['INLINE'] = 7)] = 'INLINE';
          Scope[(Scope['BLOCK'] = 11)] = 'BLOCK';
          Scope[(Scope['BLOCK_BLOT'] = 10)] = 'BLOCK_BLOT';
          Scope[(Scope['INLINE_BLOT'] = 6)] = 'INLINE_BLOT';
          Scope[(Scope['BLOCK_ATTRIBUTE'] = 9)] = 'BLOCK_ATTRIBUTE';
          Scope[(Scope['INLINE_ATTRIBUTE'] = 5)] = 'INLINE_ATTRIBUTE';
          Scope[(Scope['ANY'] = 15)] = 'ANY';
        })((Scope = exports.Scope || (exports.Scope = {})));
        function create(input, value) {
          var match = query(input);
          if (match == null) {
            throw new ParchmentError('Unable to create ' + input + ' blot');
          }
          var BlotClass = match;
          var node =
            // @ts-ignore
            input instanceof Node || input['nodeType'] === Node.TEXT_NODE
              ? input
              : BlotClass.create(value);
          return new BlotClass(node, value);
        }
        exports.create = create;
        function find(node, bubble) {
          if (bubble === void 0) {
            bubble = false;
          }
          if (node == null) return null;
          // @ts-ignore
          if (node[exports.DATA_KEY] != null)
            return node[exports.DATA_KEY].blot;
          if (bubble) return find(node.parentNode, bubble);
          return null;
        }
        exports.find = find;
        function query(query, scope) {
          if (scope === void 0) {
            scope = Scope.ANY;
          }
          var match;
          if (typeof query === 'string') {
            match = types[query] || attributes[query];
            // @ts-ignore
          } else if (
            query instanceof Text ||
            query['nodeType'] === Node.TEXT_NODE
          ) {
            match = types['text'];
          } else if (typeof query === 'number') {
            if (query & Scope.LEVEL & Scope.BLOCK) {
              match = types['block'];
            } else if (query & Scope.LEVEL & Scope.INLINE) {
              match = types['inline'];
            }
          } else if (query instanceof HTMLElement) {
            var names = (query.getAttribute('class') || '').split(/\s+/);
            for (var i in names) {
              match = classes[names[i]];
              if (match) break;
            }
            match = match || tags[query.tagName];
          }
          if (match == null) return null;
          // @ts-ignore
          if (
            scope & Scope.LEVEL & match.scope &&
            scope & Scope.TYPE & match.scope
          )
            return match;
          return null;
        }
        exports.query = query;
        function register() {
          var Definitions = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            Definitions[_i] = arguments[_i];
          }
          if (Definitions.length > 1) {
            return Definitions.map(function (d) {
              return register(d);
            });
          }
          var Definition = Definitions[0];
          if (
            typeof Definition.blotName !== 'string' &&
            typeof Definition.attrName !== 'string'
          ) {
            throw new ParchmentError('Invalid definition');
          } else if (Definition.blotName === 'abstract') {
            throw new ParchmentError('Cannot register abstract class');
          }
          types[Definition.blotName || Definition.attrName] = Definition;
          if (typeof Definition.keyName === 'string') {
            attributes[Definition.keyName] = Definition;
          } else {
            if (Definition.className != null) {
              classes[Definition.className] = Definition;
            }
            if (Definition.tagName != null) {
              if (Array.isArray(Definition.tagName)) {
                Definition.tagName = Definition.tagName.map(function (tagName) {
                  return tagName.toUpperCase();
                });
              } else {
                Definition.tagName = Definition.tagName.toUpperCase();
              }
              var tagNames = Array.isArray(Definition.tagName)
                ? Definition.tagName
                : [Definition.tagName];
              tagNames.forEach(function (tag) {
                if (tags[tag] == null || Definition.className == null) {
                  tags[tag] = Definition;
                }
              });
            }
          }
          return Definition;
        }
        exports.register = register;

        /***/
      },
      /* 2 */
      /***/ function (module, exports, __nested_webpack_require_11288__) {
        var diff = __nested_webpack_require_11288__(51);
        var equal = __nested_webpack_require_11288__(11);
        var extend = __nested_webpack_require_11288__(3);
        var op = __nested_webpack_require_11288__(20);

        var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()

        var Delta = function (ops) {
          // Assume we are given a well formed ops
          if (Array.isArray(ops)) {
            this.ops = ops;
          } else if (ops != null && Array.isArray(ops.ops)) {
            this.ops = ops.ops;
          } else {
            this.ops = [];
          }
        };

        Delta.prototype.insert = function (text, attributes) {
          var newOp = {};
          if (text.length === 0) return this;
          newOp.insert = text;
          if (
            attributes != null &&
            typeof attributes === 'object' &&
            Object.keys(attributes).length > 0
          ) {
            newOp.attributes = attributes;
          }
          return this.push(newOp);
        };

        Delta.prototype['delete'] = function (length) {
          if (length <= 0) return this;
          return this.push({delete: length});
        };

        Delta.prototype.retain = function (length, attributes) {
          if (length <= 0) return this;
          var newOp = {retain: length};
          if (
            attributes != null &&
            typeof attributes === 'object' &&
            Object.keys(attributes).length > 0
          ) {
            newOp.attributes = attributes;
          }
          return this.push(newOp);
        };

        Delta.prototype.push = function (newOp) {
          var index = this.ops.length;
          var lastOp = this.ops[index - 1];
          newOp = extend(true, {}, newOp);
          if (typeof lastOp === 'object') {
            if (
              typeof newOp['delete'] === 'number' &&
              typeof lastOp['delete'] === 'number'
            ) {
              this.ops[index - 1] = {
                delete: lastOp['delete'] + newOp['delete'],
              };
              return this;
            }
            // Since it does not matter if we insert before or after deleting at the same index,
            // always prefer to insert first
            if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
              index -= 1;
              lastOp = this.ops[index - 1];
              if (typeof lastOp !== 'object') {
                this.ops.unshift(newOp);
                return this;
              }
            }
            if (equal(newOp.attributes, lastOp.attributes)) {
              if (
                typeof newOp.insert === 'string' &&
                typeof lastOp.insert === 'string'
              ) {
                this.ops[index - 1] = {insert: lastOp.insert + newOp.insert};
                if (typeof newOp.attributes === 'object')
                  this.ops[index - 1].attributes = newOp.attributes;
                return this;
              } else if (
                typeof newOp.retain === 'number' &&
                typeof lastOp.retain === 'number'
              ) {
                this.ops[index - 1] = {retain: lastOp.retain + newOp.retain};
                if (typeof newOp.attributes === 'object')
                  this.ops[index - 1].attributes = newOp.attributes;
                return this;
              }
            }
          }
          if (index === this.ops.length) {
            this.ops.push(newOp);
          } else {
            this.ops.splice(index, 0, newOp);
          }
          return this;
        };

        Delta.prototype.chop = function () {
          var lastOp = this.ops[this.ops.length - 1];
          if (lastOp && lastOp.retain && !lastOp.attributes) {
            this.ops.pop();
          }
          return this;
        };

        Delta.prototype.filter = function (predicate) {
          return this.ops.filter(predicate);
        };

        Delta.prototype.forEach = function (predicate) {
          this.ops.forEach(predicate);
        };

        Delta.prototype.map = function (predicate) {
          return this.ops.map(predicate);
        };

        Delta.prototype.partition = function (predicate) {
          var passed = [],
            failed = [];
          this.forEach(function (op) {
            var target = predicate(op) ? passed : failed;
            target.push(op);
          });
          return [passed, failed];
        };

        Delta.prototype.reduce = function (predicate, initial) {
          return this.ops.reduce(predicate, initial);
        };

        Delta.prototype.changeLength = function () {
          return this.reduce(function (length, elem) {
            if (elem.insert) {
              return length + op.length(elem);
            } else if (elem.delete) {
              return length - elem.delete;
            }
            return length;
          }, 0);
        };

        Delta.prototype.length = function () {
          return this.reduce(function (length, elem) {
            return length + op.length(elem);
          }, 0);
        };

        Delta.prototype.slice = function (start, end) {
          start = start || 0;
          if (typeof end !== 'number') end = Infinity;
          var ops = [];
          var iter = op.iterator(this.ops);
          var index = 0;
          while (index < end && iter.hasNext()) {
            var nextOp;
            if (index < start) {
              nextOp = iter.next(start - index);
            } else {
              nextOp = iter.next(end - index);
              ops.push(nextOp);
            }
            index += op.length(nextOp);
          }
          return new Delta(ops);
        };

        Delta.prototype.compose = function (other) {
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          var delta = new Delta();
          while (thisIter.hasNext() || otherIter.hasNext()) {
            if (otherIter.peekType() === 'insert') {
              delta.push(otherIter.next());
            } else if (thisIter.peekType() === 'delete') {
              delta.push(thisIter.next());
            } else {
              var length = Math.min(
                thisIter.peekLength(),
                otherIter.peekLength(),
              );
              var thisOp = thisIter.next(length);
              var otherOp = otherIter.next(length);
              if (typeof otherOp.retain === 'number') {
                var newOp = {};
                if (typeof thisOp.retain === 'number') {
                  newOp.retain = length;
                } else {
                  newOp.insert = thisOp.insert;
                }
                // Preserve null when composing with a retain, otherwise remove it for inserts
                var attributes = op.attributes.compose(
                  thisOp.attributes,
                  otherOp.attributes,
                  typeof thisOp.retain === 'number',
                );
                if (attributes) newOp.attributes = attributes;
                delta.push(newOp);
                // Other op should be delete, we could be an insert or retain
                // Insert + delete cancels out
              } else if (
                typeof otherOp['delete'] === 'number' &&
                typeof thisOp.retain === 'number'
              ) {
                delta.push(otherOp);
              }
            }
          }
          return delta.chop();
        };

        Delta.prototype.concat = function (other) {
          var delta = new Delta(this.ops.slice());
          if (other.ops.length > 0) {
            delta.push(other.ops[0]);
            delta.ops = delta.ops.concat(other.ops.slice(1));
          }
          return delta;
        };

        Delta.prototype.diff = function (other, index) {
          if (this.ops === other.ops) {
            return new Delta();
          }
          var strings = [this, other].map(function (delta) {
            return delta
              .map(function (op) {
                if (op.insert != null) {
                  return typeof op.insert === 'string'
                    ? op.insert
                    : NULL_CHARACTER;
                }
                var prep = delta === other ? 'on' : 'with';
                throw new Error('diff() called ' + prep + ' non-document');
              })
              .join('');
          });
          var delta = new Delta();
          var diffResult = diff(strings[0], strings[1], index);
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          diffResult.forEach(function (component) {
            var length = component[1].length;
            while (length > 0) {
              var opLength = 0;
              switch (component[0]) {
                case diff.INSERT:
                  opLength = Math.min(otherIter.peekLength(), length);
                  delta.push(otherIter.next(opLength));
                  break;
                case diff.DELETE:
                  opLength = Math.min(length, thisIter.peekLength());
                  thisIter.next(opLength);
                  delta['delete'](opLength);
                  break;
                case diff.EQUAL:
                  opLength = Math.min(
                    thisIter.peekLength(),
                    otherIter.peekLength(),
                    length,
                  );
                  var thisOp = thisIter.next(opLength);
                  var otherOp = otherIter.next(opLength);
                  if (equal(thisOp.insert, otherOp.insert)) {
                    delta.retain(
                      opLength,
                      op.attributes.diff(thisOp.attributes, otherOp.attributes),
                    );
                  } else {
                    delta.push(otherOp)['delete'](opLength);
                  }
                  break;
              }
              length -= opLength;
            }
          });
          return delta.chop();
        };

        Delta.prototype.eachLine = function (predicate, newline) {
          newline = newline || '\n';
          var iter = op.iterator(this.ops);
          var line = new Delta();
          var i = 0;
          while (iter.hasNext()) {
            if (iter.peekType() !== 'insert') return;
            var thisOp = iter.peek();
            var start = op.length(thisOp) - iter.peekLength();
            var index =
              typeof thisOp.insert === 'string'
                ? thisOp.insert.indexOf(newline, start) - start
                : -1;
            if (index < 0) {
              line.push(iter.next());
            } else if (index > 0) {
              line.push(iter.next(index));
            } else {
              if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                return;
              }
              i += 1;
              line = new Delta();
            }
          }
          if (line.length() > 0) {
            predicate(line, {}, i);
          }
        };

        Delta.prototype.transform = function (other, priority) {
          priority = !!priority;
          if (typeof other === 'number') {
            return this.transformPosition(other, priority);
          }
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          var delta = new Delta();
          while (thisIter.hasNext() || otherIter.hasNext()) {
            if (
              thisIter.peekType() === 'insert' &&
              (priority || otherIter.peekType() !== 'insert')
            ) {
              delta.retain(op.length(thisIter.next()));
            } else if (otherIter.peekType() === 'insert') {
              delta.push(otherIter.next());
            } else {
              var length = Math.min(
                thisIter.peekLength(),
                otherIter.peekLength(),
              );
              var thisOp = thisIter.next(length);
              var otherOp = otherIter.next(length);
              if (thisOp['delete']) {
                // Our delete either makes their delete redundant or removes their retain
                continue;
              } else if (otherOp['delete']) {
                delta.push(otherOp);
              } else {
                // We retain either their retain or insert
                delta.retain(
                  length,
                  op.attributes.transform(
                    thisOp.attributes,
                    otherOp.attributes,
                    priority,
                  ),
                );
              }
            }
          }
          return delta.chop();
        };

        Delta.prototype.transformPosition = function (index, priority) {
          priority = !!priority;
          var thisIter = op.iterator(this.ops);
          var offset = 0;
          while (thisIter.hasNext() && offset <= index) {
            var length = thisIter.peekLength();
            var nextType = thisIter.peekType();
            thisIter.next();
            if (nextType === 'delete') {
              index -= Math.min(length, index - offset);
              continue;
            } else if (nextType === 'insert' && (offset < index || !priority)) {
              index += length;
            }
            offset += length;
          }
          return index;
        };

        module.exports = Delta;

        /***/
      },
      /* 3 */
      /***/ function (module, exports) {
        'use strict';

        var hasOwn = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;

        var isArray = function isArray(arr) {
          if (typeof Array.isArray === 'function') {
            return Array.isArray(arr);
          }

          return toStr.call(arr) === '[object Array]';
        };

        var isPlainObject = function isPlainObject(obj) {
          if (!obj || toStr.call(obj) !== '[object Object]') {
            return false;
          }

          var hasOwnConstructor = hasOwn.call(obj, 'constructor');
          var hasIsPrototypeOf =
            obj.constructor &&
            obj.constructor.prototype &&
            hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
          // Not own constructor property must be Object
          if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
            return false;
          }

          // Own properties are enumerated firstly, so to speed up,
          // if last one is own, then all properties are own.
          var key;
          for (key in obj) {
            /**/
          }

          return typeof key === 'undefined' || hasOwn.call(obj, key);
        };

        module.exports = function extend() {
          var options, name, src, copy, copyIsArray, clone;
          var target = arguments[0];
          var i = 1;
          var length = arguments.length;
          var deep = false;

          // Handle a deep copy situation
          if (typeof target === 'boolean') {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
          }
          if (
            target == null ||
            (typeof target !== 'object' && typeof target !== 'function')
          ) {
            target = {};
          }

          for (; i < length; ++i) {
            options = arguments[i];
            // Only deal with non-null/undefined values
            if (options != null) {
              // Extend the base object
              for (name in options) {
                src = target[name];
                copy = options[name];

                // Prevent never-ending loop
                if (target !== copy) {
                  // Recurse if we're merging plain objects or arrays
                  if (
                    deep &&
                    copy &&
                    (isPlainObject(copy) || (copyIsArray = isArray(copy)))
                  ) {
                    if (copyIsArray) {
                      copyIsArray = false;
                      clone = src && isArray(src) ? src : [];
                    } else {
                      clone = src && isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[name] = extend(deep, clone, copy);

                    // Don't bring in undefined values
                  } else if (typeof copy !== 'undefined') {
                    target[name] = copy;
                  }
                }
              }
            }
          }

          // Return the modified object
          return target;
        };

        /***/
      },
      /* 4 */
      /***/ function (module, exports, __nested_webpack_require_28001__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default =
          exports.BlockEmbed =
          exports.bubbleFormats =
            undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _extend = __nested_webpack_require_28001__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _quillDelta = __nested_webpack_require_28001__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _parchment = __nested_webpack_require_28001__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _break = __nested_webpack_require_28001__(16);

        var _break2 = _interopRequireDefault(_break);

        var _inline = __nested_webpack_require_28001__(6);

        var _inline2 = _interopRequireDefault(_inline);

        var _text = __nested_webpack_require_28001__(7);

        var _text2 = _interopRequireDefault(_text);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var NEWLINE_LENGTH = 1;

        var BlockEmbed = (function (_Parchment$Embed) {
          _inherits(BlockEmbed, _Parchment$Embed);

          function BlockEmbed() {
            _classCallCheck(this, BlockEmbed);

            return _possibleConstructorReturn(
              this,
              (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(BlockEmbed, [
            {
              key: 'attach',
              value: function attach() {
                _get(
                  BlockEmbed.prototype.__proto__ ||
                    Object.getPrototypeOf(BlockEmbed.prototype),
                  'attach',
                  this,
                ).call(this);
                this.attributes = new _parchment2.default.Attributor.Store(
                  this.domNode,
                );
              },
            },
            {
              key: 'delta',
              value: function delta() {
                return new _quillDelta2.default().insert(
                  this.value(),
                  (0, _extend2.default)(
                    this.formats(),
                    this.attributes.values(),
                  ),
                );
              },
            },
            {
              key: 'format',
              value: function format(name, value) {
                var attribute = _parchment2.default.query(
                  name,
                  _parchment2.default.Scope.BLOCK_ATTRIBUTE,
                );
                if (attribute != null) {
                  this.attributes.attribute(attribute, value);
                }
              },
            },
            {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                this.format(name, value);
              },
            },
            {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (typeof value === 'string' && value.endsWith('\n')) {
                  var block = _parchment2.default.create(Block.blotName);
                  this.parent.insertBefore(
                    block,
                    index === 0 ? this : this.next,
                  );
                  block.insertAt(0, value.slice(0, -1));
                } else {
                  _get(
                    BlockEmbed.prototype.__proto__ ||
                      Object.getPrototypeOf(BlockEmbed.prototype),
                    'insertAt',
                    this,
                  ).call(this, index, value, def);
                }
              },
            },
          ]);

          return BlockEmbed;
        })(_parchment2.default.Embed);

        BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
        // It is important for cursor behavior BlockEmbeds use tags that are block level elements

        var Block = (function (_Parchment$Block) {
          _inherits(Block, _Parchment$Block);

          function Block(domNode) {
            _classCallCheck(this, Block);

            var _this2 = _possibleConstructorReturn(
              this,
              (Block.__proto__ || Object.getPrototypeOf(Block)).call(
                this,
                domNode,
              ),
            );

            _this2.cache = {};
            return _this2;
          }

          _createClass(Block, [
            {
              key: 'delta',
              value: function delta() {
                if (this.cache.delta == null) {
                  this.cache.delta = this.descendants(_parchment2.default.Leaf)
                    .reduce(function (delta, leaf) {
                      if (leaf.length() === 0) {
                        return delta;
                      } else {
                        return delta.insert(leaf.value(), bubbleFormats(leaf));
                      }
                    }, new _quillDelta2.default())
                    .insert('\n', bubbleFormats(this));
                }
                return this.cache.delta;
              },
            },
            {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'deleteAt',
                  this,
                ).call(this, index, length);
                this.cache = {};
              },
            },
            {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (length <= 0) return;
                if (
                  _parchment2.default.query(
                    name,
                    _parchment2.default.Scope.BLOCK,
                  )
                ) {
                  if (index + length === this.length()) {
                    this.format(name, value);
                  }
                } else {
                  _get(
                    Block.prototype.__proto__ ||
                      Object.getPrototypeOf(Block.prototype),
                    'formatAt',
                    this,
                  ).call(
                    this,
                    index,
                    Math.min(length, this.length() - index - 1),
                    name,
                    value,
                  );
                }
                this.cache = {};
              },
            },
            {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null)
                  return _get(
                    Block.prototype.__proto__ ||
                      Object.getPrototypeOf(Block.prototype),
                    'insertAt',
                    this,
                  ).call(this, index, value, def);
                if (value.length === 0) return;
                var lines = value.split('\n');
                var text = lines.shift();
                if (text.length > 0) {
                  if (index < this.length() - 1 || this.children.tail == null) {
                    _get(
                      Block.prototype.__proto__ ||
                        Object.getPrototypeOf(Block.prototype),
                      'insertAt',
                      this,
                    ).call(this, Math.min(index, this.length() - 1), text);
                  } else {
                    this.children.tail.insertAt(
                      this.children.tail.length(),
                      text,
                    );
                  }
                  this.cache = {};
                }
                var block = this;
                lines.reduce(function (index, line) {
                  block = block.split(index, true);
                  block.insertAt(0, line);
                  return line.length;
                }, index + text.length);
              },
            },
            {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                var head = this.children.head;
                _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'insertBefore',
                  this,
                ).call(this, blot, ref);
                if (head instanceof _break2.default) {
                  head.remove();
                }
                this.cache = {};
              },
            },
            {
              key: 'length',
              value: function length() {
                if (this.cache.length == null) {
                  this.cache.length =
                    _get(
                      Block.prototype.__proto__ ||
                        Object.getPrototypeOf(Block.prototype),
                      'length',
                      this,
                    ).call(this) + NEWLINE_LENGTH;
                }
                return this.cache.length;
              },
            },
            {
              key: 'moveChildren',
              value: function moveChildren(target, ref) {
                _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'moveChildren',
                  this,
                ).call(this, target, ref);
                this.cache = {};
              },
            },
            {
              key: 'optimize',
              value: function optimize(context) {
                _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'optimize',
                  this,
                ).call(this, context);
                this.cache = {};
              },
            },
            {
              key: 'path',
              value: function path(index) {
                return _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'path',
                  this,
                ).call(this, index, true);
              },
            },
            {
              key: 'removeChild',
              value: function removeChild(child) {
                _get(
                  Block.prototype.__proto__ ||
                    Object.getPrototypeOf(Block.prototype),
                  'removeChild',
                  this,
                ).call(this, child);
                this.cache = {};
              },
            },
            {
              key: 'split',
              value: function split(index) {
                var force =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : false;

                if (
                  force &&
                  (index === 0 || index >= this.length() - NEWLINE_LENGTH)
                ) {
                  var clone = this.clone();
                  if (index === 0) {
                    this.parent.insertBefore(clone, this);
                    return this;
                  } else {
                    this.parent.insertBefore(clone, this.next);
                    return clone;
                  }
                } else {
                  var next = _get(
                    Block.prototype.__proto__ ||
                      Object.getPrototypeOf(Block.prototype),
                    'split',
                    this,
                  ).call(this, index, force);
                  this.cache = {};
                  return next;
                }
              },
            },
          ]);

          return Block;
        })(_parchment2.default.Block);

        Block.blotName = 'block';
        Block.tagName = 'P';
        Block.defaultChild = 'break';
        Block.allowedChildren = [
          _inline2.default,
          _parchment2.default.Embed,
          _text2.default,
        ];

        function bubbleFormats(blot) {
          var formats =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};

          if (blot == null) return formats;
          if (typeof blot.formats === 'function') {
            formats = (0, _extend2.default)(formats, blot.formats());
          }
          if (
            blot.parent == null ||
            blot.parent.blotName == 'scroll' ||
            blot.parent.statics.scope !== blot.statics.scope
          ) {
            return formats;
          }
          return bubbleFormats(blot.parent, formats);
        }

        exports.bubbleFormats = bubbleFormats;
        exports.BlockEmbed = BlockEmbed;
        exports.default = Block;

        /***/
      },
      /* 5 */
      /***/ function (module, exports, __nested_webpack_require_43669__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.overload = exports.expandConfig = undefined;

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        __nested_webpack_require_43669__(50);

        var _quillDelta = __nested_webpack_require_43669__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _editor = __nested_webpack_require_43669__(14);

        var _editor2 = _interopRequireDefault(_editor);

        var _emitter3 = __nested_webpack_require_43669__(8);

        var _emitter4 = _interopRequireDefault(_emitter3);

        var _module = __nested_webpack_require_43669__(9);

        var _module2 = _interopRequireDefault(_module);

        var _parchment = __nested_webpack_require_43669__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _selection = __nested_webpack_require_43669__(15);

        var _selection2 = _interopRequireDefault(_selection);

        var _extend = __nested_webpack_require_43669__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _logger = __nested_webpack_require_43669__(10);

        var _logger2 = _interopRequireDefault(_logger);

        var _theme = __nested_webpack_require_43669__(34);

        var _theme2 = _interopRequireDefault(_theme);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var debug = (0, _logger2.default)('quill');

        var Quill = (function () {
          _createClass(Quill, null, [
            {
              key: 'debug',
              value: function debug(limit) {
                if (limit === true) {
                  limit = 'log';
                }
                _logger2.default.level(limit);
              },
            },
            {
              key: 'find',
              value: function find(node) {
                return node.__quill || _parchment2.default.find(node);
              },
            },
            {
              key: 'import',
              value: function _import(name) {
                if (this.imports[name] == null) {
                  debug.error(
                    'Cannot import ' +
                      name +
                      '. Are you sure it was registered?',
                  );
                }
                return this.imports[name];
              },
            },
            {
              key: 'register',
              value: function register(path, target) {
                var _this = this;

                var overwrite =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : false;

                if (typeof path !== 'string') {
                  var name = path.attrName || path.blotName;
                  if (typeof name === 'string') {
                    // register(Blot | Attributor, overwrite)
                    this.register('formats/' + name, path, target);
                  } else {
                    Object.keys(path).forEach(function (key) {
                      _this.register(key, path[key], target);
                    });
                  }
                } else {
                  if (this.imports[path] != null && !overwrite) {
                    debug.warn('Overwriting ' + path + ' with', target);
                  }
                  this.imports[path] = target;
                  if (
                    (path.startsWith('blots/') ||
                      path.startsWith('formats/')) &&
                    target.blotName !== 'abstract'
                  ) {
                    _parchment2.default.register(target);
                  } else if (
                    path.startsWith('modules') &&
                    typeof target.register === 'function'
                  ) {
                    target.register();
                  }
                }
              },
            },
          ]);

          function Quill(container) {
            var _this2 = this;

            var options =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : {};

            _classCallCheck(this, Quill);

            this.options = expandConfig(container, options);
            this.container = this.options.container;
            if (this.container == null) {
              return debug.error('Invalid Quill container', container);
            }
            if (this.options.debug) {
              Quill.debug(this.options.debug);
            }
            var html = this.container.innerHTML.trim();
            this.container.classList.add('ql-container');
            this.container.innerHTML = '';
            this.container.__quill = this;
            this.root = this.addContainer('ql-editor');
            this.root.classList.add('ql-blank');
            this.root.setAttribute('data-gramm', false);
            this.scrollingContainer =
              this.options.scrollingContainer || this.root;
            this.emitter = new _emitter4.default();
            this.scroll = _parchment2.default.create(this.root, {
              emitter: this.emitter,
              whitelist: this.options.formats,
            });
            this.editor = new _editor2.default(this.scroll);
            this.selection = new _selection2.default(this.scroll, this.emitter);
            this.theme = new this.options.theme(this, this.options);
            this.keyboard = this.theme.addModule('keyboard');
            this.clipboard = this.theme.addModule('clipboard');
            this.history = this.theme.addModule('history');
            this.theme.init();
            this.emitter.on(
              _emitter4.default.events.EDITOR_CHANGE,
              function (type) {
                if (type === _emitter4.default.events.TEXT_CHANGE) {
                  _this2.root.classList.toggle(
                    'ql-blank',
                    _this2.editor.isBlank(),
                  );
                }
              },
            );
            this.emitter.on(
              _emitter4.default.events.SCROLL_UPDATE,
              function (source, mutations) {
                var range = _this2.selection.lastRange;
                var index =
                  range && range.length === 0 ? range.index : undefined;
                modify.call(
                  _this2,
                  function () {
                    return _this2.editor.update(null, mutations, index);
                  },
                  source,
                );
              },
            );
            var contents = this.clipboard.convert(
              '<div class=\'ql-editor\' style="white-space: normal;">' +
                html +
                '<p><br></p></div>',
            );
            this.setContents(contents);
            this.history.clear();
            if (this.options.placeholder) {
              this.root.setAttribute(
                'data-placeholder',
                this.options.placeholder,
              );
            }
            if (this.options.readOnly) {
              this.disable();
            }
          }

          _createClass(Quill, [
            {
              key: 'addContainer',
              value: function addContainer(container) {
                var refNode =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : null;

                if (typeof container === 'string') {
                  var className = container;
                  container = document.createElement('div');
                  container.classList.add(className);
                }
                this.container.insertBefore(container, refNode);
                return container;
              },
            },
            {
              key: 'blur',
              value: function blur() {
                this.selection.setRange(null);
              },
            },
            {
              key: 'deleteText',
              value: function deleteText(index, length, source) {
                var _this3 = this;

                var _overload = overload(index, length, source);

                var _overload2 = _slicedToArray(_overload, 4);

                index = _overload2[0];
                length = _overload2[1];
                source = _overload2[3];

                return modify.call(
                  this,
                  function () {
                    return _this3.editor.deleteText(index, length);
                  },
                  source,
                  index,
                  -1 * length,
                );
              },
            },
            {
              key: 'disable',
              value: function disable() {
                this.enable(false);
              },
            },
            {
              key: 'enable',
              value: function enable() {
                var enabled =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : true;

                this.scroll.enable(enabled);
                this.container.classList.toggle('ql-disabled', !enabled);
              },
            },
            {
              key: 'focus',
              value: function focus() {
                var scrollTop = this.scrollingContainer.scrollTop;
                this.selection.focus();
                this.scrollingContainer.scrollTop = scrollTop;
                this.scrollIntoView();
              },
            },
            {
              key: 'format',
              value: function format(name, value) {
                var _this4 = this;

                var source =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : _emitter4.default.sources.API;

                return modify.call(
                  this,
                  function () {
                    var range = _this4.getSelection(true);
                    var change = new _quillDelta2.default();
                    if (range == null) {
                      return change;
                    } else if (
                      _parchment2.default.query(
                        name,
                        _parchment2.default.Scope.BLOCK,
                      )
                    ) {
                      change = _this4.editor.formatLine(
                        range.index,
                        range.length,
                        _defineProperty({}, name, value),
                      );
                    } else if (range.length === 0) {
                      _this4.selection.format(name, value);
                      return change;
                    } else {
                      change = _this4.editor.formatText(
                        range.index,
                        range.length,
                        _defineProperty({}, name, value),
                      );
                    }
                    _this4.setSelection(
                      range,
                      _emitter4.default.sources.SILENT,
                    );
                    return change;
                  },
                  source,
                );
              },
            },
            {
              key: 'formatLine',
              value: function formatLine(index, length, name, value, source) {
                var _this5 = this;

                var formats = void 0;

                var _overload3 = overload(index, length, name, value, source);

                var _overload4 = _slicedToArray(_overload3, 4);

                index = _overload4[0];
                length = _overload4[1];
                formats = _overload4[2];
                source = _overload4[3];

                return modify.call(
                  this,
                  function () {
                    return _this5.editor.formatLine(index, length, formats);
                  },
                  source,
                  index,
                  0,
                );
              },
            },
            {
              key: 'formatText',
              value: function formatText(index, length, name, value, source) {
                var _this6 = this;

                var formats = void 0;

                var _overload5 = overload(index, length, name, value, source);

                var _overload6 = _slicedToArray(_overload5, 4);

                index = _overload6[0];
                length = _overload6[1];
                formats = _overload6[2];
                source = _overload6[3];

                return modify.call(
                  this,
                  function () {
                    return _this6.editor.formatText(index, length, formats);
                  },
                  source,
                  index,
                  0,
                );
              },
            },
            {
              key: 'getBounds',
              value: function getBounds(index) {
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : 0;

                var bounds = void 0;
                if (typeof index === 'number') {
                  bounds = this.selection.getBounds(index, length);
                } else {
                  bounds = this.selection.getBounds(index.index, index.length);
                }
                var containerBounds = this.container.getBoundingClientRect();
                return {
                  bottom: bounds.bottom - containerBounds.top,
                  height: bounds.height,
                  left: bounds.left - containerBounds.left,
                  right: bounds.right - containerBounds.left,
                  top: bounds.top - containerBounds.top,
                  width: bounds.width,
                };
              },
            },
            {
              key: 'getContents',
              value: function getContents() {
                var index =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : 0;
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : this.getLength() - index;

                var _overload7 = overload(index, length);

                var _overload8 = _slicedToArray(_overload7, 2);

                index = _overload8[0];
                length = _overload8[1];

                return this.editor.getContents(index, length);
              },
            },
            {
              key: 'getFormat',
              value: function getFormat() {
                var index =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : this.getSelection(true);
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : 0;

                if (typeof index === 'number') {
                  return this.editor.getFormat(index, length);
                } else {
                  return this.editor.getFormat(index.index, index.length);
                }
              },
            },
            {
              key: 'getIndex',
              value: function getIndex(blot) {
                return blot.offset(this.scroll);
              },
            },
            {
              key: 'getLength',
              value: function getLength() {
                return this.scroll.length();
              },
            },
            {
              key: 'getLeaf',
              value: function getLeaf(index) {
                return this.scroll.leaf(index);
              },
            },
            {
              key: 'getLine',
              value: function getLine(index) {
                return this.scroll.line(index);
              },
            },
            {
              key: 'getLines',
              value: function getLines() {
                var index =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : 0;
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : Number.MAX_VALUE;

                if (typeof index !== 'number') {
                  return this.scroll.lines(index.index, index.length);
                } else {
                  return this.scroll.lines(index, length);
                }
              },
            },
            {
              key: 'getModule',
              value: function getModule(name) {
                return this.theme.modules[name];
              },
            },
            {
              key: 'getSelection',
              value: function getSelection() {
                var focus =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : false;

                if (focus) this.focus();
                this.update(); // Make sure we access getRange with editor in consistent state
                return this.selection.getRange()[0];
              },
            },
            {
              key: 'getText',
              value: function getText() {
                var index =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : 0;
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : this.getLength() - index;

                var _overload9 = overload(index, length);

                var _overload10 = _slicedToArray(_overload9, 2);

                index = _overload10[0];
                length = _overload10[1];

                return this.editor.getText(index, length);
              },
            },
            {
              key: 'hasFocus',
              value: function hasFocus() {
                return this.selection.hasFocus();
              },
            },
            {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                var _this7 = this;

                var source =
                  arguments.length > 3 && arguments[3] !== undefined
                    ? arguments[3]
                    : Quill.sources.API;

                return modify.call(
                  this,
                  function () {
                    return _this7.editor.insertEmbed(index, embed, value);
                  },
                  source,
                  index,
                );
              },
            },
            {
              key: 'insertText',
              value: function insertText(index, text, name, value, source) {
                var _this8 = this;

                var formats = void 0;

                var _overload11 = overload(index, 0, name, value, source);

                var _overload12 = _slicedToArray(_overload11, 4);

                index = _overload12[0];
                formats = _overload12[2];
                source = _overload12[3];

                return modify.call(
                  this,
                  function () {
                    return _this8.editor.insertText(index, text, formats);
                  },
                  source,
                  index,
                  text.length,
                );
              },
            },
            {
              key: 'isEnabled',
              value: function isEnabled() {
                return !this.container.classList.contains('ql-disabled');
              },
            },
            {
              key: 'off',
              value: function off() {
                return this.emitter.off.apply(this.emitter, arguments);
              },
            },
            {
              key: 'on',
              value: function on() {
                return this.emitter.on.apply(this.emitter, arguments);
              },
            },
            {
              key: 'once',
              value: function once() {
                return this.emitter.once.apply(this.emitter, arguments);
              },
            },
            {
              key: 'pasteHTML',
              value: function pasteHTML(index, html, source) {
                this.clipboard.dangerouslyPasteHTML(index, html, source);
              },
            },
            {
              key: 'removeFormat',
              value: function removeFormat(index, length, source) {
                var _this9 = this;

                var _overload13 = overload(index, length, source);

                var _overload14 = _slicedToArray(_overload13, 4);

                index = _overload14[0];
                length = _overload14[1];
                source = _overload14[3];

                return modify.call(
                  this,
                  function () {
                    return _this9.editor.removeFormat(index, length);
                  },
                  source,
                  index,
                );
              },
            },
            {
              key: 'scrollIntoView',
              value: function scrollIntoView() {
                this.selection.scrollIntoView(this.scrollingContainer);
              },
            },
            {
              key: 'setContents',
              value: function setContents(delta) {
                var _this10 = this;

                var source =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : _emitter4.default.sources.API;

                return modify.call(
                  this,
                  function () {
                    delta = new _quillDelta2.default(delta);
                    var length = _this10.getLength();
                    var deleted = _this10.editor.deleteText(0, length);
                    var applied = _this10.editor.applyDelta(delta);
                    var lastOp = applied.ops[applied.ops.length - 1];
                    if (
                      lastOp != null &&
                      typeof lastOp.insert === 'string' &&
                      lastOp.insert[lastOp.insert.length - 1] === '\n'
                    ) {
                      _this10.editor.deleteText(_this10.getLength() - 1, 1);
                      applied.delete(1);
                    }
                    var ret = deleted.compose(applied);
                    return ret;
                  },
                  source,
                );
              },
            },
            {
              key: 'setSelection',
              value: function setSelection(index, length, source) {
                if (index == null) {
                  this.selection.setRange(null, length || Quill.sources.API);
                } else {
                  var _overload15 = overload(index, length, source);

                  var _overload16 = _slicedToArray(_overload15, 4);

                  index = _overload16[0];
                  length = _overload16[1];
                  source = _overload16[3];

                  this.selection.setRange(
                    new _selection.Range(index, length),
                    source,
                  );
                  if (source !== _emitter4.default.sources.SILENT) {
                    this.selection.scrollIntoView(this.scrollingContainer);
                  }
                }
              },
            },
            {
              key: 'setText',
              value: function setText(text) {
                var source =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : _emitter4.default.sources.API;

                var delta = new _quillDelta2.default().insert(text);
                return this.setContents(delta, source);
              },
            },
            {
              key: 'update',
              value: function update() {
                var source =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : _emitter4.default.sources.USER;

                var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
                this.selection.update(source);
                return change;
              },
            },
            {
              key: 'updateContents',
              value: function updateContents(delta) {
                var _this11 = this;

                var source =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : _emitter4.default.sources.API;

                return modify.call(
                  this,
                  function () {
                    delta = new _quillDelta2.default(delta);
                    return _this11.editor.applyDelta(delta, source);
                  },
                  source,
                  true,
                );
              },
            },
          ]);

          return Quill;
        })();

        Quill.DEFAULTS = {
          bounds: null,
          formats: null,
          modules: {},
          placeholder: '',
          readOnly: false,
          scrollingContainer: null,
          strict: true,
          theme: 'default',
        };
        Quill.events = _emitter4.default.events;
        Quill.sources = _emitter4.default.sources;
        // eslint-disable-next-line no-undef
        Quill.version =  false ? 0 : '1.3.6';

        Quill.imports = {
          delta: _quillDelta2.default,
          parchment: _parchment2.default,
          'core/module': _module2.default,
          'core/theme': _theme2.default,
        };

        function expandConfig(container, userConfig) {
          userConfig = (0, _extend2.default)(
            true,
            {
              container: container,
              modules: {
                clipboard: true,
                keyboard: true,
                history: true,
              },
            },
            userConfig,
          );
          if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
            userConfig.theme = _theme2.default;
          } else {
            userConfig.theme = Quill.import('themes/' + userConfig.theme);
            if (userConfig.theme == null) {
              throw new Error(
                'Invalid theme ' + userConfig.theme + '. Did you register it?',
              );
            }
          }
          var themeConfig = (0, _extend2.default)(
            true,
            {},
            userConfig.theme.DEFAULTS,
          );
          [themeConfig, userConfig].forEach(function (config) {
            config.modules = config.modules || {};
            Object.keys(config.modules).forEach(function (module) {
              if (config.modules[module] === true) {
                config.modules[module] = {};
              }
            });
          });
          var moduleNames = Object.keys(themeConfig.modules).concat(
            Object.keys(userConfig.modules),
          );
          var moduleConfig = moduleNames.reduce(function (config, name) {
            var moduleClass = Quill.import('modules/' + name);
            if (moduleClass == null) {
              debug.error(
                'Cannot load ' +
                  name +
                  ' module. Are you sure you registered it?',
              );
            } else {
              config[name] = moduleClass.DEFAULTS || {};
            }
            return config;
          }, {});
          // Special case toolbar shorthand
          if (
            userConfig.modules != null &&
            userConfig.modules.toolbar &&
            userConfig.modules.toolbar.constructor !== Object
          ) {
            userConfig.modules.toolbar = {
              container: userConfig.modules.toolbar,
            };
          }
          userConfig = (0, _extend2.default)(
            true,
            {},
            Quill.DEFAULTS,
            {modules: moduleConfig},
            themeConfig,
            userConfig,
          );
          ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
            if (typeof userConfig[key] === 'string') {
              userConfig[key] = document.querySelector(userConfig[key]);
            }
          });
          userConfig.modules = Object.keys(userConfig.modules).reduce(function (
            config,
            name,
          ) {
            if (userConfig.modules[name]) {
              config[name] = userConfig.modules[name];
            }
            return config;
          },
          {});
          return userConfig;
        }

        // Handle selection preservation and TEXT_CHANGE emission
        // common to modification APIs
        function modify(modifier, source, index, shift) {
          if (
            this.options.strict &&
            !this.isEnabled() &&
            source === _emitter4.default.sources.USER
          ) {
            return new _quillDelta2.default();
          }
          var range = index == null ? null : this.getSelection();
          var oldDelta = this.editor.delta;
          var change = modifier();
          if (range != null) {
            if (index === true) index = range.index;
            if (shift == null) {
              range = shiftRange(range, change, source);
            } else if (shift !== 0) {
              range = shiftRange(range, index, shift, source);
            }
            this.setSelection(range, _emitter4.default.sources.SILENT);
          }
          if (change.length() > 0) {
            var _emitter;

            var args = [
              _emitter4.default.events.TEXT_CHANGE,
              change,
              oldDelta,
              source,
            ];
            (_emitter = this.emitter).emit.apply(
              _emitter,
              [_emitter4.default.events.EDITOR_CHANGE].concat(args),
            );
            if (source !== _emitter4.default.sources.SILENT) {
              var _emitter2;

              (_emitter2 = this.emitter).emit.apply(_emitter2, args);
            }
          }
          return change;
        }

        function overload(index, length, name, value, source) {
          var formats = {};
          if (
            typeof index.index === 'number' &&
            typeof index.length === 'number'
          ) {
            // Allow for throwaway end (used by insertText/insertEmbed)
            if (typeof length !== 'number') {
              (source = value),
                (value = name),
                (name = length),
                (length = index.length),
                (index = index.index);
            } else {
              (length = index.length), (index = index.index);
            }
          } else if (typeof length !== 'number') {
            (source = value), (value = name), (name = length), (length = 0);
          }
          // Handle format being object, two format name/value strings or excluded
          if (
            (typeof name === 'undefined' ? 'undefined' : _typeof(name)) ===
            'object'
          ) {
            formats = name;
            source = value;
          } else if (typeof name === 'string') {
            if (value != null) {
              formats[name] = value;
            } else {
              source = name;
            }
          }
          // Handle optional source
          source = source || _emitter4.default.sources.API;
          return [index, length, formats, source];
        }

        function shiftRange(range, index, length, source) {
          if (range == null) return null;
          var start = void 0,
            end = void 0;
          if (index instanceof _quillDelta2.default) {
            var _map = [range.index, range.index + range.length].map(function (
              pos,
            ) {
              return index.transformPosition(
                pos,
                source !== _emitter4.default.sources.USER,
              );
            });

            var _map2 = _slicedToArray(_map, 2);

            start = _map2[0];
            end = _map2[1];
          } else {
            var _map3 = [range.index, range.index + range.length].map(function (
              pos,
            ) {
              if (
                pos < index ||
                (pos === index && source === _emitter4.default.sources.USER)
              )
                return pos;
              if (length >= 0) {
                return pos + length;
              } else {
                return Math.max(index, pos + length);
              }
            });

            var _map4 = _slicedToArray(_map3, 2);

            start = _map4[0];
            end = _map4[1];
          }
          return new _selection.Range(start, end - start);
        }

        exports.expandConfig = expandConfig;
        exports.overload = overload;
        exports.default = Quill;

        /***/
      },
      /* 6 */
      /***/ function (module, exports, __nested_webpack_require_79872__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _text = __nested_webpack_require_79872__(7);

        var _text2 = _interopRequireDefault(_text);

        var _parchment = __nested_webpack_require_79872__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Inline = (function (_Parchment$Inline) {
          _inherits(Inline, _Parchment$Inline);

          function Inline() {
            _classCallCheck(this, Inline);

            return _possibleConstructorReturn(
              this,
              (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Inline,
            [
              {
                key: 'formatAt',
                value: function formatAt(index, length, name, value) {
                  if (
                    Inline.compare(this.statics.blotName, name) < 0 &&
                    _parchment2.default.query(
                      name,
                      _parchment2.default.Scope.BLOT,
                    )
                  ) {
                    var blot = this.isolate(index, length);
                    if (value) {
                      blot.wrap(name, value);
                    }
                  } else {
                    _get(
                      Inline.prototype.__proto__ ||
                        Object.getPrototypeOf(Inline.prototype),
                      'formatAt',
                      this,
                    ).call(this, index, length, name, value);
                  }
                },
              },
              {
                key: 'optimize',
                value: function optimize(context) {
                  _get(
                    Inline.prototype.__proto__ ||
                      Object.getPrototypeOf(Inline.prototype),
                    'optimize',
                    this,
                  ).call(this, context);
                  if (
                    this.parent instanceof Inline &&
                    Inline.compare(
                      this.statics.blotName,
                      this.parent.statics.blotName,
                    ) > 0
                  ) {
                    var parent = this.parent.isolate(
                      this.offset(),
                      this.length(),
                    );
                    this.moveChildren(parent);
                    parent.wrap(this);
                  }
                },
              },
            ],
            [
              {
                key: 'compare',
                value: function compare(self, other) {
                  var selfIndex = Inline.order.indexOf(self);
                  var otherIndex = Inline.order.indexOf(other);
                  if (selfIndex >= 0 || otherIndex >= 0) {
                    return selfIndex - otherIndex;
                  } else if (self === other) {
                    return 0;
                  } else if (self < other) {
                    return -1;
                  } else {
                    return 1;
                  }
                },
              },
            ],
          );

          return Inline;
        })(_parchment2.default.Inline);

        Inline.allowedChildren = [
          Inline,
          _parchment2.default.Embed,
          _text2.default,
        ];
        // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
        Inline.order = [
          'cursor',
          'inline', // Must be lower
          'underline',
          'strike',
          'italic',
          'bold',
          'script',
          'link',
          'code', // Must be higher
        ];

        exports.default = Inline;

        /***/
      },
      /* 7 */
      /***/ function (module, exports, __nested_webpack_require_86733__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _parchment = __nested_webpack_require_86733__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var TextBlot = (function (_Parchment$Text) {
          _inherits(TextBlot, _Parchment$Text);

          function TextBlot() {
            _classCallCheck(this, TextBlot);

            return _possibleConstructorReturn(
              this,
              (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(
                this,
                arguments,
              ),
            );
          }

          return TextBlot;
        })(_parchment2.default.Text);

        exports.default = TextBlot;

        /***/
      },
      /* 8 */
      /***/ function (module, exports, __nested_webpack_require_89063__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _eventemitter = __nested_webpack_require_89063__(54);

        var _eventemitter2 = _interopRequireDefault(_eventemitter);

        var _logger = __nested_webpack_require_89063__(10);

        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var debug = (0, _logger2.default)('quill:events');

        var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

        EVENTS.forEach(function (eventName) {
          document.addEventListener(eventName, function () {
            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            [].slice
              .call(document.querySelectorAll('.ql-container'))
              .forEach(function (node) {
                // TODO use WeakMap
                if (node.__quill && node.__quill.emitter) {
                  var _node$__quill$emitter;

                  (_node$__quill$emitter =
                    node.__quill.emitter).handleDOM.apply(
                    _node$__quill$emitter,
                    args,
                  );
                }
              });
          });
        });

        var Emitter = (function (_EventEmitter) {
          _inherits(Emitter, _EventEmitter);

          function Emitter() {
            _classCallCheck(this, Emitter);

            var _this = _possibleConstructorReturn(
              this,
              (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this),
            );

            _this.listeners = {};
            _this.on('error', debug.error);
            return _this;
          }

          _createClass(Emitter, [
            {
              key: 'emit',
              value: function emit() {
                debug.log.apply(debug, arguments);
                _get(
                  Emitter.prototype.__proto__ ||
                    Object.getPrototypeOf(Emitter.prototype),
                  'emit',
                  this,
                ).apply(this, arguments);
              },
            },
            {
              key: 'handleDOM',
              value: function handleDOM(event) {
                for (
                  var _len2 = arguments.length,
                    args = Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2];
                }

                (this.listeners[event.type] || []).forEach(function (_ref) {
                  var node = _ref.node,
                    handler = _ref.handler;

                  if (event.target === node || node.contains(event.target)) {
                    handler.apply(undefined, [event].concat(args));
                  }
                });
              },
            },
            {
              key: 'listenDOM',
              value: function listenDOM(eventName, node, handler) {
                if (!this.listeners[eventName]) {
                  this.listeners[eventName] = [];
                }
                this.listeners[eventName].push({node: node, handler: handler});
              },
            },
          ]);

          return Emitter;
        })(_eventemitter2.default);

        Emitter.events = {
          EDITOR_CHANGE: 'editor-change',
          SCROLL_BEFORE_UPDATE: 'scroll-before-update',
          SCROLL_OPTIMIZE: 'scroll-optimize',
          SCROLL_UPDATE: 'scroll-update',
          SELECTION_CHANGE: 'selection-change',
          TEXT_CHANGE: 'text-change',
        };
        Emitter.sources = {
          API: 'api',
          SILENT: 'silent',
          USER: 'user',
        };

        exports.default = Emitter;

        /***/
      },
      /* 9 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var Module = function Module(quill) {
          var options =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};

          _classCallCheck(this, Module);

          this.quill = quill;
          this.options = options;
        };

        Module.DEFAULTS = {};

        exports.default = Module;

        /***/
      },
      /* 10 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        var levels = ['error', 'warn', 'log', 'info'];
        var level = 'warn';

        function debug(method) {
          if (levels.indexOf(method) <= levels.indexOf(level)) {
            var _console;

            for (
              var _len = arguments.length,
                args = Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }

            (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
          }
        }

        function namespace(ns) {
          return levels.reduce(function (logger, method) {
            logger[method] = debug.bind(console, method, ns);
            return logger;
          }, {});
        }

        debug.level = namespace.level = function (newLevel) {
          level = newLevel;
        };

        exports.default = namespace;

        /***/
      },
      /* 11 */
      /***/ function (module, exports, __nested_webpack_require_97936__) {
        var pSlice = Array.prototype.slice;
        var objectKeys = __nested_webpack_require_97936__(52);
        var isArguments = __nested_webpack_require_97936__(53);

        var deepEqual = (module.exports = function (actual, expected, opts) {
          if (!opts) opts = {};
          // 7.1. All identical values are equivalent, as determined by ===.
          if (actual === expected) {
            return true;
          } else if (actual instanceof Date && expected instanceof Date) {
            return actual.getTime() === expected.getTime();

            // 7.3. Other pairs that do not both pass typeof value == 'object',
            // equivalence is determined by ==.
          } else if (
            !actual ||
            !expected ||
            (typeof actual != 'object' && typeof expected != 'object')
          ) {
            return opts.strict ? actual === expected : actual == expected;

            // 7.4. For all other Object pairs, including Array objects, equivalence is
            // determined by having the same number of owned properties (as verified
            // with Object.prototype.hasOwnProperty.call), the same set of keys
            // (although not necessarily the same order), equivalent values for every
            // corresponding key, and an identical 'prototype' property. Note: this
            // accounts for both named and indexed properties on Arrays.
          } else {
            return objEquiv(actual, expected, opts);
          }
        });

        function isUndefinedOrNull(value) {
          return value === null || value === undefined;
        }

        function isBuffer(x) {
          if (!x || typeof x !== 'object' || typeof x.length !== 'number')
            return false;
          if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
            return false;
          }
          if (x.length > 0 && typeof x[0] !== 'number') return false;
          return true;
        }

        function objEquiv(a, b, opts) {
          var i, key;
          if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
          // an identical 'prototype' property.
          if (a.prototype !== b.prototype) return false;
          //~~~I've managed to break Object.keys through screwy arguments passing.
          //   Converting to array solves the problem.
          if (isArguments(a)) {
            if (!isArguments(b)) {
              return false;
            }
            a = pSlice.call(a);
            b = pSlice.call(b);
            return deepEqual(a, b, opts);
          }
          if (isBuffer(a)) {
            if (!isBuffer(b)) {
              return false;
            }
            if (a.length !== b.length) return false;
            for (i = 0; i < a.length; i++) {
              if (a[i] !== b[i]) return false;
            }
            return true;
          }
          try {
            var ka = objectKeys(a),
              kb = objectKeys(b);
          } catch (e) {
            //happens when one is a string literal and the other isn't
            return false;
          }
          // having the same number of owned properties (keys incorporates
          // hasOwnProperty)
          if (ka.length != kb.length) return false;
          //the same set of keys (although not necessarily the same order),
          ka.sort();
          kb.sort();
          //~~~cheap key test
          for (i = ka.length - 1; i >= 0; i--) {
            if (ka[i] != kb[i]) return false;
          }
          //equivalent values for every corresponding key, and
          //~~~possibly expensive deep test
          for (i = ka.length - 1; i >= 0; i--) {
            key = ka[i];
            if (!deepEqual(a[key], b[key], opts)) return false;
          }
          return typeof a === typeof b;
        }

        /***/
      },
      /* 12 */
      /***/ function (module, exports, __nested_webpack_require_101826__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {value: true});
        var Registry = __nested_webpack_require_101826__(1);
        var Attributor = /** @class */ (function () {
          function Attributor(attrName, keyName, options) {
            if (options === void 0) {
              options = {};
            }
            this.attrName = attrName;
            this.keyName = keyName;
            var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
            if (options.scope != null) {
              // Ignore type bits, force attribute bit
              this.scope =
                (options.scope & Registry.Scope.LEVEL) | attributeBit;
            } else {
              this.scope = Registry.Scope.ATTRIBUTE;
            }
            if (options.whitelist != null) this.whitelist = options.whitelist;
          }
          Attributor.keys = function (node) {
            return [].map.call(node.attributes, function (item) {
              return item.name;
            });
          };
          Attributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value)) return false;
            node.setAttribute(this.keyName, value);
            return true;
          };
          Attributor.prototype.canAdd = function (node, value) {
            var match = Registry.query(
              node,
              Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE),
            );
            if (match == null) return false;
            if (this.whitelist == null) return true;
            if (typeof value === 'string') {
              return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
            } else {
              return this.whitelist.indexOf(value) > -1;
            }
          };
          Attributor.prototype.remove = function (node) {
            node.removeAttribute(this.keyName);
          };
          Attributor.prototype.value = function (node) {
            var value = node.getAttribute(this.keyName);
            if (this.canAdd(node, value) && value) {
              return value;
            }
            return '';
          };
          return Attributor;
        })();
        exports.default = Attributor;

        /***/
      },
      /* 13 */
      /***/ function (module, exports, __nested_webpack_require_104151__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.Code = undefined;

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _quillDelta = __nested_webpack_require_104151__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _parchment = __nested_webpack_require_104151__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _block = __nested_webpack_require_104151__(4);

        var _block2 = _interopRequireDefault(_block);

        var _inline = __nested_webpack_require_104151__(6);

        var _inline2 = _interopRequireDefault(_inline);

        var _text = __nested_webpack_require_104151__(7);

        var _text2 = _interopRequireDefault(_text);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Code = (function (_Inline) {
          _inherits(Code, _Inline);

          function Code() {
            _classCallCheck(this, Code);

            return _possibleConstructorReturn(
              this,
              (Code.__proto__ || Object.getPrototypeOf(Code)).apply(
                this,
                arguments,
              ),
            );
          }

          return Code;
        })(_inline2.default);

        Code.blotName = 'code';
        Code.tagName = 'CODE';

        var CodeBlock = (function (_Block) {
          _inherits(CodeBlock, _Block);

          function CodeBlock() {
            _classCallCheck(this, CodeBlock);

            return _possibleConstructorReturn(
              this,
              (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            CodeBlock,
            [
              {
                key: 'delta',
                value: function delta() {
                  var _this3 = this;

                  var text = this.domNode.textContent;
                  if (text.endsWith('\n')) {
                    // Should always be true
                    text = text.slice(0, -1);
                  }
                  return text.split('\n').reduce(function (delta, frag) {
                    return delta.insert(frag).insert('\n', _this3.formats());
                  }, new _quillDelta2.default());
                },
              },
              {
                key: 'format',
                value: function format(name, value) {
                  if (name === this.statics.blotName && value) return;

                  var _descendant = this.descendant(
                      _text2.default,
                      this.length() - 1,
                    ),
                    _descendant2 = _slicedToArray(_descendant, 1),
                    text = _descendant2[0];

                  if (text != null) {
                    text.deleteAt(text.length() - 1, 1);
                  }
                  _get(
                    CodeBlock.prototype.__proto__ ||
                      Object.getPrototypeOf(CodeBlock.prototype),
                    'format',
                    this,
                  ).call(this, name, value);
                },
              },
              {
                key: 'formatAt',
                value: function formatAt(index, length, name, value) {
                  if (length === 0) return;
                  if (
                    _parchment2.default.query(
                      name,
                      _parchment2.default.Scope.BLOCK,
                    ) == null ||
                    (name === this.statics.blotName &&
                      value === this.statics.formats(this.domNode))
                  ) {
                    return;
                  }
                  var nextNewline = this.newlineIndex(index);
                  if (nextNewline < 0 || nextNewline >= index + length) return;
                  var prevNewline = this.newlineIndex(index, true) + 1;
                  var isolateLength = nextNewline - prevNewline + 1;
                  var blot = this.isolate(prevNewline, isolateLength);
                  var next = blot.next;
                  blot.format(name, value);
                  if (next instanceof CodeBlock) {
                    next.formatAt(
                      0,
                      index - prevNewline + length - isolateLength,
                      name,
                      value,
                    );
                  }
                },
              },
              {
                key: 'insertAt',
                value: function insertAt(index, value, def) {
                  if (def != null) return;

                  var _descendant3 = this.descendant(_text2.default, index),
                    _descendant4 = _slicedToArray(_descendant3, 2),
                    text = _descendant4[0],
                    offset = _descendant4[1];

                  text.insertAt(offset, value);
                },
              },
              {
                key: 'length',
                value: function length() {
                  var length = this.domNode.textContent.length;
                  if (!this.domNode.textContent.endsWith('\n')) {
                    return length + 1;
                  }
                  return length;
                },
              },
              {
                key: 'newlineIndex',
                value: function newlineIndex(searchIndex) {
                  var reverse =
                    arguments.length > 1 && arguments[1] !== undefined
                      ? arguments[1]
                      : false;

                  if (!reverse) {
                    var offset = this.domNode.textContent
                      .slice(searchIndex)
                      .indexOf('\n');
                    return offset > -1 ? searchIndex + offset : -1;
                  } else {
                    return this.domNode.textContent
                      .slice(0, searchIndex)
                      .lastIndexOf('\n');
                  }
                },
              },
              {
                key: 'optimize',
                value: function optimize(context) {
                  if (!this.domNode.textContent.endsWith('\n')) {
                    this.appendChild(_parchment2.default.create('text', '\n'));
                  }
                  _get(
                    CodeBlock.prototype.__proto__ ||
                      Object.getPrototypeOf(CodeBlock.prototype),
                    'optimize',
                    this,
                  ).call(this, context);
                  var next = this.next;
                  if (
                    next != null &&
                    next.prev === this &&
                    next.statics.blotName === this.statics.blotName &&
                    this.statics.formats(this.domNode) ===
                      next.statics.formats(next.domNode)
                  ) {
                    next.optimize(context);
                    next.moveChildren(this);
                    next.remove();
                  }
                },
              },
              {
                key: 'replace',
                value: function replace(target) {
                  _get(
                    CodeBlock.prototype.__proto__ ||
                      Object.getPrototypeOf(CodeBlock.prototype),
                    'replace',
                    this,
                  ).call(this, target);
                  [].slice
                    .call(this.domNode.querySelectorAll('*'))
                    .forEach(function (node) {
                      var blot = _parchment2.default.find(node);
                      if (blot == null) {
                        node.parentNode.removeChild(node);
                      } else if (blot instanceof _parchment2.default.Embed) {
                        blot.remove();
                      } else {
                        blot.unwrap();
                      }
                    });
                },
              },
            ],
            [
              {
                key: 'create',
                value: function create(value) {
                  var domNode = _get(
                    CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock),
                    'create',
                    this,
                  ).call(this, value);
                  domNode.setAttribute('spellcheck', false);
                  return domNode;
                },
              },
              {
                key: 'formats',
                value: function formats() {
                  return true;
                },
              },
            ],
          );

          return CodeBlock;
        })(_block2.default);

        CodeBlock.blotName = 'code-block';
        CodeBlock.tagName = 'PRE';
        CodeBlock.TAB = '  ';

        exports.Code = Code;
        exports.default = CodeBlock;

        /***/
      },
      /* 14 */
      /***/ function (module, exports, __nested_webpack_require_117162__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _quillDelta = __nested_webpack_require_117162__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _op = __nested_webpack_require_117162__(20);

        var _op2 = _interopRequireDefault(_op);

        var _parchment = __nested_webpack_require_117162__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _code = __nested_webpack_require_117162__(13);

        var _code2 = _interopRequireDefault(_code);

        var _cursor = __nested_webpack_require_117162__(24);

        var _cursor2 = _interopRequireDefault(_cursor);

        var _block = __nested_webpack_require_117162__(4);

        var _block2 = _interopRequireDefault(_block);

        var _break = __nested_webpack_require_117162__(16);

        var _break2 = _interopRequireDefault(_break);

        var _clone = __nested_webpack_require_117162__(21);

        var _clone2 = _interopRequireDefault(_clone);

        var _deepEqual = __nested_webpack_require_117162__(11);

        var _deepEqual2 = _interopRequireDefault(_deepEqual);

        var _extend = __nested_webpack_require_117162__(3);

        var _extend2 = _interopRequireDefault(_extend);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var ASCII = /^[ -~]*$/;

        var Editor = (function () {
          function Editor(scroll) {
            _classCallCheck(this, Editor);

            this.scroll = scroll;
            this.delta = this.getDelta();
          }

          _createClass(Editor, [
            {
              key: 'applyDelta',
              value: function applyDelta(delta) {
                var _this = this;

                var consumeNextNewline = false;
                this.scroll.update();
                var scrollLength = this.scroll.length();
                this.scroll.batchStart();
                delta = normalizeDelta(delta);
                delta.reduce(function (index, op) {
                  var length = op.retain || op.delete || op.insert.length || 1;
                  var attributes = op.attributes || {};
                  if (op.insert != null) {
                    if (typeof op.insert === 'string') {
                      var text = op.insert;
                      if (text.endsWith('\n') && consumeNextNewline) {
                        consumeNextNewline = false;
                        text = text.slice(0, -1);
                      }
                      if (index >= scrollLength && !text.endsWith('\n')) {
                        consumeNextNewline = true;
                      }
                      _this.scroll.insertAt(index, text);

                      var _scroll$line = _this.scroll.line(index),
                        _scroll$line2 = _slicedToArray(_scroll$line, 2),
                        line = _scroll$line2[0],
                        offset = _scroll$line2[1];

                      var formats = (0, _extend2.default)(
                        {},
                        (0, _block.bubbleFormats)(line),
                      );
                      if (line instanceof _block2.default) {
                        var _line$descendant = line.descendant(
                            _parchment2.default.Leaf,
                            offset,
                          ),
                          _line$descendant2 = _slicedToArray(
                            _line$descendant,
                            1,
                          ),
                          leaf = _line$descendant2[0];

                        formats = (0, _extend2.default)(
                          formats,
                          (0, _block.bubbleFormats)(leaf),
                        );
                      }
                      attributes =
                        _op2.default.attributes.diff(formats, attributes) || {};
                    } else if (_typeof(op.insert) === 'object') {
                      var key = Object.keys(op.insert)[0]; // There should only be one key
                      if (key == null) return index;
                      _this.scroll.insertAt(index, key, op.insert[key]);
                    }
                    scrollLength += length;
                  }
                  Object.keys(attributes).forEach(function (name) {
                    _this.scroll.formatAt(
                      index,
                      length,
                      name,
                      attributes[name],
                    );
                  });
                  return index + length;
                }, 0);
                delta.reduce(function (index, op) {
                  if (typeof op.delete === 'number') {
                    _this.scroll.deleteAt(index, op.delete);
                    return index;
                  }
                  return index + (op.retain || op.insert.length || 1);
                }, 0);
                this.scroll.batchEnd();
                return this.update(delta);
              },
            },
            {
              key: 'deleteText',
              value: function deleteText(index, length) {
                this.scroll.deleteAt(index, length);
                return this.update(
                  new _quillDelta2.default().retain(index).delete(length),
                );
              },
            },
            {
              key: 'formatLine',
              value: function formatLine(index, length) {
                var _this2 = this;

                var formats =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : {};

                this.scroll.update();
                Object.keys(formats).forEach(function (format) {
                  if (
                    _this2.scroll.whitelist != null &&
                    !_this2.scroll.whitelist[format]
                  )
                    return;
                  var lines = _this2.scroll.lines(index, Math.max(length, 1));
                  var lengthRemaining = length;
                  lines.forEach(function (line) {
                    var lineLength = line.length();
                    if (!(line instanceof _code2.default)) {
                      line.format(format, formats[format]);
                    } else {
                      var codeIndex = index - line.offset(_this2.scroll);
                      var codeLength =
                        line.newlineIndex(codeIndex + lengthRemaining) -
                        codeIndex +
                        1;
                      line.formatAt(
                        codeIndex,
                        codeLength,
                        format,
                        formats[format],
                      );
                    }
                    lengthRemaining -= lineLength;
                  });
                });
                this.scroll.optimize();
                return this.update(
                  new _quillDelta2.default()
                    .retain(index)
                    .retain(length, (0, _clone2.default)(formats)),
                );
              },
            },
            {
              key: 'formatText',
              value: function formatText(index, length) {
                var _this3 = this;

                var formats =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : {};

                Object.keys(formats).forEach(function (format) {
                  _this3.scroll.formatAt(
                    index,
                    length,
                    format,
                    formats[format],
                  );
                });
                return this.update(
                  new _quillDelta2.default()
                    .retain(index)
                    .retain(length, (0, _clone2.default)(formats)),
                );
              },
            },
            {
              key: 'getContents',
              value: function getContents(index, length) {
                return this.delta.slice(index, index + length);
              },
            },
            {
              key: 'getDelta',
              value: function getDelta() {
                return this.scroll.lines().reduce(function (delta, line) {
                  return delta.concat(line.delta());
                }, new _quillDelta2.default());
              },
            },
            {
              key: 'getFormat',
              value: function getFormat(index) {
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : 0;

                var lines = [],
                  leaves = [];
                if (length === 0) {
                  this.scroll.path(index).forEach(function (path) {
                    var _path = _slicedToArray(path, 1),
                      blot = _path[0];

                    if (blot instanceof _block2.default) {
                      lines.push(blot);
                    } else if (blot instanceof _parchment2.default.Leaf) {
                      leaves.push(blot);
                    }
                  });
                } else {
                  lines = this.scroll.lines(index, length);
                  leaves = this.scroll.descendants(
                    _parchment2.default.Leaf,
                    index,
                    length,
                  );
                }
                var formatsArr = [lines, leaves].map(function (blots) {
                  if (blots.length === 0) return {};
                  var formats = (0, _block.bubbleFormats)(blots.shift());
                  while (Object.keys(formats).length > 0) {
                    var blot = blots.shift();
                    if (blot == null) return formats;
                    formats = combineFormats(
                      (0, _block.bubbleFormats)(blot),
                      formats,
                    );
                  }
                  return formats;
                });
                return _extend2.default.apply(_extend2.default, formatsArr);
              },
            },
            {
              key: 'getText',
              value: function getText(index, length) {
                return this.getContents(index, length)
                  .filter(function (op) {
                    return typeof op.insert === 'string';
                  })
                  .map(function (op) {
                    return op.insert;
                  })
                  .join('');
              },
            },
            {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                this.scroll.insertAt(index, embed, value);
                return this.update(
                  new _quillDelta2.default()
                    .retain(index)
                    .insert(_defineProperty({}, embed, value)),
                );
              },
            },
            {
              key: 'insertText',
              value: function insertText(index, text) {
                var _this4 = this;

                var formats =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : {};

                text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                this.scroll.insertAt(index, text);
                Object.keys(formats).forEach(function (format) {
                  _this4.scroll.formatAt(
                    index,
                    text.length,
                    format,
                    formats[format],
                  );
                });
                return this.update(
                  new _quillDelta2.default()
                    .retain(index)
                    .insert(text, (0, _clone2.default)(formats)),
                );
              },
            },
            {
              key: 'isBlank',
              value: function isBlank() {
                if (this.scroll.children.length == 0) return true;
                if (this.scroll.children.length > 1) return false;
                var block = this.scroll.children.head;
                if (block.statics.blotName !== _block2.default.blotName)
                  return false;
                if (block.children.length > 1) return false;
                return block.children.head instanceof _break2.default;
              },
            },
            {
              key: 'removeFormat',
              value: function removeFormat(index, length) {
                var text = this.getText(index, length);

                var _scroll$line3 = this.scroll.line(index + length),
                  _scroll$line4 = _slicedToArray(_scroll$line3, 2),
                  line = _scroll$line4[0],
                  offset = _scroll$line4[1];

                var suffixLength = 0,
                  suffix = new _quillDelta2.default();
                if (line != null) {
                  if (!(line instanceof _code2.default)) {
                    suffixLength = line.length() - offset;
                  } else {
                    suffixLength = line.newlineIndex(offset) - offset + 1;
                  }
                  suffix = line
                    .delta()
                    .slice(offset, offset + suffixLength - 1)
                    .insert('\n');
                }
                var contents = this.getContents(index, length + suffixLength);
                var diff = contents.diff(
                  new _quillDelta2.default().insert(text).concat(suffix),
                );
                var delta = new _quillDelta2.default()
                  .retain(index)
                  .concat(diff);
                return this.applyDelta(delta);
              },
            },
            {
              key: 'update',
              value: function update(change) {
                var mutations =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : [];
                var cursorIndex =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : undefined;

                var oldDelta = this.delta;
                if (
                  mutations.length === 1 &&
                  mutations[0].type === 'characterData' &&
                  mutations[0].target.data.match(ASCII) &&
                  _parchment2.default.find(mutations[0].target)
                ) {
                  // Optimization for character changes
                  var textBlot = _parchment2.default.find(mutations[0].target);
                  var formats = (0, _block.bubbleFormats)(textBlot);
                  var index = textBlot.offset(this.scroll);
                  var oldValue = mutations[0].oldValue.replace(
                    _cursor2.default.CONTENTS,
                    '',
                  );
                  var oldText = new _quillDelta2.default().insert(oldValue);
                  var newText = new _quillDelta2.default().insert(
                    textBlot.value(),
                  );
                  var diffDelta = new _quillDelta2.default()
                    .retain(index)
                    .concat(oldText.diff(newText, cursorIndex));
                  change = diffDelta.reduce(function (delta, op) {
                    if (op.insert) {
                      return delta.insert(op.insert, formats);
                    } else {
                      return delta.push(op);
                    }
                  }, new _quillDelta2.default());
                  this.delta = oldDelta.compose(change);
                } else {
                  this.delta = this.getDelta();
                  if (
                    !change ||
                    !(0, _deepEqual2.default)(
                      oldDelta.compose(change),
                      this.delta,
                    )
                  ) {
                    change = oldDelta.diff(this.delta, cursorIndex);
                  }
                }
                return change;
              },
            },
          ]);

          return Editor;
        })();

        function combineFormats(formats, combined) {
          return Object.keys(combined).reduce(function (merged, name) {
            if (formats[name] == null) return merged;
            if (combined[name] === formats[name]) {
              merged[name] = combined[name];
            } else if (Array.isArray(combined[name])) {
              if (combined[name].indexOf(formats[name]) < 0) {
                merged[name] = combined[name].concat([formats[name]]);
              }
            } else {
              merged[name] = [combined[name], formats[name]];
            }
            return merged;
          }, {});
        }

        function normalizeDelta(delta) {
          return delta.reduce(function (delta, op) {
            if (op.insert === 1) {
              var attributes = (0, _clone2.default)(op.attributes);
              delete attributes['image'];
              return delta.insert({image: op.attributes.image}, attributes);
            }
            if (
              op.attributes != null &&
              (op.attributes.list === true || op.attributes.bullet === true)
            ) {
              op = (0, _clone2.default)(op);
              if (op.attributes.list) {
                op.attributes.list = 'ordered';
              } else {
                op.attributes.list = 'bullet';
                delete op.attributes.bullet;
              }
            }
            if (typeof op.insert === 'string') {
              var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
              return delta.insert(text, op.attributes);
            }
            return delta.push(op);
          }, new _quillDelta2.default());
        }

        exports.default = Editor;

        /***/
      },
      /* 15 */
      /***/ function (module, exports, __nested_webpack_require_138197__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.Range = undefined;

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _parchment = __nested_webpack_require_138197__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _clone = __nested_webpack_require_138197__(21);

        var _clone2 = _interopRequireDefault(_clone);

        var _deepEqual = __nested_webpack_require_138197__(11);

        var _deepEqual2 = _interopRequireDefault(_deepEqual);

        var _emitter3 = __nested_webpack_require_138197__(8);

        var _emitter4 = _interopRequireDefault(_emitter3);

        var _logger = __nested_webpack_require_138197__(10);

        var _logger2 = _interopRequireDefault(_logger);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _toConsumableArray(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }
            return arr2;
          } else {
            return Array.from(arr);
          }
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var debug = (0, _logger2.default)('quill:selection');

        var Range = function Range(index) {
          var length =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : 0;

          _classCallCheck(this, Range);

          this.index = index;
          this.length = length;
        };

        var Selection = (function () {
          function Selection(scroll, emitter) {
            var _this = this;

            _classCallCheck(this, Selection);

            this.emitter = emitter;
            this.scroll = scroll;
            this.composing = false;
            this.mouseDown = false;
            this.root = this.scroll.domNode;
            this.cursor = _parchment2.default.create('cursor', this);
            // savedRange is last non-null range
            this.lastRange = this.savedRange = new Range(0, 0);
            this.handleComposition();
            this.handleDragging();
            this.emitter.listenDOM('selectionchange', document, function () {
              if (!_this.mouseDown) {
                setTimeout(
                  _this.update.bind(_this, _emitter4.default.sources.USER),
                  1,
                );
              }
            });
            this.emitter.on(
              _emitter4.default.events.EDITOR_CHANGE,
              function (type, delta) {
                if (
                  type === _emitter4.default.events.TEXT_CHANGE &&
                  delta.length() > 0
                ) {
                  _this.update(_emitter4.default.sources.SILENT);
                }
              },
            );
            this.emitter.on(
              _emitter4.default.events.SCROLL_BEFORE_UPDATE,
              function () {
                if (!_this.hasFocus()) return;
                var native = _this.getNativeRange();
                if (native == null) return;
                if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
                // TODO unclear if this has negative side effects
                _this.emitter.once(
                  _emitter4.default.events.SCROLL_UPDATE,
                  function () {
                    try {
                      _this.setNativeRange(
                        native.start.node,
                        native.start.offset,
                        native.end.node,
                        native.end.offset,
                      );
                    } catch (ignored) {}
                  },
                );
              },
            );
            this.emitter.on(
              _emitter4.default.events.SCROLL_OPTIMIZE,
              function (mutations, context) {
                if (context.range) {
                  var _context$range = context.range,
                    startNode = _context$range.startNode,
                    startOffset = _context$range.startOffset,
                    endNode = _context$range.endNode,
                    endOffset = _context$range.endOffset;

                  _this.setNativeRange(
                    startNode,
                    startOffset,
                    endNode,
                    endOffset,
                  );
                }
              },
            );
            this.update(_emitter4.default.sources.SILENT);
          }

          _createClass(Selection, [
            {
              key: 'handleComposition',
              value: function handleComposition() {
                var _this2 = this;

                this.root.addEventListener('compositionstart', function () {
                  _this2.composing = true;
                });
                this.root.addEventListener('compositionend', function () {
                  _this2.composing = false;
                  if (_this2.cursor.parent) {
                    var range = _this2.cursor.restore();
                    if (!range) return;
                    setTimeout(function () {
                      _this2.setNativeRange(
                        range.startNode,
                        range.startOffset,
                        range.endNode,
                        range.endOffset,
                      );
                    }, 1);
                  }
                });
              },
            },
            {
              key: 'handleDragging',
              value: function handleDragging() {
                var _this3 = this;

                this.emitter.listenDOM('mousedown', document.body, function () {
                  _this3.mouseDown = true;
                });
                this.emitter.listenDOM('mouseup', document.body, function () {
                  _this3.mouseDown = false;
                  _this3.update(_emitter4.default.sources.USER);
                });
              },
            },
            {
              key: 'focus',
              value: function focus() {
                if (this.hasFocus()) return;
                this.root.focus();
                this.setRange(this.savedRange);
              },
            },
            {
              key: 'format',
              value: function format(_format, value) {
                if (
                  this.scroll.whitelist != null &&
                  !this.scroll.whitelist[_format]
                )
                  return;
                this.scroll.update();
                var nativeRange = this.getNativeRange();
                if (
                  nativeRange == null ||
                  !nativeRange.native.collapsed ||
                  _parchment2.default.query(
                    _format,
                    _parchment2.default.Scope.BLOCK,
                  )
                )
                  return;
                if (nativeRange.start.node !== this.cursor.textNode) {
                  var blot = _parchment2.default.find(
                    nativeRange.start.node,
                    false,
                  );
                  if (blot == null) return;
                  // TODO Give blot ability to not split
                  if (blot instanceof _parchment2.default.Leaf) {
                    var after = blot.split(nativeRange.start.offset);
                    blot.parent.insertBefore(this.cursor, after);
                  } else {
                    blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
                  }
                  this.cursor.attach();
                }
                this.cursor.format(_format, value);
                this.scroll.optimize();
                this.setNativeRange(
                  this.cursor.textNode,
                  this.cursor.textNode.data.length,
                );
                this.update();
              },
            },
            {
              key: 'getBounds',
              value: function getBounds(index) {
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : 0;

                var scrollLength = this.scroll.length();
                index = Math.min(index, scrollLength - 1);
                length = Math.min(index + length, scrollLength - 1) - index;
                var node = void 0,
                  _scroll$leaf = this.scroll.leaf(index),
                  _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
                  leaf = _scroll$leaf2[0],
                  offset = _scroll$leaf2[1];
                if (leaf == null) return null;

                var _leaf$position = leaf.position(offset, true);

                var _leaf$position2 = _slicedToArray(_leaf$position, 2);

                node = _leaf$position2[0];
                offset = _leaf$position2[1];

                var range = document.createRange();
                if (length > 0) {
                  range.setStart(node, offset);

                  var _scroll$leaf3 = this.scroll.leaf(index + length);

                  var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

                  leaf = _scroll$leaf4[0];
                  offset = _scroll$leaf4[1];

                  if (leaf == null) return null;

                  var _leaf$position3 = leaf.position(offset, true);

                  var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

                  node = _leaf$position4[0];
                  offset = _leaf$position4[1];

                  range.setEnd(node, offset);
                  return range.getBoundingClientRect();
                } else {
                  var side = 'left';
                  var rect = void 0;
                  if (node instanceof Text) {
                    if (offset < node.data.length) {
                      range.setStart(node, offset);
                      range.setEnd(node, offset + 1);
                    } else {
                      range.setStart(node, offset - 1);
                      range.setEnd(node, offset);
                      side = 'right';
                    }
                    rect = range.getBoundingClientRect();
                  } else {
                    rect = leaf.domNode.getBoundingClientRect();
                    if (offset > 0) side = 'right';
                  }
                  return {
                    bottom: rect.top + rect.height,
                    height: rect.height,
                    left: rect[side],
                    right: rect[side],
                    top: rect.top,
                    width: 0,
                  };
                }
              },
            },
            {
              key: 'getNativeRange',
              value: function getNativeRange() {
                var selection = document.getSelection();
                if (selection == null || selection.rangeCount <= 0) return null;
                var nativeRange = selection.getRangeAt(0);
                if (nativeRange == null) return null;
                var range = this.normalizeNative(nativeRange);
                debug.info('getNativeRange', range);
                return range;
              },
            },
            {
              key: 'getRange',
              value: function getRange() {
                var normalized = this.getNativeRange();
                if (normalized == null) return [null, null];
                var range = this.normalizedToRange(normalized);
                return [range, normalized];
              },
            },
            {
              key: 'hasFocus',
              value: function hasFocus() {
                return document.activeElement === this.root;
              },
            },
            {
              key: 'normalizedToRange',
              value: function normalizedToRange(range) {
                var _this4 = this;

                var positions = [[range.start.node, range.start.offset]];
                if (!range.native.collapsed) {
                  positions.push([range.end.node, range.end.offset]);
                }
                var indexes = positions.map(function (position) {
                  var _position = _slicedToArray(position, 2),
                    node = _position[0],
                    offset = _position[1];

                  var blot = _parchment2.default.find(node, true);
                  var index = blot.offset(_this4.scroll);
                  if (offset === 0) {
                    return index;
                  } else if (blot instanceof _parchment2.default.Container) {
                    return index + blot.length();
                  } else {
                    return index + blot.index(node, offset);
                  }
                });
                var end = Math.min(
                  Math.max.apply(Math, _toConsumableArray(indexes)),
                  this.scroll.length() - 1,
                );
                var start = Math.min.apply(
                  Math,
                  [end].concat(_toConsumableArray(indexes)),
                );
                return new Range(start, end - start);
              },
            },
            {
              key: 'normalizeNative',
              value: function normalizeNative(nativeRange) {
                if (
                  !contains(this.root, nativeRange.startContainer) ||
                  (!nativeRange.collapsed &&
                    !contains(this.root, nativeRange.endContainer))
                ) {
                  return null;
                }
                var range = {
                  start: {
                    node: nativeRange.startContainer,
                    offset: nativeRange.startOffset,
                  },
                  end: {
                    node: nativeRange.endContainer,
                    offset: nativeRange.endOffset,
                  },
                  native: nativeRange,
                };
                [range.start, range.end].forEach(function (position) {
                  var node = position.node,
                    offset = position.offset;
                  while (
                    !(node instanceof Text) &&
                    node.childNodes.length > 0
                  ) {
                    if (node.childNodes.length > offset) {
                      node = node.childNodes[offset];
                      offset = 0;
                    } else if (node.childNodes.length === offset) {
                      node = node.lastChild;
                      offset =
                        node instanceof Text
                          ? node.data.length
                          : node.childNodes.length + 1;
                    } else {
                      break;
                    }
                  }
                  (position.node = node), (position.offset = offset);
                });
                return range;
              },
            },
            {
              key: 'rangeToNative',
              value: function rangeToNative(range) {
                var _this5 = this;

                var indexes = range.collapsed
                  ? [range.index]
                  : [range.index, range.index + range.length];
                var args = [];
                var scrollLength = this.scroll.length();
                indexes.forEach(function (index, i) {
                  index = Math.min(scrollLength - 1, index);
                  var node = void 0,
                    _scroll$leaf5 = _this5.scroll.leaf(index),
                    _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
                    leaf = _scroll$leaf6[0],
                    offset = _scroll$leaf6[1];
                  var _leaf$position5 = leaf.position(offset, i !== 0);

                  var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

                  node = _leaf$position6[0];
                  offset = _leaf$position6[1];

                  args.push(node, offset);
                });
                if (args.length < 2) {
                  args = args.concat(args);
                }
                return args;
              },
            },
            {
              key: 'scrollIntoView',
              value: function scrollIntoView(scrollingContainer) {
                var range = this.lastRange;
                if (range == null) return;
                var bounds = this.getBounds(range.index, range.length);
                if (bounds == null) return;
                var limit = this.scroll.length() - 1;

                var _scroll$line = this.scroll.line(
                    Math.min(range.index, limit),
                  ),
                  _scroll$line2 = _slicedToArray(_scroll$line, 1),
                  first = _scroll$line2[0];

                var last = first;
                if (range.length > 0) {
                  var _scroll$line3 = this.scroll.line(
                    Math.min(range.index + range.length, limit),
                  );

                  var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

                  last = _scroll$line4[0];
                }
                if (first == null || last == null) return;
                var scrollBounds = scrollingContainer.getBoundingClientRect();
                if (bounds.top < scrollBounds.top) {
                  scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                } else if (bounds.bottom > scrollBounds.bottom) {
                  scrollingContainer.scrollTop +=
                    bounds.bottom - scrollBounds.bottom;
                }
              },
            },
            {
              key: 'setNativeRange',
              value: function setNativeRange(startNode, startOffset) {
                var endNode =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : startNode;
                var endOffset =
                  arguments.length > 3 && arguments[3] !== undefined
                    ? arguments[3]
                    : startOffset;
                var force =
                  arguments.length > 4 && arguments[4] !== undefined
                    ? arguments[4]
                    : false;

                debug.info(
                  'setNativeRange',
                  startNode,
                  startOffset,
                  endNode,
                  endOffset,
                );
                if (
                  startNode != null &&
                  (this.root.parentNode == null ||
                    startNode.parentNode == null ||
                    endNode.parentNode == null)
                ) {
                  return;
                }
                var selection = document.getSelection();
                if (selection == null) return;
                if (startNode != null) {
                  if (!this.hasFocus()) this.root.focus();
                  var native = (this.getNativeRange() || {}).native;
                  if (
                    native == null ||
                    force ||
                    startNode !== native.startContainer ||
                    startOffset !== native.startOffset ||
                    endNode !== native.endContainer ||
                    endOffset !== native.endOffset
                  ) {
                    if (startNode.tagName == 'BR') {
                      startOffset = [].indexOf.call(
                        startNode.parentNode.childNodes,
                        startNode,
                      );
                      startNode = startNode.parentNode;
                    }
                    if (endNode.tagName == 'BR') {
                      endOffset = [].indexOf.call(
                        endNode.parentNode.childNodes,
                        endNode,
                      );
                      endNode = endNode.parentNode;
                    }
                    var range = document.createRange();
                    range.setStart(startNode, startOffset);
                    range.setEnd(endNode, endOffset);
                    selection.removeAllRanges();
                    selection.addRange(range);
                  }
                } else {
                  selection.removeAllRanges();
                  this.root.blur();
                  document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
                }
              },
            },
            {
              key: 'setRange',
              value: function setRange(range) {
                var force =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : false;
                var source =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : _emitter4.default.sources.API;

                if (typeof force === 'string') {
                  source = force;
                  force = false;
                }
                debug.info('setRange', range);
                if (range != null) {
                  var args = this.rangeToNative(range);
                  this.setNativeRange.apply(
                    this,
                    _toConsumableArray(args).concat([force]),
                  );
                } else {
                  this.setNativeRange(null);
                }
                this.update(source);
              },
            },
            {
              key: 'update',
              value: function update() {
                var source =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : _emitter4.default.sources.USER;

                var oldRange = this.lastRange;

                var _getRange = this.getRange(),
                  _getRange2 = _slicedToArray(_getRange, 2),
                  lastRange = _getRange2[0],
                  nativeRange = _getRange2[1];

                this.lastRange = lastRange;
                if (this.lastRange != null) {
                  this.savedRange = this.lastRange;
                }
                if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                  var _emitter;

                  if (
                    !this.composing &&
                    nativeRange != null &&
                    nativeRange.native.collapsed &&
                    nativeRange.start.node !== this.cursor.textNode
                  ) {
                    this.cursor.restore();
                  }
                  var args = [
                    _emitter4.default.events.SELECTION_CHANGE,
                    (0, _clone2.default)(this.lastRange),
                    (0, _clone2.default)(oldRange),
                    source,
                  ];
                  (_emitter = this.emitter).emit.apply(
                    _emitter,
                    [_emitter4.default.events.EDITOR_CHANGE].concat(args),
                  );
                  if (source !== _emitter4.default.sources.SILENT) {
                    var _emitter2;

                    (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                  }
                }
              },
            },
          ]);

          return Selection;
        })();

        function contains(parent, descendant) {
          try {
            // Firefox inserts inaccessible nodes around video elements
            descendant.parentNode;
          } catch (e) {
            return false;
          }
          // IE11 has bug with Text nodes
          // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
          if (descendant instanceof Text) {
            descendant = descendant.parentNode;
          }
          return parent.contains(descendant);
        }

        exports.Range = Range;
        exports.default = Selection;

        /***/
      },
      /* 16 */
      /***/ function (module, exports, __nested_webpack_require_164358__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_164358__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Break = (function (_Parchment$Embed) {
          _inherits(Break, _Parchment$Embed);

          function Break() {
            _classCallCheck(this, Break);

            return _possibleConstructorReturn(
              this,
              (Break.__proto__ || Object.getPrototypeOf(Break)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Break,
            [
              {
                key: 'insertInto',
                value: function insertInto(parent, ref) {
                  if (parent.children.length === 0) {
                    _get(
                      Break.prototype.__proto__ ||
                        Object.getPrototypeOf(Break.prototype),
                      'insertInto',
                      this,
                    ).call(this, parent, ref);
                  } else {
                    this.remove();
                  }
                },
              },
              {
                key: 'length',
                value: function length() {
                  return 0;
                },
              },
              {
                key: 'value',
                value: function value() {
                  return '';
                },
              },
            ],
            [
              {
                key: 'value',
                value: function value() {
                  return undefined;
                },
              },
            ],
          );

          return Break;
        })(_parchment2.default.Embed);

        Break.blotName = 'break';
        Break.tagName = 'BR';

        exports.default = Break;

        /***/
      },
      /* 17 */
      /***/ function (module, exports, __nested_webpack_require_169321__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var linked_list_1 = __nested_webpack_require_169321__(44);
        var shadow_1 = __nested_webpack_require_169321__(30);
        var Registry = __nested_webpack_require_169321__(1);
        var ContainerBlot = /** @class */ (function (_super) {
          __extends(ContainerBlot, _super);
          function ContainerBlot(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.build();
            return _this;
          }
          ContainerBlot.prototype.appendChild = function (other) {
            this.insertBefore(other);
          };
          ContainerBlot.prototype.attach = function () {
            _super.prototype.attach.call(this);
            this.children.forEach(function (child) {
              child.attach();
            });
          };
          ContainerBlot.prototype.build = function () {
            var _this = this;
            this.children = new linked_list_1.default();
            // Need to be reversed for if DOM nodes already in order
            [].slice
              .call(this.domNode.childNodes)
              .reverse()
              .forEach(function (node) {
                try {
                  var child = makeBlot(node);
                  _this.insertBefore(child, _this.children.head || undefined);
                } catch (err) {
                  if (err instanceof Registry.ParchmentError) return;
                  else throw err;
                }
              });
          };
          ContainerBlot.prototype.deleteAt = function (index, length) {
            if (index === 0 && length === this.length()) {
              return this.remove();
            }
            this.children.forEachAt(
              index,
              length,
              function (child, offset, length) {
                child.deleteAt(offset, length);
              },
            );
          };
          ContainerBlot.prototype.descendant = function (criteria, index) {
            var _a = this.children.find(index),
              child = _a[0],
              offset = _a[1];
            if (
              (criteria.blotName == null && criteria(child)) ||
              (criteria.blotName != null && child instanceof criteria)
            ) {
              return [child, offset];
            } else if (child instanceof ContainerBlot) {
              return child.descendant(criteria, offset);
            } else {
              return [null, -1];
            }
          };
          ContainerBlot.prototype.descendants = function (
            criteria,
            index,
            length,
          ) {
            if (index === void 0) {
              index = 0;
            }
            if (length === void 0) {
              length = Number.MAX_VALUE;
            }
            var descendants = [];
            var lengthLeft = length;
            this.children.forEachAt(
              index,
              length,
              function (child, index, length) {
                if (
                  (criteria.blotName == null && criteria(child)) ||
                  (criteria.blotName != null && child instanceof criteria)
                ) {
                  descendants.push(child);
                }
                if (child instanceof ContainerBlot) {
                  descendants = descendants.concat(
                    child.descendants(criteria, index, lengthLeft),
                  );
                }
                lengthLeft -= length;
              },
            );
            return descendants;
          };
          ContainerBlot.prototype.detach = function () {
            this.children.forEach(function (child) {
              child.detach();
            });
            _super.prototype.detach.call(this);
          };
          ContainerBlot.prototype.formatAt = function (
            index,
            length,
            name,
            value,
          ) {
            this.children.forEachAt(
              index,
              length,
              function (child, offset, length) {
                child.formatAt(offset, length, name, value);
              },
            );
          };
          ContainerBlot.prototype.insertAt = function (index, value, def) {
            var _a = this.children.find(index),
              child = _a[0],
              offset = _a[1];
            if (child) {
              child.insertAt(offset, value, def);
            } else {
              var blot =
                def == null
                  ? Registry.create('text', value)
                  : Registry.create(value, def);
              this.appendChild(blot);
            }
          };
          ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
            if (
              this.statics.allowedChildren != null &&
              !this.statics.allowedChildren.some(function (child) {
                return childBlot instanceof child;
              })
            ) {
              throw new Registry.ParchmentError(
                'Cannot insert ' +
                  childBlot.statics.blotName +
                  ' into ' +
                  this.statics.blotName,
              );
            }
            childBlot.insertInto(this, refBlot);
          };
          ContainerBlot.prototype.length = function () {
            return this.children.reduce(function (memo, child) {
              return memo + child.length();
            }, 0);
          };
          ContainerBlot.prototype.moveChildren = function (
            targetParent,
            refNode,
          ) {
            this.children.forEach(function (child) {
              targetParent.insertBefore(child, refNode);
            });
          };
          ContainerBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            if (this.children.length === 0) {
              if (this.statics.defaultChild != null) {
                var child = Registry.create(this.statics.defaultChild);
                this.appendChild(child);
                child.optimize(context);
              } else {
                this.remove();
              }
            }
          };
          ContainerBlot.prototype.path = function (index, inclusive) {
            if (inclusive === void 0) {
              inclusive = false;
            }
            var _a = this.children.find(index, inclusive),
              child = _a[0],
              offset = _a[1];
            var position = [[this, index]];
            if (child instanceof ContainerBlot) {
              return position.concat(child.path(offset, inclusive));
            } else if (child != null) {
              position.push([child, offset]);
            }
            return position;
          };
          ContainerBlot.prototype.removeChild = function (child) {
            this.children.remove(child);
          };
          ContainerBlot.prototype.replace = function (target) {
            if (target instanceof ContainerBlot) {
              target.moveChildren(this);
            }
            _super.prototype.replace.call(this, target);
          };
          ContainerBlot.prototype.split = function (index, force) {
            if (force === void 0) {
              force = false;
            }
            if (!force) {
              if (index === 0) return this;
              if (index === this.length()) return this.next;
            }
            var after = this.clone();
            this.parent.insertBefore(after, this.next);
            this.children.forEachAt(
              index,
              this.length(),
              function (child, offset, length) {
                child = child.split(offset, force);
                after.appendChild(child);
              },
            );
            return after;
          };
          ContainerBlot.prototype.unwrap = function () {
            this.moveChildren(this.parent, this.next);
            this.remove();
          };
          ContainerBlot.prototype.update = function (mutations, context) {
            var _this = this;
            var addedNodes = [];
            var removedNodes = [];
            mutations.forEach(function (mutation) {
              if (
                mutation.target === _this.domNode &&
                mutation.type === 'childList'
              ) {
                addedNodes.push.apply(addedNodes, mutation.addedNodes);
                removedNodes.push.apply(removedNodes, mutation.removedNodes);
              }
            });
            removedNodes.forEach(function (node) {
              // Check node has actually been removed
              // One exception is Chrome does not immediately remove IFRAMEs
              // from DOM but MutationRecord is correct in its reported removal
              if (
                node.parentNode != null &&
                // @ts-ignore
                node.tagName !== 'IFRAME' &&
                document.body.compareDocumentPosition(node) &
                  Node.DOCUMENT_POSITION_CONTAINED_BY
              ) {
                return;
              }
              var blot = Registry.find(node);
              if (blot == null) return;
              if (
                blot.domNode.parentNode == null ||
                blot.domNode.parentNode === _this.domNode
              ) {
                blot.detach();
              }
            });
            addedNodes
              .filter(function (node) {
                return node.parentNode == _this.domNode;
              })
              .sort(function (a, b) {
                if (a === b) return 0;
                if (
                  a.compareDocumentPosition(b) &
                  Node.DOCUMENT_POSITION_FOLLOWING
                ) {
                  return 1;
                }
                return -1;
              })
              .forEach(function (node) {
                var refBlot = null;
                if (node.nextSibling != null) {
                  refBlot = Registry.find(node.nextSibling);
                }
                var blot = makeBlot(node);
                if (blot.next != refBlot || blot.next == null) {
                  if (blot.parent != null) {
                    blot.parent.removeChild(_this);
                  }
                  _this.insertBefore(blot, refBlot || undefined);
                }
              });
          };
          return ContainerBlot;
        })(shadow_1.default);
        function makeBlot(node) {
          var blot = Registry.find(node);
          if (blot == null) {
            try {
              blot = Registry.create(node);
            } catch (e) {
              blot = Registry.create(Registry.Scope.INLINE);
              [].slice.call(node.childNodes).forEach(function (child) {
                // @ts-ignore
                blot.domNode.appendChild(child);
              });
              if (node.parentNode) {
                node.parentNode.replaceChild(blot.domNode, node);
              }
              blot.attach();
            }
          }
          return blot;
        }
        exports.default = ContainerBlot;

        /***/
      },
      /* 18 */
      /***/ function (module, exports, __nested_webpack_require_181313__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var attributor_1 = __nested_webpack_require_181313__(12);
        var store_1 = __nested_webpack_require_181313__(31);
        var container_1 = __nested_webpack_require_181313__(17);
        var Registry = __nested_webpack_require_181313__(1);
        var FormatBlot = /** @class */ (function (_super) {
          __extends(FormatBlot, _super);
          function FormatBlot(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.attributes = new store_1.default(_this.domNode);
            return _this;
          }
          FormatBlot.formats = function (domNode) {
            if (typeof this.tagName === 'string') {
              return true;
            } else if (Array.isArray(this.tagName)) {
              return domNode.tagName.toLowerCase();
            }
            return undefined;
          };
          FormatBlot.prototype.format = function (name, value) {
            var format = Registry.query(name);
            if (format instanceof attributor_1.default) {
              this.attributes.attribute(format, value);
            } else if (value) {
              if (
                format != null &&
                (name !== this.statics.blotName ||
                  this.formats()[name] !== value)
              ) {
                this.replaceWith(name, value);
              }
            }
          };
          FormatBlot.prototype.formats = function () {
            var formats = this.attributes.values();
            var format = this.statics.formats(this.domNode);
            if (format != null) {
              formats[this.statics.blotName] = format;
            }
            return formats;
          };
          FormatBlot.prototype.replaceWith = function (name, value) {
            var replacement = _super.prototype.replaceWith.call(
              this,
              name,
              value,
            );
            this.attributes.copy(replacement);
            return replacement;
          };
          FormatBlot.prototype.update = function (mutations, context) {
            var _this = this;
            _super.prototype.update.call(this, mutations, context);
            if (
              mutations.some(function (mutation) {
                return (
                  mutation.target === _this.domNode &&
                  mutation.type === 'attributes'
                );
              })
            ) {
              this.attributes.build();
            }
          };
          FormatBlot.prototype.wrap = function (name, value) {
            var wrapper = _super.prototype.wrap.call(this, name, value);
            if (
              wrapper instanceof FormatBlot &&
              wrapper.statics.scope === this.statics.scope
            ) {
              this.attributes.move(wrapper);
            }
            return wrapper;
          };
          return FormatBlot;
        })(container_1.default);
        exports.default = FormatBlot;

        /***/
      },
      /* 19 */
      /***/ function (module, exports, __nested_webpack_require_185160__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var shadow_1 = __nested_webpack_require_185160__(30);
        var Registry = __nested_webpack_require_185160__(1);
        var LeafBlot = /** @class */ (function (_super) {
          __extends(LeafBlot, _super);
          function LeafBlot() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          LeafBlot.value = function (domNode) {
            return true;
          };
          LeafBlot.prototype.index = function (node, offset) {
            if (
              this.domNode === node ||
              this.domNode.compareDocumentPosition(node) &
                Node.DOCUMENT_POSITION_CONTAINED_BY
            ) {
              return Math.min(offset, 1);
            }
            return -1;
          };
          LeafBlot.prototype.position = function (index, inclusive) {
            var offset = [].indexOf.call(
              this.parent.domNode.childNodes,
              this.domNode,
            );
            if (index > 0) offset += 1;
            return [this.parent.domNode, offset];
          };
          LeafBlot.prototype.value = function () {
            return (
              (_a = {}),
              (_a[this.statics.blotName] =
                this.statics.value(this.domNode) || true),
              _a
            );
            var _a;
          };
          LeafBlot.scope = Registry.Scope.INLINE_BLOT;
          return LeafBlot;
        })(shadow_1.default);
        exports.default = LeafBlot;

        /***/
      },
      /* 20 */
      /***/ function (module, exports, __nested_webpack_require_187569__) {
        var equal = __nested_webpack_require_187569__(11);
        var extend = __nested_webpack_require_187569__(3);

        var lib = {
          attributes: {
            compose: function (a, b, keepNull) {
              if (typeof a !== 'object') a = {};
              if (typeof b !== 'object') b = {};
              var attributes = extend(true, {}, b);
              if (!keepNull) {
                attributes = Object.keys(attributes).reduce(function (
                  copy,
                  key,
                ) {
                  if (attributes[key] != null) {
                    copy[key] = attributes[key];
                  }
                  return copy;
                },
                {});
              }
              for (var key in a) {
                if (a[key] !== undefined && b[key] === undefined) {
                  attributes[key] = a[key];
                }
              }
              return Object.keys(attributes).length > 0
                ? attributes
                : undefined;
            },

            diff: function (a, b) {
              if (typeof a !== 'object') a = {};
              if (typeof b !== 'object') b = {};
              var attributes = Object.keys(a)
                .concat(Object.keys(b))
                .reduce(function (attributes, key) {
                  if (!equal(a[key], b[key])) {
                    attributes[key] = b[key] === undefined ? null : b[key];
                  }
                  return attributes;
                }, {});
              return Object.keys(attributes).length > 0
                ? attributes
                : undefined;
            },

            transform: function (a, b, priority) {
              if (typeof a !== 'object') return b;
              if (typeof b !== 'object') return undefined;
              if (!priority) return b; // b simply overwrites us without priority
              var attributes = Object.keys(b).reduce(function (
                attributes,
                key,
              ) {
                if (a[key] === undefined) attributes[key] = b[key]; // null is a valid value
                return attributes;
              },
              {});
              return Object.keys(attributes).length > 0
                ? attributes
                : undefined;
            },
          },

          iterator: function (ops) {
            return new Iterator(ops);
          },

          length: function (op) {
            if (typeof op['delete'] === 'number') {
              return op['delete'];
            } else if (typeof op.retain === 'number') {
              return op.retain;
            } else {
              return typeof op.insert === 'string' ? op.insert.length : 1;
            }
          },
        };

        function Iterator(ops) {
          this.ops = ops;
          this.index = 0;
          this.offset = 0;
        }

        Iterator.prototype.hasNext = function () {
          return this.peekLength() < Infinity;
        };

        Iterator.prototype.next = function (length) {
          if (!length) length = Infinity;
          var nextOp = this.ops[this.index];
          if (nextOp) {
            var offset = this.offset;
            var opLength = lib.length(nextOp);
            if (length >= opLength - offset) {
              length = opLength - offset;
              this.index += 1;
              this.offset = 0;
            } else {
              this.offset += length;
            }
            if (typeof nextOp['delete'] === 'number') {
              return {delete: length};
            } else {
              var retOp = {};
              if (nextOp.attributes) {
                retOp.attributes = nextOp.attributes;
              }
              if (typeof nextOp.retain === 'number') {
                retOp.retain = length;
              } else if (typeof nextOp.insert === 'string') {
                retOp.insert = nextOp.insert.substr(offset, length);
              } else {
                // offset should === 0, length should === 1
                retOp.insert = nextOp.insert;
              }
              return retOp;
            }
          } else {
            return {retain: Infinity};
          }
        };

        Iterator.prototype.peek = function () {
          return this.ops[this.index];
        };

        Iterator.prototype.peekLength = function () {
          if (this.ops[this.index]) {
            // Should never return 0 if our index is being managed correctly
            return lib.length(this.ops[this.index]) - this.offset;
          } else {
            return Infinity;
          }
        };

        Iterator.prototype.peekType = function () {
          if (this.ops[this.index]) {
            if (typeof this.ops[this.index]['delete'] === 'number') {
              return 'delete';
            } else if (typeof this.ops[this.index].retain === 'number') {
              return 'retain';
            } else {
              return 'insert';
            }
          }
          return 'retain';
        };

        module.exports = lib;

        /***/
      },
      /* 21 */
      /***/ function (module, exports) {
        var clone = (function () {
          'use strict';

          function _instanceof(obj, type) {
            return type != null && obj instanceof type;
          }

          var nativeMap;
          try {
            nativeMap = Map;
          } catch (_) {
            // maybe a reference error because no `Map`. Give it a dummy value that no
            // value will ever be an instanceof.
            nativeMap = function () {};
          }

          var nativeSet;
          try {
            nativeSet = Set;
          } catch (_) {
            nativeSet = function () {};
          }

          var nativePromise;
          try {
            nativePromise = Promise;
          } catch (_) {
            nativePromise = function () {};
          }

          /**
           * Clones (copies) an Object using deep copying.
           *
           * This function supports circular references by default, but if you are certain
           * there are no circular references in your object, you can save some CPU time
           * by calling clone(obj, false).
           *
           * Caution: if `circular` is false and `parent` contains circular references,
           * your program may enter an infinite loop and crash.
           *
           * @param `parent` - the object to be cloned
           * @param `circular` - set to true if the object to be cloned may contain
           *    circular references. (optional - true by default)
           * @param `depth` - set to a number if the object is only to be cloned to
           *    a particular depth. (optional - defaults to Infinity)
           * @param `prototype` - sets the prototype to be used when cloning an object.
           *    (optional - defaults to parent prototype).
           * @param `includeNonEnumerable` - set to true if the non-enumerable properties
           *    should be cloned as well. Non-enumerable properties on the prototype
           *    chain will be ignored. (optional - false by default)
           */
          function clone(
            parent,
            circular,
            depth,
            prototype,
            includeNonEnumerable,
          ) {
            if (typeof circular === 'object') {
              depth = circular.depth;
              prototype = circular.prototype;
              includeNonEnumerable = circular.includeNonEnumerable;
              circular = circular.circular;
            }
            // maintain two arrays for circular references, where corresponding parents
            // and children have the same index
            var allParents = [];
            var allChildren = [];

            var useBuffer = typeof Buffer != 'undefined';

            if (typeof circular == 'undefined') circular = true;

            if (typeof depth == 'undefined') depth = Infinity;

            // recurse this function so we don't reset allParents and allChildren
            function _clone(parent, depth) {
              // cloning null always returns null
              if (parent === null) return null;

              if (depth === 0) return parent;

              var child;
              var proto;
              if (typeof parent != 'object') {
                return parent;
              }

              if (_instanceof(parent, nativeMap)) {
                child = new nativeMap();
              } else if (_instanceof(parent, nativeSet)) {
                child = new nativeSet();
              } else if (_instanceof(parent, nativePromise)) {
                child = new nativePromise(function (resolve, reject) {
                  parent.then(
                    function (value) {
                      resolve(_clone(value, depth - 1));
                    },
                    function (err) {
                      reject(_clone(err, depth - 1));
                    },
                  );
                });
              } else if (clone.__isArray(parent)) {
                child = [];
              } else if (clone.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
              } else if (clone.__isDate(parent)) {
                child = new Date(parent.getTime());
              } else if (useBuffer && Buffer.isBuffer(parent)) {
                child = new Buffer(parent.length);
                parent.copy(child);
                return child;
              } else if (_instanceof(parent, Error)) {
                child = Object.create(parent);
              } else {
                if (typeof prototype == 'undefined') {
                  proto = Object.getPrototypeOf(parent);
                  child = Object.create(proto);
                } else {
                  child = Object.create(prototype);
                  proto = prototype;
                }
              }

              if (circular) {
                var index = allParents.indexOf(parent);

                if (index != -1) {
                  return allChildren[index];
                }
                allParents.push(parent);
                allChildren.push(child);
              }

              if (_instanceof(parent, nativeMap)) {
                parent.forEach(function (value, key) {
                  var keyChild = _clone(key, depth - 1);
                  var valueChild = _clone(value, depth - 1);
                  child.set(keyChild, valueChild);
                });
              }
              if (_instanceof(parent, nativeSet)) {
                parent.forEach(function (value) {
                  var entryChild = _clone(value, depth - 1);
                  child.add(entryChild);
                });
              }

              for (var i in parent) {
                var attrs;
                if (proto) {
                  attrs = Object.getOwnPropertyDescriptor(proto, i);
                }

                if (attrs && attrs.set == null) {
                  continue;
                }
                child[i] = _clone(parent[i], depth - 1);
              }

              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent);
                for (var i = 0; i < symbols.length; i++) {
                  // Don't need to worry about cloning a symbol because it is a primitive,
                  // like a number or string.
                  var symbol = symbols[i];
                  var descriptor = Object.getOwnPropertyDescriptor(
                    parent,
                    symbol,
                  );
                  if (
                    descriptor &&
                    !descriptor.enumerable &&
                    !includeNonEnumerable
                  ) {
                    continue;
                  }
                  child[symbol] = _clone(parent[symbol], depth - 1);
                  if (!descriptor.enumerable) {
                    Object.defineProperty(child, symbol, {
                      enumerable: false,
                    });
                  }
                }
              }

              if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent);
                for (var i = 0; i < allPropertyNames.length; i++) {
                  var propertyName = allPropertyNames[i];
                  var descriptor = Object.getOwnPropertyDescriptor(
                    parent,
                    propertyName,
                  );
                  if (descriptor && descriptor.enumerable) {
                    continue;
                  }
                  child[propertyName] = _clone(parent[propertyName], depth - 1);
                  Object.defineProperty(child, propertyName, {
                    enumerable: false,
                  });
                }
              }

              return child;
            }

            return _clone(parent, depth);
          }

          /**
           * Simple flat clone using prototype, accepts only objects, usefull for property
           * override on FLAT configuration object (no nested props).
           *
           * USE WITH CAUTION! This may not behave as you wish if you do not know how this
           * works.
           */
          clone.clonePrototype = function clonePrototype(parent) {
            if (parent === null) return null;

            var c = function () {};
            c.prototype = parent;
            return new c();
          };

          // private utility functions

          function __objToStr(o) {
            return Object.prototype.toString.call(o);
          }
          clone.__objToStr = __objToStr;

          function __isDate(o) {
            return typeof o === 'object' && __objToStr(o) === '[object Date]';
          }
          clone.__isDate = __isDate;

          function __isArray(o) {
            return typeof o === 'object' && __objToStr(o) === '[object Array]';
          }
          clone.__isArray = __isArray;

          function __isRegExp(o) {
            return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
          }
          clone.__isRegExp = __isRegExp;

          function __getRegExpFlags(re) {
            var flags = '';
            if (re.global) flags += 'g';
            if (re.ignoreCase) flags += 'i';
            if (re.multiline) flags += 'm';
            return flags;
          }
          clone.__getRegExpFlags = __getRegExpFlags;

          return clone;
        })();

        if (typeof module === 'object' && module.exports) {
          module.exports = clone;
        }

        /***/
      },
      /* 22 */
      /***/ function (module, exports, __nested_webpack_require_202377__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_202377__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _emitter = __nested_webpack_require_202377__(8);

        var _emitter2 = _interopRequireDefault(_emitter);

        var _block = __nested_webpack_require_202377__(4);

        var _block2 = _interopRequireDefault(_block);

        var _break = __nested_webpack_require_202377__(16);

        var _break2 = _interopRequireDefault(_break);

        var _code = __nested_webpack_require_202377__(13);

        var _code2 = _interopRequireDefault(_code);

        var _container = __nested_webpack_require_202377__(25);

        var _container2 = _interopRequireDefault(_container);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        function isLine(blot) {
          return (
            blot instanceof _block2.default || blot instanceof _block.BlockEmbed
          );
        }

        var Scroll = (function (_Parchment$Scroll) {
          _inherits(Scroll, _Parchment$Scroll);

          function Scroll(domNode, config) {
            _classCallCheck(this, Scroll);

            var _this = _possibleConstructorReturn(
              this,
              (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(
                this,
                domNode,
              ),
            );

            _this.emitter = config.emitter;
            if (Array.isArray(config.whitelist)) {
              _this.whitelist = config.whitelist.reduce(function (
                whitelist,
                format,
              ) {
                whitelist[format] = true;
                return whitelist;
              },
              {});
            }
            // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
            _this.domNode.addEventListener('DOMNodeInserted', function () {});
            _this.optimize();
            _this.enable();
            return _this;
          }

          _createClass(Scroll, [
            {
              key: 'batchStart',
              value: function batchStart() {
                this.batch = true;
              },
            },
            {
              key: 'batchEnd',
              value: function batchEnd() {
                this.batch = false;
                this.optimize();
              },
            },
            {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                var _line = this.line(index),
                  _line2 = _slicedToArray(_line, 2),
                  first = _line2[0],
                  offset = _line2[1];

                var _line3 = this.line(index + length),
                  _line4 = _slicedToArray(_line3, 1),
                  last = _line4[0];

                _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'deleteAt',
                  this,
                ).call(this, index, length);
                if (last != null && first !== last && offset > 0) {
                  if (
                    first instanceof _block.BlockEmbed ||
                    last instanceof _block.BlockEmbed
                  ) {
                    this.optimize();
                    return;
                  }
                  if (first instanceof _code2.default) {
                    var newlineIndex = first.newlineIndex(first.length(), true);
                    if (newlineIndex > -1) {
                      first = first.split(newlineIndex + 1);
                      if (first === last) {
                        this.optimize();
                        return;
                      }
                    }
                  } else if (last instanceof _code2.default) {
                    var _newlineIndex = last.newlineIndex(0);
                    if (_newlineIndex > -1) {
                      last.split(_newlineIndex + 1);
                    }
                  }
                  var ref =
                    last.children.head instanceof _break2.default
                      ? null
                      : last.children.head;
                  first.moveChildren(last, ref);
                  first.remove();
                }
                this.optimize();
              },
            },
            {
              key: 'enable',
              value: function enable() {
                var enabled =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : true;

                this.domNode.setAttribute('contenteditable', enabled);
              },
            },
            {
              key: 'formatAt',
              value: function formatAt(index, length, format, value) {
                if (this.whitelist != null && !this.whitelist[format]) return;
                _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'formatAt',
                  this,
                ).call(this, index, length, format, value);
                this.optimize();
              },
            },
            {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (
                  def != null &&
                  this.whitelist != null &&
                  !this.whitelist[value]
                )
                  return;
                if (index >= this.length()) {
                  if (
                    def == null ||
                    _parchment2.default.query(
                      value,
                      _parchment2.default.Scope.BLOCK,
                    ) == null
                  ) {
                    var blot = _parchment2.default.create(
                      this.statics.defaultChild,
                    );
                    this.appendChild(blot);
                    if (def == null && value.endsWith('\n')) {
                      value = value.slice(0, -1);
                    }
                    blot.insertAt(0, value, def);
                  } else {
                    var embed = _parchment2.default.create(value, def);
                    this.appendChild(embed);
                  }
                } else {
                  _get(
                    Scroll.prototype.__proto__ ||
                      Object.getPrototypeOf(Scroll.prototype),
                    'insertAt',
                    this,
                  ).call(this, index, value, def);
                }
                this.optimize();
              },
            },
            {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (
                  blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT
                ) {
                  var wrapper = _parchment2.default.create(
                    this.statics.defaultChild,
                  );
                  wrapper.appendChild(blot);
                  blot = wrapper;
                }
                _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'insertBefore',
                  this,
                ).call(this, blot, ref);
              },
            },
            {
              key: 'leaf',
              value: function leaf(index) {
                return this.path(index).pop() || [null, -1];
              },
            },
            {
              key: 'line',
              value: function line(index) {
                if (index === this.length()) {
                  return this.line(index - 1);
                }
                return this.descendant(isLine, index);
              },
            },
            {
              key: 'lines',
              value: function lines() {
                var index =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : 0;
                var length =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : Number.MAX_VALUE;

                var getLines = function getLines(blot, index, length) {
                  var lines = [],
                    lengthLeft = length;
                  blot.children.forEachAt(
                    index,
                    length,
                    function (child, index, length) {
                      if (isLine(child)) {
                        lines.push(child);
                      } else if (
                        child instanceof _parchment2.default.Container
                      ) {
                        lines = lines.concat(
                          getLines(child, index, lengthLeft),
                        );
                      }
                      lengthLeft -= length;
                    },
                  );
                  return lines;
                };
                return getLines(this, index, length);
              },
            },
            {
              key: 'optimize',
              value: function optimize() {
                var mutations =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : [];
                var context =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : {};

                if (this.batch === true) return;
                _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'optimize',
                  this,
                ).call(this, mutations, context);
                if (mutations.length > 0) {
                  this.emitter.emit(
                    _emitter2.default.events.SCROLL_OPTIMIZE,
                    mutations,
                    context,
                  );
                }
              },
            },
            {
              key: 'path',
              value: function path(index) {
                return _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'path',
                  this,
                )
                  .call(this, index)
                  .slice(1); // Exclude self
              },
            },
            {
              key: 'update',
              value: function update(mutations) {
                if (this.batch === true) return;
                var source = _emitter2.default.sources.USER;
                if (typeof mutations === 'string') {
                  source = mutations;
                }
                if (!Array.isArray(mutations)) {
                  mutations = this.observer.takeRecords();
                }
                if (mutations.length > 0) {
                  this.emitter.emit(
                    _emitter2.default.events.SCROLL_BEFORE_UPDATE,
                    source,
                    mutations,
                  );
                }
                _get(
                  Scroll.prototype.__proto__ ||
                    Object.getPrototypeOf(Scroll.prototype),
                  'update',
                  this,
                ).call(this, mutations.concat([])); // pass copy
                if (mutations.length > 0) {
                  this.emitter.emit(
                    _emitter2.default.events.SCROLL_UPDATE,
                    source,
                    mutations,
                  );
                }
              },
            },
          ]);

          return Scroll;
        })(_parchment2.default.Scroll);

        Scroll.blotName = 'scroll';
        Scroll.className = 'ql-editor';
        Scroll.tagName = 'DIV';
        Scroll.defaultChild = 'block';
        Scroll.allowedChildren = [
          _block2.default,
          _block.BlockEmbed,
          _container2.default,
        ];

        exports.default = Scroll;

        /***/
      },
      /* 23 */
      /***/ function (module, exports, __nested_webpack_require_218690__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.SHORTKEY = exports.default = undefined;

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _clone = __nested_webpack_require_218690__(21);

        var _clone2 = _interopRequireDefault(_clone);

        var _deepEqual = __nested_webpack_require_218690__(11);

        var _deepEqual2 = _interopRequireDefault(_deepEqual);

        var _extend = __nested_webpack_require_218690__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _quillDelta = __nested_webpack_require_218690__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _op = __nested_webpack_require_218690__(20);

        var _op2 = _interopRequireDefault(_op);

        var _parchment = __nested_webpack_require_218690__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_218690__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _logger = __nested_webpack_require_218690__(10);

        var _logger2 = _interopRequireDefault(_logger);

        var _module = __nested_webpack_require_218690__(9);

        var _module2 = _interopRequireDefault(_module);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var debug = (0, _logger2.default)('quill:keyboard');

        var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

        var Keyboard = (function (_Module) {
          _inherits(Keyboard, _Module);

          _createClass(Keyboard, null, [
            {
              key: 'match',
              value: function match(evt, binding) {
                binding = normalize(binding);
                if (
                  ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (
                    key,
                  ) {
                    return !!binding[key] !== evt[key] && binding[key] !== null;
                  })
                ) {
                  return false;
                }
                return binding.key === (evt.which || evt.keyCode);
              },
            },
          ]);

          function Keyboard(quill, options) {
            _classCallCheck(this, Keyboard);

            var _this = _possibleConstructorReturn(
              this,
              (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(
                this,
                quill,
                options,
              ),
            );

            _this.bindings = {};
            Object.keys(_this.options.bindings).forEach(function (name) {
              if (
                name === 'list autofill' &&
                quill.scroll.whitelist != null &&
                !quill.scroll.whitelist['list']
              ) {
                return;
              }
              if (_this.options.bindings[name]) {
                _this.addBinding(_this.options.bindings[name]);
              }
            });
            _this.addBinding(
              {key: Keyboard.keys.ENTER, shiftKey: null},
              handleEnter,
            );
            _this.addBinding(
              {
                key: Keyboard.keys.ENTER,
                metaKey: null,
                ctrlKey: null,
                altKey: null,
              },
              function () {},
            );
            if (/Firefox/i.test(navigator.userAgent)) {
              // Need to handle delete and backspace for Firefox in the general case #1171
              _this.addBinding(
                {key: Keyboard.keys.BACKSPACE},
                {collapsed: true},
                handleBackspace,
              );
              _this.addBinding(
                {key: Keyboard.keys.DELETE},
                {collapsed: true},
                handleDelete,
              );
            } else {
              _this.addBinding(
                {key: Keyboard.keys.BACKSPACE},
                {collapsed: true, prefix: /^.?$/},
                handleBackspace,
              );
              _this.addBinding(
                {key: Keyboard.keys.DELETE},
                {collapsed: true, suffix: /^.?$/},
                handleDelete,
              );
            }
            _this.addBinding(
              {key: Keyboard.keys.BACKSPACE},
              {collapsed: false},
              handleDeleteRange,
            );
            _this.addBinding(
              {key: Keyboard.keys.DELETE},
              {collapsed: false},
              handleDeleteRange,
            );
            _this.addBinding(
              {
                key: Keyboard.keys.BACKSPACE,
                altKey: null,
                ctrlKey: null,
                metaKey: null,
                shiftKey: null,
              },
              {collapsed: true, offset: 0},
              handleBackspace,
            );
            _this.listen();
            return _this;
          }

          _createClass(Keyboard, [
            {
              key: 'addBinding',
              value: function addBinding(key) {
                var context =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : {};
                var handler =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : {};

                var binding = normalize(key);
                if (binding == null || binding.key == null) {
                  return debug.warn(
                    'Attempted to add invalid keyboard binding',
                    binding,
                  );
                }
                if (typeof context === 'function') {
                  context = {handler: context};
                }
                if (typeof handler === 'function') {
                  handler = {handler: handler};
                }
                binding = (0, _extend2.default)(binding, context, handler);
                this.bindings[binding.key] = this.bindings[binding.key] || [];
                this.bindings[binding.key].push(binding);
              },
            },
            {
              key: 'listen',
              value: function listen() {
                var _this2 = this;

                this.quill.root.addEventListener('keydown', function (evt) {
                  if (evt.defaultPrevented) return;
                  var which = evt.which || evt.keyCode;
                  var bindings = (_this2.bindings[which] || []).filter(
                    function (binding) {
                      return Keyboard.match(evt, binding);
                    },
                  );
                  if (bindings.length === 0) return;
                  var range = _this2.quill.getSelection();
                  if (range == null || !_this2.quill.hasFocus()) return;

                  var _quill$getLine = _this2.quill.getLine(range.index),
                    _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
                    line = _quill$getLine2[0],
                    offset = _quill$getLine2[1];

                  var _quill$getLeaf = _this2.quill.getLeaf(range.index),
                    _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
                    leafStart = _quill$getLeaf2[0],
                    offsetStart = _quill$getLeaf2[1];

                  var _ref =
                      range.length === 0
                        ? [leafStart, offsetStart]
                        : _this2.quill.getLeaf(range.index + range.length),
                    _ref2 = _slicedToArray(_ref, 2),
                    leafEnd = _ref2[0],
                    offsetEnd = _ref2[1];

                  var prefixText =
                    leafStart instanceof _parchment2.default.Text
                      ? leafStart.value().slice(0, offsetStart)
                      : '';
                  var suffixText =
                    leafEnd instanceof _parchment2.default.Text
                      ? leafEnd.value().slice(offsetEnd)
                      : '';
                  var curContext = {
                    collapsed: range.length === 0,
                    empty: range.length === 0 && line.length() <= 1,
                    format: _this2.quill.getFormat(range),
                    offset: offset,
                    prefix: prefixText,
                    suffix: suffixText,
                  };
                  var prevented = bindings.some(function (binding) {
                    if (
                      binding.collapsed != null &&
                      binding.collapsed !== curContext.collapsed
                    )
                      return false;
                    if (
                      binding.empty != null &&
                      binding.empty !== curContext.empty
                    )
                      return false;
                    if (
                      binding.offset != null &&
                      binding.offset !== curContext.offset
                    )
                      return false;
                    if (Array.isArray(binding.format)) {
                      // any format is present
                      if (
                        binding.format.every(function (name) {
                          return curContext.format[name] == null;
                        })
                      ) {
                        return false;
                      }
                    } else if (_typeof(binding.format) === 'object') {
                      // all formats must match
                      if (
                        !Object.keys(binding.format).every(function (name) {
                          if (binding.format[name] === true)
                            return curContext.format[name] != null;
                          if (binding.format[name] === false)
                            return curContext.format[name] == null;
                          return (0,
                          _deepEqual2.default)(binding.format[name], curContext.format[name]);
                        })
                      ) {
                        return false;
                      }
                    }
                    if (
                      binding.prefix != null &&
                      !binding.prefix.test(curContext.prefix)
                    )
                      return false;
                    if (
                      binding.suffix != null &&
                      !binding.suffix.test(curContext.suffix)
                    )
                      return false;
                    return (
                      binding.handler.call(_this2, range, curContext) !== true
                    );
                  });
                  if (prevented) {
                    evt.preventDefault();
                  }
                });
              },
            },
          ]);

          return Keyboard;
        })(_module2.default);

        Keyboard.keys = {
          BACKSPACE: 8,
          TAB: 9,
          ENTER: 13,
          ESCAPE: 27,
          LEFT: 37,
          UP: 38,
          RIGHT: 39,
          DOWN: 40,
          DELETE: 46,
        };

        Keyboard.DEFAULTS = {
          bindings: {
            bold: makeFormatHandler('bold'),
            italic: makeFormatHandler('italic'),
            underline: makeFormatHandler('underline'),
            indent: {
              // highlight tab or tab at beginning of list, indent or blockquote
              key: Keyboard.keys.TAB,
              format: ['blockquote', 'indent', 'list'],
              handler: function handler(range, context) {
                if (context.collapsed && context.offset !== 0) return true;
                this.quill.format('indent', '+1', _quill2.default.sources.USER);
              },
            },
            outdent: {
              key: Keyboard.keys.TAB,
              shiftKey: true,
              format: ['blockquote', 'indent', 'list'],
              // highlight tab or tab at beginning of list, indent or blockquote
              handler: function handler(range, context) {
                if (context.collapsed && context.offset !== 0) return true;
                this.quill.format('indent', '-1', _quill2.default.sources.USER);
              },
            },
            'outdent backspace': {
              key: Keyboard.keys.BACKSPACE,
              collapsed: true,
              shiftKey: null,
              metaKey: null,
              ctrlKey: null,
              altKey: null,
              format: ['indent', 'list'],
              offset: 0,
              handler: function handler(range, context) {
                if (context.format.indent != null) {
                  this.quill.format(
                    'indent',
                    '-1',
                    _quill2.default.sources.USER,
                  );
                } else if (context.format.list != null) {
                  this.quill.format(
                    'list',
                    false,
                    _quill2.default.sources.USER,
                  );
                }
              },
            },
            'indent code-block': makeCodeBlockHandler(true),
            'outdent code-block': makeCodeBlockHandler(false),
            'remove tab': {
              key: Keyboard.keys.TAB,
              shiftKey: true,
              collapsed: true,
              prefix: /\t$/,
              handler: function handler(range) {
                this.quill.deleteText(
                  range.index - 1,
                  1,
                  _quill2.default.sources.USER,
                );
              },
            },
            tab: {
              key: Keyboard.keys.TAB,
              handler: function handler(range) {
                this.quill.history.cutoff();
                var delta = new _quillDelta2.default()
                  .retain(range.index)
                  .delete(range.length)
                  .insert('\t');
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.history.cutoff();
                this.quill.setSelection(
                  range.index + 1,
                  _quill2.default.sources.SILENT,
                );
              },
            },
            'list empty enter': {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ['list'],
              empty: true,
              handler: function handler(range, context) {
                this.quill.format('list', false, _quill2.default.sources.USER);
                if (context.format.indent) {
                  this.quill.format(
                    'indent',
                    false,
                    _quill2.default.sources.USER,
                  );
                }
              },
            },
            'checklist enter': {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: {list: 'checked'},
              handler: function handler(range) {
                var _quill$getLine3 = this.quill.getLine(range.index),
                  _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
                  line = _quill$getLine4[0],
                  offset = _quill$getLine4[1];

                var formats = (0, _extend2.default)({}, line.formats(), {
                  list: 'checked',
                });
                var delta = new _quillDelta2.default()
                  .retain(range.index)
                  .insert('\n', formats)
                  .retain(line.length() - offset - 1)
                  .retain(1, {list: 'unchecked'});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.setSelection(
                  range.index + 1,
                  _quill2.default.sources.SILENT,
                );
                this.quill.scrollIntoView();
              },
            },
            'header enter': {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ['header'],
              suffix: /^$/,
              handler: function handler(range, context) {
                var _quill$getLine5 = this.quill.getLine(range.index),
                  _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
                  line = _quill$getLine6[0],
                  offset = _quill$getLine6[1];

                var delta = new _quillDelta2.default()
                  .retain(range.index)
                  .insert('\n', context.format)
                  .retain(line.length() - offset - 1)
                  .retain(1, {header: null});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.setSelection(
                  range.index + 1,
                  _quill2.default.sources.SILENT,
                );
                this.quill.scrollIntoView();
              },
            },
            'list autofill': {
              key: ' ',
              collapsed: true,
              format: {list: false},
              prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
              handler: function handler(range, context) {
                var length = context.prefix.length;

                var _quill$getLine7 = this.quill.getLine(range.index),
                  _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
                  line = _quill$getLine8[0],
                  offset = _quill$getLine8[1];

                if (offset > length) return true;
                var value = void 0;
                switch (context.prefix.trim()) {
                  case '[]':
                  case '[ ]':
                    value = 'unchecked';
                    break;
                  case '[x]':
                    value = 'checked';
                    break;
                  case '-':
                  case '*':
                    value = 'bullet';
                    break;
                  default:
                    value = 'ordered';
                }
                this.quill.insertText(
                  range.index,
                  ' ',
                  _quill2.default.sources.USER,
                );
                this.quill.history.cutoff();
                var delta = new _quillDelta2.default()
                  .retain(range.index - offset)
                  .delete(length + 1)
                  .retain(line.length() - 2 - offset)
                  .retain(1, {list: value});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.history.cutoff();
                this.quill.setSelection(
                  range.index - length,
                  _quill2.default.sources.SILENT,
                );
              },
            },
            'code exit': {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ['code-block'],
              prefix: /\n\n$/,
              suffix: /^\s+$/,
              handler: function handler(range) {
                var _quill$getLine9 = this.quill.getLine(range.index),
                  _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
                  line = _quill$getLine10[0],
                  offset = _quill$getLine10[1];

                var delta = new _quillDelta2.default()
                  .retain(range.index + line.length() - offset - 2)
                  .retain(1, {'code-block': null})
                  .delete(1);
                this.quill.updateContents(delta, _quill2.default.sources.USER);
              },
            },
            'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
            'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
            'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
            'embed right shift': makeEmbedArrowHandler(
              Keyboard.keys.RIGHT,
              true,
            ),
          },
        };

        function makeEmbedArrowHandler(key, shiftKey) {
          var _ref3;

          var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
          return (
            (_ref3 = {
              key: key,
              shiftKey: shiftKey,
              altKey: null,
            }),
            _defineProperty(_ref3, where, /^$/),
            _defineProperty(_ref3, 'handler', function handler(range) {
              var index = range.index;
              if (key === Keyboard.keys.RIGHT) {
                index += range.length + 1;
              }

              var _quill$getLeaf3 = this.quill.getLeaf(index),
                _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
                leaf = _quill$getLeaf4[0];

              if (!(leaf instanceof _parchment2.default.Embed)) return true;
              if (key === Keyboard.keys.LEFT) {
                if (shiftKey) {
                  this.quill.setSelection(
                    range.index - 1,
                    range.length + 1,
                    _quill2.default.sources.USER,
                  );
                } else {
                  this.quill.setSelection(
                    range.index - 1,
                    _quill2.default.sources.USER,
                  );
                }
              } else {
                if (shiftKey) {
                  this.quill.setSelection(
                    range.index,
                    range.length + 1,
                    _quill2.default.sources.USER,
                  );
                } else {
                  this.quill.setSelection(
                    range.index + range.length + 1,
                    _quill2.default.sources.USER,
                  );
                }
              }
              return false;
            }),
            _ref3
          );
        }

        function handleBackspace(range, context) {
          if (range.index === 0 || this.quill.getLength() <= 1) return;

          var _quill$getLine11 = this.quill.getLine(range.index),
            _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
            line = _quill$getLine12[0];

          var formats = {};
          if (context.offset === 0) {
            var _quill$getLine13 = this.quill.getLine(range.index - 1),
              _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
              prev = _quill$getLine14[0];

            if (prev != null && prev.length() > 1) {
              var curFormats = line.formats();
              var prevFormats = this.quill.getFormat(range.index - 1, 1);
              formats =
                _op2.default.attributes.diff(curFormats, prevFormats) || {};
            }
          }
          // Check for astral symbols
          var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix)
            ? 2
            : 1;
          this.quill.deleteText(
            range.index - length,
            length,
            _quill2.default.sources.USER,
          );
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(
              range.index - length,
              length,
              formats,
              _quill2.default.sources.USER,
            );
          }
          this.quill.focus();
        }

        function handleDelete(range, context) {
          // Check for astral symbols
          var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix)
            ? 2
            : 1;
          if (range.index >= this.quill.getLength() - length) return;
          var formats = {},
            nextLength = 0;

          var _quill$getLine15 = this.quill.getLine(range.index),
            _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
            line = _quill$getLine16[0];

          if (context.offset >= line.length() - 1) {
            var _quill$getLine17 = this.quill.getLine(range.index + 1),
              _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
              next = _quill$getLine18[0];

            if (next) {
              var curFormats = line.formats();
              var nextFormats = this.quill.getFormat(range.index, 1);
              formats =
                _op2.default.attributes.diff(curFormats, nextFormats) || {};
              nextLength = next.length();
            }
          }
          this.quill.deleteText(
            range.index,
            length,
            _quill2.default.sources.USER,
          );
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(
              range.index + nextLength - 1,
              length,
              formats,
              _quill2.default.sources.USER,
            );
          }
        }

        function handleDeleteRange(range) {
          var lines = this.quill.getLines(range);
          var formats = {};
          if (lines.length > 1) {
            var firstFormats = lines[0].formats();
            var lastFormats = lines[lines.length - 1].formats();
            formats =
              _op2.default.attributes.diff(lastFormats, firstFormats) || {};
          }
          this.quill.deleteText(range, _quill2.default.sources.USER);
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(
              range.index,
              1,
              formats,
              _quill2.default.sources.USER,
            );
          }
          this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
          this.quill.focus();
        }

        function handleEnter(range, context) {
          var _this3 = this;

          if (range.length > 0) {
            this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
          }
          var lineFormats = Object.keys(context.format).reduce(function (
            lineFormats,
            format,
          ) {
            if (
              _parchment2.default.query(
                format,
                _parchment2.default.Scope.BLOCK,
              ) &&
              !Array.isArray(context.format[format])
            ) {
              lineFormats[format] = context.format[format];
            }
            return lineFormats;
          },
          {});
          this.quill.insertText(
            range.index,
            '\n',
            lineFormats,
            _quill2.default.sources.USER,
          );
          // Earlier scroll.deleteAt might have messed up our selection,
          // so insertText's built in selection preservation is not reliable
          this.quill.setSelection(
            range.index + 1,
            _quill2.default.sources.SILENT,
          );
          this.quill.focus();
          Object.keys(context.format).forEach(function (name) {
            if (lineFormats[name] != null) return;
            if (Array.isArray(context.format[name])) return;
            if (name === 'link') return;
            _this3.quill.format(
              name,
              context.format[name],
              _quill2.default.sources.USER,
            );
          });
        }

        function makeCodeBlockHandler(indent) {
          return {
            key: Keyboard.keys.TAB,
            shiftKey: !indent,
            format: {'code-block': true},
            handler: function handler(range) {
              var CodeBlock = _parchment2.default.query('code-block');
              var index = range.index,
                length = range.length;

              var _quill$scroll$descend = this.quill.scroll.descendant(
                  CodeBlock,
                  index,
                ),
                _quill$scroll$descend2 = _slicedToArray(
                  _quill$scroll$descend,
                  2,
                ),
                block = _quill$scroll$descend2[0],
                offset = _quill$scroll$descend2[1];

              if (block == null) return;
              var scrollIndex = this.quill.getIndex(block);
              var start = block.newlineIndex(offset, true) + 1;
              var end = block.newlineIndex(scrollIndex + offset + length);
              var lines = block.domNode.textContent
                .slice(start, end)
                .split('\n');
              offset = 0;
              lines.forEach(function (line, i) {
                if (indent) {
                  block.insertAt(start + offset, CodeBlock.TAB);
                  offset += CodeBlock.TAB.length;
                  if (i === 0) {
                    index += CodeBlock.TAB.length;
                  } else {
                    length += CodeBlock.TAB.length;
                  }
                } else if (line.startsWith(CodeBlock.TAB)) {
                  block.deleteAt(start + offset, CodeBlock.TAB.length);
                  offset -= CodeBlock.TAB.length;
                  if (i === 0) {
                    index -= CodeBlock.TAB.length;
                  } else {
                    length -= CodeBlock.TAB.length;
                  }
                }
                offset += line.length + 1;
              });
              this.quill.update(_quill2.default.sources.USER);
              this.quill.setSelection(
                index,
                length,
                _quill2.default.sources.SILENT,
              );
            },
          };
        }

        function makeFormatHandler(format) {
          return {
            key: format[0].toUpperCase(),
            shortKey: true,
            handler: function handler(range, context) {
              this.quill.format(
                format,
                !context.format[format],
                _quill2.default.sources.USER,
              );
            },
          };
        }

        function normalize(binding) {
          if (typeof binding === 'string' || typeof binding === 'number') {
            return normalize({key: binding});
          }
          if (
            (typeof binding === 'undefined'
              ? 'undefined'
              : _typeof(binding)) === 'object'
          ) {
            binding = (0, _clone2.default)(binding, false);
          }
          if (typeof binding.key === 'string') {
            if (Keyboard.keys[binding.key.toUpperCase()] != null) {
              binding.key = Keyboard.keys[binding.key.toUpperCase()];
            } else if (binding.key.length === 1) {
              binding.key = binding.key.toUpperCase().charCodeAt(0);
            } else {
              return null;
            }
          }
          if (binding.shortKey) {
            binding[SHORTKEY] = binding.shortKey;
            delete binding.shortKey;
          }
          return binding;
        }

        exports.default = Keyboard;
        exports.SHORTKEY = SHORTKEY;

        /***/
      },
      /* 24 */
      /***/ function (module, exports, __nested_webpack_require_253445__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _parchment = __nested_webpack_require_253445__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _text = __nested_webpack_require_253445__(7);

        var _text2 = _interopRequireDefault(_text);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Cursor = (function (_Parchment$Embed) {
          _inherits(Cursor, _Parchment$Embed);

          _createClass(Cursor, null, [
            {
              key: 'value',
              value: function value() {
                return undefined;
              },
            },
          ]);

          function Cursor(domNode, selection) {
            _classCallCheck(this, Cursor);

            var _this = _possibleConstructorReturn(
              this,
              (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(
                this,
                domNode,
              ),
            );

            _this.selection = selection;
            _this.textNode = document.createTextNode(Cursor.CONTENTS);
            _this.domNode.appendChild(_this.textNode);
            _this._length = 0;
            return _this;
          }

          _createClass(Cursor, [
            {
              key: 'detach',
              value: function detach() {
                // super.detach() will also clear domNode.__blot
                if (this.parent != null) this.parent.removeChild(this);
              },
            },
            {
              key: 'format',
              value: function format(name, value) {
                if (this._length !== 0) {
                  return _get(
                    Cursor.prototype.__proto__ ||
                      Object.getPrototypeOf(Cursor.prototype),
                    'format',
                    this,
                  ).call(this, name, value);
                }
                var target = this,
                  index = 0;
                while (
                  target != null &&
                  target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT
                ) {
                  index += target.offset(target.parent);
                  target = target.parent;
                }
                if (target != null) {
                  this._length = Cursor.CONTENTS.length;
                  target.optimize();
                  target.formatAt(index, Cursor.CONTENTS.length, name, value);
                  this._length = 0;
                }
              },
            },
            {
              key: 'index',
              value: function index(node, offset) {
                if (node === this.textNode) return 0;
                return _get(
                  Cursor.prototype.__proto__ ||
                    Object.getPrototypeOf(Cursor.prototype),
                  'index',
                  this,
                ).call(this, node, offset);
              },
            },
            {
              key: 'length',
              value: function length() {
                return this._length;
              },
            },
            {
              key: 'position',
              value: function position() {
                return [this.textNode, this.textNode.data.length];
              },
            },
            {
              key: 'remove',
              value: function remove() {
                _get(
                  Cursor.prototype.__proto__ ||
                    Object.getPrototypeOf(Cursor.prototype),
                  'remove',
                  this,
                ).call(this);
                this.parent = null;
              },
            },
            {
              key: 'restore',
              value: function restore() {
                if (this.selection.composing || this.parent == null) return;
                var textNode = this.textNode;
                var range = this.selection.getNativeRange();
                var restoreText = void 0,
                  start = void 0,
                  end = void 0;
                if (
                  range != null &&
                  range.start.node === textNode &&
                  range.end.node === textNode
                ) {
                  var _ref = [textNode, range.start.offset, range.end.offset];
                  restoreText = _ref[0];
                  start = _ref[1];
                  end = _ref[2];
                }
                // Link format will insert text outside of anchor tag
                while (
                  this.domNode.lastChild != null &&
                  this.domNode.lastChild !== this.textNode
                ) {
                  this.domNode.parentNode.insertBefore(
                    this.domNode.lastChild,
                    this.domNode,
                  );
                }
                if (this.textNode.data !== Cursor.CONTENTS) {
                  var text = this.textNode.data.split(Cursor.CONTENTS).join('');
                  if (this.next instanceof _text2.default) {
                    restoreText = this.next.domNode;
                    this.next.insertAt(0, text);
                    this.textNode.data = Cursor.CONTENTS;
                  } else {
                    this.textNode.data = text;
                    this.parent.insertBefore(
                      _parchment2.default.create(this.textNode),
                      this,
                    );
                    this.textNode = document.createTextNode(Cursor.CONTENTS);
                    this.domNode.appendChild(this.textNode);
                  }
                }
                this.remove();
                if (start != null) {
                  var _map = [start, end].map(function (offset) {
                    return Math.max(
                      0,
                      Math.min(restoreText.data.length, offset - 1),
                    );
                  });

                  var _map2 = _slicedToArray(_map, 2);

                  start = _map2[0];
                  end = _map2[1];

                  return {
                    startNode: restoreText,
                    startOffset: start,
                    endNode: restoreText,
                    endOffset: end,
                  };
                }
              },
            },
            {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                if (
                  mutations.some(function (mutation) {
                    return (
                      mutation.type === 'characterData' &&
                      mutation.target === _this2.textNode
                    );
                  })
                ) {
                  var range = this.restore();
                  if (range) context.range = range;
                }
              },
            },
            {
              key: 'value',
              value: function value() {
                return '';
              },
            },
          ]);

          return Cursor;
        })(_parchment2.default.Embed);

        Cursor.blotName = 'cursor';
        Cursor.className = 'ql-cursor';
        Cursor.tagName = 'span';
        Cursor.CONTENTS = '\uFEFF'; // Zero width no break space

        exports.default = Cursor;

        /***/
      },
      /* 25 */
      /***/ function (module, exports, __nested_webpack_require_264937__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _parchment = __nested_webpack_require_264937__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _block = __nested_webpack_require_264937__(4);

        var _block2 = _interopRequireDefault(_block);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Container = (function (_Parchment$Container) {
          _inherits(Container, _Parchment$Container);

          function Container() {
            _classCallCheck(this, Container);

            return _possibleConstructorReturn(
              this,
              (Container.__proto__ || Object.getPrototypeOf(Container)).apply(
                this,
                arguments,
              ),
            );
          }

          return Container;
        })(_parchment2.default.Container);

        Container.allowedChildren = [
          _block2.default,
          _block.BlockEmbed,
          Container,
        ];

        exports.default = Container;

        /***/
      },
      /* 26 */
      /***/ function (module, exports, __nested_webpack_require_267519__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.ColorStyle =
          exports.ColorClass =
          exports.ColorAttributor =
            undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_267519__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ColorAttributor = (function (_Parchment$Attributor) {
          _inherits(ColorAttributor, _Parchment$Attributor);

          function ColorAttributor() {
            _classCallCheck(this, ColorAttributor);

            return _possibleConstructorReturn(
              this,
              (
                ColorAttributor.__proto__ ||
                Object.getPrototypeOf(ColorAttributor)
              ).apply(this, arguments),
            );
          }

          _createClass(ColorAttributor, [
            {
              key: 'value',
              value: function value(domNode) {
                var value = _get(
                  ColorAttributor.prototype.__proto__ ||
                    Object.getPrototypeOf(ColorAttributor.prototype),
                  'value',
                  this,
                ).call(this, domNode);
                if (!value.startsWith('rgb(')) return value;
                value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
                return (
                  '#' +
                  value
                    .split(',')
                    .map(function (component) {
                      return ('00' + parseInt(component).toString(16)).slice(
                        -2,
                      );
                    })
                    .join('')
                );
              },
            },
          ]);

          return ColorAttributor;
        })(_parchment2.default.Attributor.Style);

        var ColorClass = new _parchment2.default.Attributor.Class(
          'color',
          'ql-color',
          {
            scope: _parchment2.default.Scope.INLINE,
          },
        );
        var ColorStyle = new ColorAttributor('color', 'color', {
          scope: _parchment2.default.Scope.INLINE,
        });

        exports.ColorAttributor = ColorAttributor;
        exports.ColorClass = ColorClass;
        exports.ColorStyle = ColorStyle;

        /***/
      },
      /* 27 */
      /***/ function (module, exports, __nested_webpack_require_272860__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.sanitize = exports.default = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _inline = __nested_webpack_require_272860__(6);

        var _inline2 = _interopRequireDefault(_inline);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Link = (function (_Inline) {
          _inherits(Link, _Inline);

          function Link() {
            _classCallCheck(this, Link);

            return _possibleConstructorReturn(
              this,
              (Link.__proto__ || Object.getPrototypeOf(Link)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Link,
            [
              {
                key: 'format',
                value: function format(name, value) {
                  if (name !== this.statics.blotName || !value)
                    return _get(
                      Link.prototype.__proto__ ||
                        Object.getPrototypeOf(Link.prototype),
                      'format',
                      this,
                    ).call(this, name, value);
                  value = this.constructor.sanitize(value);
                  this.domNode.setAttribute('href', value);
                },
              },
            ],
            [
              {
                key: 'create',
                value: function create(value) {
                  var node = _get(
                    Link.__proto__ || Object.getPrototypeOf(Link),
                    'create',
                    this,
                  ).call(this, value);
                  value = this.sanitize(value);
                  node.setAttribute('href', value);
                  node.setAttribute('target', '_blank');
                  return node;
                },
              },
              {
                key: 'formats',
                value: function formats(domNode) {
                  return domNode.getAttribute('href');
                },
              },
              {
                key: 'sanitize',
                value: function sanitize(url) {
                  return _sanitize(url, this.PROTOCOL_WHITELIST)
                    ? url
                    : this.SANITIZED_URL;
                },
              },
            ],
          );

          return Link;
        })(_inline2.default);

        Link.blotName = 'link';
        Link.tagName = 'A';
        Link.SANITIZED_URL = 'about:blank';
        Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

        function _sanitize(url, protocols) {
          var anchor = document.createElement('a');
          anchor.href = url;
          var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
          return protocols.indexOf(protocol) > -1;
        }

        exports.default = Link;
        exports.sanitize = _sanitize;

        /***/
      },
      /* 28 */
      /***/ function (module, exports, __nested_webpack_require_278789__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _keyboard = __nested_webpack_require_278789__(23);

        var _keyboard2 = _interopRequireDefault(_keyboard);

        var _dropdown = __nested_webpack_require_278789__(107);

        var _dropdown2 = _interopRequireDefault(_dropdown);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var optionsCounter = 0;

        function toggleAriaAttribute(element, attribute) {
          element.setAttribute(
            attribute,
            !(element.getAttribute(attribute) === 'true'),
          );
        }

        var Picker = (function () {
          function Picker(select) {
            var _this = this;

            _classCallCheck(this, Picker);

            this.select = select;
            this.container = document.createElement('span');
            this.buildPicker();
            this.select.style.display = 'none';
            this.select.parentNode.insertBefore(this.container, this.select);

            this.label.addEventListener('mousedown', function () {
              _this.togglePicker();
            });
            this.label.addEventListener('keydown', function (event) {
              switch (event.keyCode) {
                // Allows the "Enter" key to open the picker
                case _keyboard2.default.keys.ENTER:
                  _this.togglePicker();
                  break;

                // Allows the "Escape" key to close the picker
                case _keyboard2.default.keys.ESCAPE:
                  _this.escape();
                  event.preventDefault();
                  break;
                default:
              }
            });
            this.select.addEventListener('change', this.update.bind(this));
          }

          _createClass(Picker, [
            {
              key: 'togglePicker',
              value: function togglePicker() {
                this.container.classList.toggle('ql-expanded');
                // Toggle aria-expanded and aria-hidden to make the picker accessible
                toggleAriaAttribute(this.label, 'aria-expanded');
                toggleAriaAttribute(this.options, 'aria-hidden');
              },
            },
            {
              key: 'buildItem',
              value: function buildItem(option) {
                var _this2 = this;

                var item = document.createElement('span');
                item.tabIndex = '0';
                item.setAttribute('role', 'button');

                item.classList.add('ql-picker-item');
                item.classList.add('hover:bg-gray-200');
                item.classList.add('dark:hover:bg-gray-700');

                if (option.hasAttribute('value')) {
                  item.setAttribute('data-value', option.getAttribute('value'));
                }
                if (option.textContent) {
                  item.setAttribute('data-label', option.textContent);
                }
                item.addEventListener('click', function () {
                  _this2.selectItem(item, true);
                });
                item.addEventListener('keydown', function (event) {
                  switch (event.keyCode) {
                    // Allows the "Enter" key to select an item
                    case _keyboard2.default.keys.ENTER:
                      _this2.selectItem(item, true);
                      event.preventDefault();
                      break;

                    // Allows the "Escape" key to close the picker
                    case _keyboard2.default.keys.ESCAPE:
                      _this2.escape();
                      event.preventDefault();
                      break;
                    default:
                  }
                });

                return item;
              },
            },
            {
              key: 'buildLabel',
              value: function buildLabel() {
                var label = document.createElement('span');
                label.classList.add('ql-picker-label');
                label.innerHTML = _dropdown2.default;
                label.tabIndex = '0';
                label.setAttribute('role', 'button');
                label.setAttribute('aria-expanded', 'false');
                this.container.appendChild(label);
                return label;
              },
            },
            {
              key: 'buildOptions',
              value: function buildOptions() {
                var _this3 = this;

                var options = document.createElement('span');
                options.classList.add('ql-picker-options');
                options.classList.add('bg-gray-50');
                options.classList.add('dark:bg-gray-600');

                // Don't want screen readers to read this until options are visible
                options.setAttribute('aria-hidden', 'true');
                options.tabIndex = '-1';

                // Need a unique id for aria-controls
                options.id = 'ql-picker-options-' + optionsCounter;
                optionsCounter += 1;
                this.label.setAttribute('aria-controls', options.id);

                this.options = options;

                [].slice.call(this.select.options).forEach(function (option) {
                  var item = _this3.buildItem(option);
                  options.appendChild(item);
                  if (option.selected === true) {
                    _this3.selectItem(item);
                  }
                });
                this.container.appendChild(options);
              },
            },
            {
              key: 'buildPicker',
              value: function buildPicker() {
                var _this4 = this;

                [].slice.call(this.select.attributes).forEach(function (item) {
                  _this4.container.setAttribute(item.name, item.value);
                });
                this.container.classList.add('ql-picker');
                this.label = this.buildLabel();
                this.buildOptions();
              },
            },
            {
              key: 'escape',
              value: function escape() {
                var _this5 = this;

                // Close menu and return focus to trigger label
                this.close();
                // Need setTimeout for accessibility to ensure that the browser executes
                // focus on the next process thread and after any DOM content changes
                setTimeout(function () {
                  return _this5.label.focus();
                }, 1);
              },
            },
            {
              key: 'close',
              value: function close() {
                this.container.classList.remove('ql-expanded');
                this.label.setAttribute('aria-expanded', 'false');
                this.options.setAttribute('aria-hidden', 'true');
              },
            },
            {
              key: 'selectItem',
              value: function selectItem(item) {
                var trigger =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : false;

                var selected = this.container.querySelector('.ql-selected');
                if (item === selected) return;
                if (selected != null) {
                  selected.classList.remove('ql-selected');
                }
                if (item == null) return;
                item.classList.add('ql-selected');
                this.select.selectedIndex = [].indexOf.call(
                  item.parentNode.children,
                  item,
                );
                if (item.hasAttribute('data-value')) {
                  this.label.setAttribute(
                    'data-value',
                    item.getAttribute('data-value'),
                  );
                } else {
                  this.label.removeAttribute('data-value');
                }
                if (item.hasAttribute('data-label')) {
                  this.label.setAttribute(
                    'data-label',
                    item.getAttribute('data-label'),
                  );
                } else {
                  this.label.removeAttribute('data-label');
                }
                if (trigger) {
                  if (typeof Event === 'function') {
                    this.select.dispatchEvent(new Event('change'));
                  } else if (
                    (typeof Event === 'undefined'
                      ? 'undefined'
                      : _typeof(Event)) === 'object'
                  ) {
                    // IE11
                    var event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    this.select.dispatchEvent(event);
                  }
                  this.close();
                }
              },
            },
            {
              key: 'update',
              value: function update() {
                var option = void 0;
                if (this.select.selectedIndex > -1) {
                  var item =
                    this.container.querySelector('.ql-picker-options').children[
                      this.select.selectedIndex
                    ];
                  option = this.select.options[this.select.selectedIndex];
                  this.selectItem(item);
                } else {
                  this.selectItem(null);
                }
                var isActive =
                  option != null &&
                  option !== this.select.querySelector('option[selected]');
                this.label.classList.toggle('ql-active', isActive);
              },
            },
          ]);

          return Picker;
        })();

        exports.default = Picker;

        /***/
      },
      /* 29 */
      /***/ function (module, exports, __nested_webpack_require_290181__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _parchment = __nested_webpack_require_290181__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_290181__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _block = __nested_webpack_require_290181__(4);

        var _block2 = _interopRequireDefault(_block);

        var _break = __nested_webpack_require_290181__(16);

        var _break2 = _interopRequireDefault(_break);

        var _container = __nested_webpack_require_290181__(25);

        var _container2 = _interopRequireDefault(_container);

        var _cursor = __nested_webpack_require_290181__(24);

        var _cursor2 = _interopRequireDefault(_cursor);

        var _embed = __nested_webpack_require_290181__(35);

        var _embed2 = _interopRequireDefault(_embed);

        var _inline = __nested_webpack_require_290181__(6);

        var _inline2 = _interopRequireDefault(_inline);

        var _scroll = __nested_webpack_require_290181__(22);

        var _scroll2 = _interopRequireDefault(_scroll);

        var _text = __nested_webpack_require_290181__(7);

        var _text2 = _interopRequireDefault(_text);

        var _clipboard = __nested_webpack_require_290181__(55);

        var _clipboard2 = _interopRequireDefault(_clipboard);

        var _history = __nested_webpack_require_290181__(42);

        var _history2 = _interopRequireDefault(_history);

        var _keyboard = __nested_webpack_require_290181__(23);

        var _keyboard2 = _interopRequireDefault(_keyboard);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        _quill2.default.register({
          'blots/block': _block2.default,
          'blots/block/embed': _block.BlockEmbed,
          'blots/break': _break2.default,
          'blots/container': _container2.default,
          'blots/cursor': _cursor2.default,
          'blots/embed': _embed2.default,
          'blots/inline': _inline2.default,
          'blots/scroll': _scroll2.default,
          'blots/text': _text2.default,

          'modules/clipboard': _clipboard2.default,
          'modules/history': _history2.default,
          'modules/keyboard': _keyboard2.default,
        });

        _parchment2.default.register(
          _block2.default,
          _break2.default,
          _cursor2.default,
          _inline2.default,
          _scroll2.default,
          _text2.default,
        );

        exports.default = _quill2.default;

        /***/
      },
      /* 30 */
      /***/ function (module, exports, __nested_webpack_require_292749__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {value: true});
        var Registry = __nested_webpack_require_292749__(1);
        var ShadowBlot = /** @class */ (function () {
          function ShadowBlot(domNode) {
            this.domNode = domNode;
            // @ts-ignore
            this.domNode[Registry.DATA_KEY] = {blot: this};
          }
          Object.defineProperty(ShadowBlot.prototype, 'statics', {
            // Hack for accessing inherited static methods
            get: function () {
              return this.constructor;
            },
            enumerable: true,
            configurable: true,
          });
          ShadowBlot.create = function (value) {
            if (this.tagName == null) {
              throw new Registry.ParchmentError(
                'Blot definition missing tagName',
              );
            }
            var node;
            if (Array.isArray(this.tagName)) {
              if (typeof value === 'string') {
                value = value.toUpperCase();
                if (parseInt(value).toString() === value) {
                  value = parseInt(value);
                }
              }
              if (typeof value === 'number') {
                node = document.createElement(this.tagName[value - 1]);
              } else if (this.tagName.indexOf(value) > -1) {
                node = document.createElement(value);
              } else {
                node = document.createElement(this.tagName[0]);
              }
            } else {
              node = document.createElement(this.tagName);
            }
            if (this.className) {
              node.classList.add(this.className);
            }
            return node;
          };
          ShadowBlot.prototype.attach = function () {
            if (this.parent != null) {
              this.scroll = this.parent.scroll;
            }
          };
          ShadowBlot.prototype.clone = function () {
            var domNode = this.domNode.cloneNode(false);
            return Registry.create(domNode);
          };
          ShadowBlot.prototype.detach = function () {
            if (this.parent != null) this.parent.removeChild(this);
            // @ts-ignore
            delete this.domNode[Registry.DATA_KEY];
          };
          ShadowBlot.prototype.deleteAt = function (index, length) {
            var blot = this.isolate(index, length);
            blot.remove();
          };
          ShadowBlot.prototype.formatAt = function (
            index,
            length,
            name,
            value,
          ) {
            var blot = this.isolate(index, length);
            if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
              blot.wrap(name, value);
            } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
              var parent = Registry.create(this.statics.scope);
              blot.wrap(parent);
              parent.format(name, value);
            }
          };
          ShadowBlot.prototype.insertAt = function (index, value, def) {
            var blot =
              def == null
                ? Registry.create('text', value)
                : Registry.create(value, def);
            var ref = this.split(index);
            this.parent.insertBefore(blot, ref);
          };
          ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
            if (refBlot === void 0) {
              refBlot = null;
            }
            if (this.parent != null) {
              this.parent.children.remove(this);
            }
            var refDomNode = null;
            parentBlot.children.insertBefore(this, refBlot);
            if (refBlot != null) {
              refDomNode = refBlot.domNode;
            }
            if (
              this.domNode.parentNode != parentBlot.domNode ||
              this.domNode.nextSibling != refDomNode
            ) {
              parentBlot.domNode.insertBefore(this.domNode, refDomNode);
            }
            this.parent = parentBlot;
            this.attach();
          };
          ShadowBlot.prototype.isolate = function (index, length) {
            var target = this.split(index);
            target.split(length);
            return target;
          };
          ShadowBlot.prototype.length = function () {
            return 1;
          };
          ShadowBlot.prototype.offset = function (root) {
            if (root === void 0) {
              root = this.parent;
            }
            if (this.parent == null || this == root) return 0;
            return this.parent.children.offset(this) + this.parent.offset(root);
          };
          ShadowBlot.prototype.optimize = function (context) {
            // TODO clean up once we use WeakMap
            // @ts-ignore
            if (this.domNode[Registry.DATA_KEY] != null) {
              // @ts-ignore
              delete this.domNode[Registry.DATA_KEY].mutations;
            }
          };
          ShadowBlot.prototype.remove = function () {
            if (this.domNode.parentNode != null) {
              this.domNode.parentNode.removeChild(this.domNode);
            }
            this.detach();
          };
          ShadowBlot.prototype.replace = function (target) {
            if (target.parent == null) return;
            target.parent.insertBefore(this, target.next);
            target.remove();
          };
          ShadowBlot.prototype.replaceWith = function (name, value) {
            var replacement =
              typeof name === 'string' ? Registry.create(name, value) : name;
            replacement.replace(this);
            return replacement;
          };
          ShadowBlot.prototype.split = function (index, force) {
            return index === 0 ? this : this.next;
          };
          ShadowBlot.prototype.update = function (mutations, context) {
            // Nothing to do by default
          };
          ShadowBlot.prototype.wrap = function (name, value) {
            var wrapper =
              typeof name === 'string' ? Registry.create(name, value) : name;
            if (this.parent != null) {
              this.parent.insertBefore(wrapper, this.next);
            }
            wrapper.appendChild(this);
            return wrapper;
          };
          ShadowBlot.blotName = 'abstract';
          return ShadowBlot;
        })();
        exports.default = ShadowBlot;

        /***/
      },
      /* 31 */
      /***/ function (module, exports, __nested_webpack_require_299266__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {value: true});
        var attributor_1 = __nested_webpack_require_299266__(12);
        var class_1 = __nested_webpack_require_299266__(32);
        var style_1 = __nested_webpack_require_299266__(33);
        var Registry = __nested_webpack_require_299266__(1);
        var AttributorStore = /** @class */ (function () {
          function AttributorStore(domNode) {
            this.attributes = {};
            this.domNode = domNode;
            this.build();
          }
          AttributorStore.prototype.attribute = function (attribute, value) {
            // verb
            if (value) {
              if (attribute.add(this.domNode, value)) {
                if (attribute.value(this.domNode) != null) {
                  this.attributes[attribute.attrName] = attribute;
                } else {
                  delete this.attributes[attribute.attrName];
                }
              }
            } else {
              attribute.remove(this.domNode);
              delete this.attributes[attribute.attrName];
            }
          };
          AttributorStore.prototype.build = function () {
            var _this = this;
            this.attributes = {};
            var attributes = attributor_1.default.keys(this.domNode);
            var classes = class_1.default.keys(this.domNode);
            var styles = style_1.default.keys(this.domNode);
            attributes
              .concat(classes)
              .concat(styles)
              .forEach(function (name) {
                var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
                if (attr instanceof attributor_1.default) {
                  _this.attributes[attr.attrName] = attr;
                }
              });
          };
          AttributorStore.prototype.copy = function (target) {
            var _this = this;
            Object.keys(this.attributes).forEach(function (key) {
              var value = _this.attributes[key].value(_this.domNode);
              target.format(key, value);
            });
          };
          AttributorStore.prototype.move = function (target) {
            var _this = this;
            this.copy(target);
            Object.keys(this.attributes).forEach(function (key) {
              _this.attributes[key].remove(_this.domNode);
            });
            this.attributes = {};
          };
          AttributorStore.prototype.values = function () {
            var _this = this;
            return Object.keys(this.attributes).reduce(function (
              attributes,
              name,
            ) {
              attributes[name] = _this.attributes[name].value(_this.domNode);
              return attributes;
            },
            {});
          };
          return AttributorStore;
        })();
        exports.default = AttributorStore;

        /***/
      },
      /* 32 */
      /***/ function (module, exports, __nested_webpack_require_302202__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var attributor_1 = __nested_webpack_require_302202__(12);
        function match(node, prefix) {
          var className = node.getAttribute('class') || '';
          return className.split(/\s+/).filter(function (name) {
            return name.indexOf(prefix + '-') === 0;
          });
        }
        var ClassAttributor = /** @class */ (function (_super) {
          __extends(ClassAttributor, _super);
          function ClassAttributor() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          ClassAttributor.keys = function (node) {
            return (node.getAttribute('class') || '')
              .split(/\s+/)
              .map(function (name) {
                return name.split('-').slice(0, -1).join('-');
              });
          };
          ClassAttributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value)) return false;
            this.remove(node);
            node.classList.add(this.keyName + '-' + value);
            return true;
          };
          ClassAttributor.prototype.remove = function (node) {
            var matches = match(node, this.keyName);
            matches.forEach(function (name) {
              node.classList.remove(name);
            });
            if (node.classList.length === 0) {
              node.removeAttribute('class');
            }
          };
          ClassAttributor.prototype.value = function (node) {
            var result = match(node, this.keyName)[0] || '';
            var value = result.slice(this.keyName.length + 1); // +1 for hyphen
            return this.canAdd(node, value) ? value : '';
          };
          return ClassAttributor;
        })(attributor_1.default);
        exports.default = ClassAttributor;

        /***/
      },
      /* 33 */
      /***/ function (module, exports, __nested_webpack_require_304932__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var attributor_1 = __nested_webpack_require_304932__(12);
        function camelize(name) {
          var parts = name.split('-');
          var rest = parts
            .slice(1)
            .map(function (part) {
              return part[0].toUpperCase() + part.slice(1);
            })
            .join('');
          return parts[0] + rest;
        }
        var StyleAttributor = /** @class */ (function (_super) {
          __extends(StyleAttributor, _super);
          function StyleAttributor() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          StyleAttributor.keys = function (node) {
            return (node.getAttribute('style') || '')
              .split(';')
              .map(function (value) {
                var arr = value.split(':');
                return arr[0].trim();
              });
          };
          StyleAttributor.prototype.add = function (node, value) {
            if (!this.canAdd(node, value)) return false;
            // @ts-ignore
            node.style[camelize(this.keyName)] = value;
            return true;
          };
          StyleAttributor.prototype.remove = function (node) {
            // @ts-ignore
            node.style[camelize(this.keyName)] = '';
            if (!node.getAttribute('style')) {
              node.removeAttribute('style');
            }
          };
          StyleAttributor.prototype.value = function (node) {
            // @ts-ignore
            var value = node.style[camelize(this.keyName)];
            return this.canAdd(node, value) ? value : '';
          };
          return StyleAttributor;
        })(attributor_1.default);
        exports.default = StyleAttributor;

        /***/
      },
      /* 34 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var Theme = (function () {
          function Theme(quill, options) {
            _classCallCheck(this, Theme);

            this.quill = quill;
            this.options = options;
            this.modules = {};
          }

          _createClass(Theme, [
            {
              key: 'init',
              value: function init() {
                var _this = this;

                Object.keys(this.options.modules).forEach(function (name) {
                  if (_this.modules[name] == null) {
                    _this.addModule(name);
                  }
                });
              },
            },
            {
              key: 'addModule',
              value: function addModule(name) {
                var moduleClass = this.quill.constructor.import(
                  'modules/' + name,
                );
                this.modules[name] = new moduleClass(
                  this.quill,
                  this.options.modules[name] || {},
                );
                return this.modules[name];
              },
            },
          ]);

          return Theme;
        })();

        Theme.DEFAULTS = {
          modules: {},
        };
        Theme.themes = {
          default: Theme,
        };

        exports.default = Theme;

        /***/
      },
      /* 35 */
      /***/ function (module, exports, __nested_webpack_require_310047__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_310047__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _text = __nested_webpack_require_310047__(7);

        var _text2 = _interopRequireDefault(_text);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var GUARD_TEXT = '\uFEFF';

        var Embed = (function (_Parchment$Embed) {
          _inherits(Embed, _Parchment$Embed);

          function Embed(node) {
            _classCallCheck(this, Embed);

            var _this = _possibleConstructorReturn(
              this,
              (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(
                this,
                node,
              ),
            );

            _this.contentNode = document.createElement('span');
            _this.contentNode.setAttribute('contenteditable', false);
            [].slice
              .call(_this.domNode.childNodes)
              .forEach(function (childNode) {
                _this.contentNode.appendChild(childNode);
              });
            _this.leftGuard = document.createTextNode(GUARD_TEXT);
            _this.rightGuard = document.createTextNode(GUARD_TEXT);
            _this.domNode.appendChild(_this.leftGuard);
            _this.domNode.appendChild(_this.contentNode);
            _this.domNode.appendChild(_this.rightGuard);
            return _this;
          }

          _createClass(Embed, [
            {
              key: 'index',
              value: function index(node, offset) {
                if (node === this.leftGuard) return 0;
                if (node === this.rightGuard) return 1;
                return _get(
                  Embed.prototype.__proto__ ||
                    Object.getPrototypeOf(Embed.prototype),
                  'index',
                  this,
                ).call(this, node, offset);
              },
            },
            {
              key: 'restore',
              value: function restore(node) {
                var range = void 0,
                  textNode = void 0;
                var text = node.data.split(GUARD_TEXT).join('');
                if (node === this.leftGuard) {
                  if (this.prev instanceof _text2.default) {
                    var prevLength = this.prev.length();
                    this.prev.insertAt(prevLength, text);
                    range = {
                      startNode: this.prev.domNode,
                      startOffset: prevLength + text.length,
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(
                      _parchment2.default.create(textNode),
                      this,
                    );
                    range = {
                      startNode: textNode,
                      startOffset: text.length,
                    };
                  }
                } else if (node === this.rightGuard) {
                  if (this.next instanceof _text2.default) {
                    this.next.insertAt(0, text);
                    range = {
                      startNode: this.next.domNode,
                      startOffset: text.length,
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(
                      _parchment2.default.create(textNode),
                      this.next,
                    );
                    range = {
                      startNode: textNode,
                      startOffset: text.length,
                    };
                  }
                }
                node.data = GUARD_TEXT;
                return range;
              },
            },
            {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                mutations.forEach(function (mutation) {
                  if (
                    mutation.type === 'characterData' &&
                    (mutation.target === _this2.leftGuard ||
                      mutation.target === _this2.rightGuard)
                  ) {
                    var range = _this2.restore(mutation.target);
                    if (range) context.range = range;
                  }
                });
              },
            },
          ]);

          return Embed;
        })(_parchment2.default.Embed);

        exports.default = Embed;

        /***/
      },
      /* 36 */
      /***/ function (module, exports, __nested_webpack_require_317627__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.AlignStyle =
          exports.AlignClass =
          exports.AlignAttribute =
            undefined;

        var _parchment = __nested_webpack_require_317627__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        var config = {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: ['right', 'center', 'justify'],
        };

        var AlignAttribute = new _parchment2.default.Attributor.Attribute(
          'align',
          'align',
          config,
        );
        var AlignClass = new _parchment2.default.Attributor.Class(
          'align',
          'ql-align',
          config,
        );
        var AlignStyle = new _parchment2.default.Attributor.Style(
          'align',
          'text-align',
          config,
        );

        exports.AlignAttribute = AlignAttribute;
        exports.AlignClass = AlignClass;
        exports.AlignStyle = AlignStyle;

        /***/
      },
      /* 37 */
      /***/ function (module, exports, __nested_webpack_require_318882__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.BackgroundStyle = exports.BackgroundClass = undefined;

        var _parchment = __nested_webpack_require_318882__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _color = __nested_webpack_require_318882__(26);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        var BackgroundClass = new _parchment2.default.Attributor.Class(
          'background',
          'ql-bg',
          {
            scope: _parchment2.default.Scope.INLINE,
          },
        );
        var BackgroundStyle = new _color.ColorAttributor(
          'background',
          'background-color',
          {
            scope: _parchment2.default.Scope.INLINE,
          },
        );

        exports.BackgroundClass = BackgroundClass;
        exports.BackgroundStyle = BackgroundStyle;

        /***/
      },
      /* 38 */
      /***/ function (module, exports, __nested_webpack_require_319957__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.DirectionStyle =
          exports.DirectionClass =
          exports.DirectionAttribute =
            undefined;

        var _parchment = __nested_webpack_require_319957__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        var config = {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: ['rtl'],
        };

        var DirectionAttribute = new _parchment2.default.Attributor.Attribute(
          'direction',
          'dir',
          config,
        );
        var DirectionClass = new _parchment2.default.Attributor.Class(
          'direction',
          'ql-direction',
          config,
        );
        var DirectionStyle = new _parchment2.default.Attributor.Style(
          'direction',
          'direction',
          config,
        );

        exports.DirectionAttribute = DirectionAttribute;
        exports.DirectionClass = DirectionClass;
        exports.DirectionStyle = DirectionStyle;

        /***/
      },
      /* 39 */
      /***/ function (module, exports, __nested_webpack_require_321250__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.FontClass = exports.FontStyle = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_321250__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var config = {
          scope: _parchment2.default.Scope.INLINE,
          whitelist: ['serif', 'monospace'],
        };

        var FontClass = new _parchment2.default.Attributor.Class(
          'font',
          'ql-font',
          config,
        );

        var FontStyleAttributor = (function (_Parchment$Attributor) {
          _inherits(FontStyleAttributor, _Parchment$Attributor);

          function FontStyleAttributor() {
            _classCallCheck(this, FontStyleAttributor);

            return _possibleConstructorReturn(
              this,
              (
                FontStyleAttributor.__proto__ ||
                Object.getPrototypeOf(FontStyleAttributor)
              ).apply(this, arguments),
            );
          }

          _createClass(FontStyleAttributor, [
            {
              key: 'value',
              value: function value(node) {
                return _get(
                  FontStyleAttributor.prototype.__proto__ ||
                    Object.getPrototypeOf(FontStyleAttributor.prototype),
                  'value',
                  this,
                )
                  .call(this, node)
                  .replace(/["']/g, '');
              },
            },
          ]);

          return FontStyleAttributor;
        })(_parchment2.default.Attributor.Style);

        var FontStyle = new FontStyleAttributor('font', 'font-family', config);

        exports.FontStyle = FontStyle;
        exports.FontClass = FontClass;

        /***/
      },
      /* 40 */
      /***/ function (module, exports, __nested_webpack_require_326091__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.SizeStyle = exports.SizeClass = undefined;

        var _parchment = __nested_webpack_require_326091__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        var SizeClass = new _parchment2.default.Attributor.Class(
          'size',
          'ql-size',
          {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['small', 'large', 'huge'],
          },
        );
        var SizeStyle = new _parchment2.default.Attributor.Style(
          'size',
          'font-size',
          {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['10px', '18px', '32px'],
          },
        );

        exports.SizeClass = SizeClass;
        exports.SizeStyle = SizeStyle;

        /***/
      },
      /* 41 */
      /***/ function (module, exports, __nested_webpack_require_327168__) {
        'use strict';

        module.exports = {
          align: {
            '': __nested_webpack_require_327168__(76),
            center: __nested_webpack_require_327168__(77),
            right: __nested_webpack_require_327168__(78),
            justify: __nested_webpack_require_327168__(79),
          },
          background: __nested_webpack_require_327168__(80),
          blockquote: __nested_webpack_require_327168__(81),
          bold: __nested_webpack_require_327168__(82),
          clean: __nested_webpack_require_327168__(83),
          code: __nested_webpack_require_327168__(58),
          'code-block': __nested_webpack_require_327168__(58),
          color: __nested_webpack_require_327168__(84),
          direction: {
            '': __nested_webpack_require_327168__(85),
            rtl: __nested_webpack_require_327168__(86),
          },
          float: {
            center: __nested_webpack_require_327168__(87),
            full: __nested_webpack_require_327168__(88),
            left: __nested_webpack_require_327168__(89),
            right: __nested_webpack_require_327168__(90),
          },
          formula: __nested_webpack_require_327168__(91),
          header: {
            1: __nested_webpack_require_327168__(92),
            2: __nested_webpack_require_327168__(93),
          },
          italic: __nested_webpack_require_327168__(94),
          image: __nested_webpack_require_327168__(95),
          indent: {
            '+1': __nested_webpack_require_327168__(96),
            '-1': __nested_webpack_require_327168__(97),
          },
          link: __nested_webpack_require_327168__(98),
          list: {
            ordered: __nested_webpack_require_327168__(99),
            bullet: __nested_webpack_require_327168__(100),
            check: __nested_webpack_require_327168__(101),
          },
          script: {
            sub: __nested_webpack_require_327168__(102),
            super: __nested_webpack_require_327168__(103),
          },
          strike: __nested_webpack_require_327168__(104),
          underline: __nested_webpack_require_327168__(105),
          video: __nested_webpack_require_327168__(106),
        };

        /***/
      },
      /* 42 */
      /***/ function (module, exports, __nested_webpack_require_328998__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.getLastChangeIndex = exports.default = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _parchment = __nested_webpack_require_328998__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_328998__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _module = __nested_webpack_require_328998__(9);

        var _module2 = _interopRequireDefault(_module);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var History = (function (_Module) {
          _inherits(History, _Module);

          function History(quill, options) {
            _classCallCheck(this, History);

            var _this = _possibleConstructorReturn(
              this,
              (History.__proto__ || Object.getPrototypeOf(History)).call(
                this,
                quill,
                options,
              ),
            );

            _this.lastRecorded = 0;
            _this.ignoreChange = false;
            _this.clear();
            _this.quill.on(
              _quill2.default.events.EDITOR_CHANGE,
              function (eventName, delta, oldDelta, source) {
                if (
                  eventName !== _quill2.default.events.TEXT_CHANGE ||
                  _this.ignoreChange
                )
                  return;
                if (
                  !_this.options.userOnly ||
                  source === _quill2.default.sources.USER
                ) {
                  _this.record(delta, oldDelta);
                } else {
                  _this.transform(delta);
                }
              },
            );
            _this.quill.keyboard.addBinding(
              {key: 'Z', shortKey: true},
              _this.undo.bind(_this),
            );
            _this.quill.keyboard.addBinding(
              {key: 'Z', shortKey: true, shiftKey: true},
              _this.redo.bind(_this),
            );
            if (/Win/i.test(navigator.platform)) {
              _this.quill.keyboard.addBinding(
                {key: 'Y', shortKey: true},
                _this.redo.bind(_this),
              );
            }
            return _this;
          }

          _createClass(History, [
            {
              key: 'change',
              value: function change(source, dest) {
                if (this.stack[source].length === 0) return;
                var delta = this.stack[source].pop();
                this.stack[dest].push(delta);
                this.lastRecorded = 0;
                this.ignoreChange = true;
                this.quill.updateContents(
                  delta[source],
                  _quill2.default.sources.USER,
                );
                this.ignoreChange = false;
                var index = getLastChangeIndex(delta[source]);
                this.quill.setSelection(index);
              },
            },
            {
              key: 'clear',
              value: function clear() {
                this.stack = {undo: [], redo: []};
              },
            },
            {
              key: 'cutoff',
              value: function cutoff() {
                this.lastRecorded = 0;
              },
            },
            {
              key: 'record',
              value: function record(changeDelta, oldDelta) {
                if (changeDelta.ops.length === 0) return;
                this.stack.redo = [];
                var undoDelta = this.quill.getContents().diff(oldDelta);
                var timestamp = Date.now();
                if (
                  this.lastRecorded + this.options.delay > timestamp &&
                  this.stack.undo.length > 0
                ) {
                  var delta = this.stack.undo.pop();
                  undoDelta = undoDelta.compose(delta.undo);
                  changeDelta = delta.redo.compose(changeDelta);
                } else {
                  this.lastRecorded = timestamp;
                }
                this.stack.undo.push({
                  redo: changeDelta,
                  undo: undoDelta,
                });
                if (this.stack.undo.length > this.options.maxStack) {
                  this.stack.undo.shift();
                }
              },
            },
            {
              key: 'redo',
              value: function redo() {
                this.change('redo', 'undo');
              },
            },
            {
              key: 'transform',
              value: function transform(delta) {
                this.stack.undo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
                this.stack.redo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
              },
            },
            {
              key: 'undo',
              value: function undo() {
                this.change('undo', 'redo');
              },
            },
          ]);

          return History;
        })(_module2.default);

        History.DEFAULTS = {
          delay: 1000,
          maxStack: 100,
          userOnly: false,
        };

        function endsWithNewlineChange(delta) {
          var lastOp = delta.ops[delta.ops.length - 1];
          if (lastOp == null) return false;
          if (lastOp.insert != null) {
            return (
              typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n')
            );
          }
          if (lastOp.attributes != null) {
            return Object.keys(lastOp.attributes).some(function (attr) {
              return (
                _parchment2.default.query(
                  attr,
                  _parchment2.default.Scope.BLOCK,
                ) != null
              );
            });
          }
          return false;
        }

        function getLastChangeIndex(delta) {
          var deleteLength = delta.reduce(function (length, op) {
            length += op.delete || 0;
            return length;
          }, 0);
          var changeIndex = delta.length() - deleteLength;
          if (endsWithNewlineChange(delta)) {
            changeIndex -= 1;
          }
          return changeIndex;
        }

        exports.default = History;
        exports.getLastChangeIndex = getLastChangeIndex;

        /***/
      },
      /* 43 */
      /***/ function (module, exports, __nested_webpack_require_337806__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.BaseTooltip = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _extend = __nested_webpack_require_337806__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _quillDelta = __nested_webpack_require_337806__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _emitter = __nested_webpack_require_337806__(8);

        var _emitter2 = _interopRequireDefault(_emitter);

        var _keyboard = __nested_webpack_require_337806__(23);

        var _keyboard2 = _interopRequireDefault(_keyboard);

        var _theme = __nested_webpack_require_337806__(34);

        var _theme2 = _interopRequireDefault(_theme);

        var _colorPicker = __nested_webpack_require_337806__(59);

        var _colorPicker2 = _interopRequireDefault(_colorPicker);

        var _iconPicker = __nested_webpack_require_337806__(60);

        var _iconPicker2 = _interopRequireDefault(_iconPicker);

        var _picker = __nested_webpack_require_337806__(28);

        var _picker2 = _interopRequireDefault(_picker);

        var _tooltip = __nested_webpack_require_337806__(61);

        var _tooltip2 = _interopRequireDefault(_tooltip);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ALIGNS = [false, 'center', 'right', 'justify'];

        var COLORS = [
          '#000000',
          '#e60000',
          '#ff9900',
          '#ffff00',
          '#008a00',
          '#0066cc',
          '#9933ff',
          '#ffffff',
          '#facccc',
          '#ffebcc',
          '#ffffcc',
          '#cce8cc',
          '#cce0f5',
          '#ebd6ff',
          '#bbbbbb',
          '#f06666',
          '#ffc266',
          '#ffff66',
          '#66b966',
          '#66a3e0',
          '#c285ff',
          '#888888',
          '#a10000',
          '#b26b00',
          '#b2b200',
          '#006100',
          '#0047b2',
          '#6b24b2',
          '#444444',
          '#5c0000',
          '#663d00',
          '#666600',
          '#003700',
          '#002966',
          '#3d1466',
        ];

        var FONTS = [false, 'serif', 'monospace'];

        var HEADERS = ['1', '2', '3', false];

        var SIZES = ['small', false, 'large', 'huge'];

        var BaseTheme = (function (_Theme) {
          _inherits(BaseTheme, _Theme);

          function BaseTheme(quill, options) {
            _classCallCheck(this, BaseTheme);

            var _this = _possibleConstructorReturn(
              this,
              (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(
                this,
                quill,
                options,
              ),
            );

            var listener = function listener(e) {
              if (!document.body.contains(quill.root)) {
                return document.body.removeEventListener('click', listener);
              }
              if (
                _this.tooltip != null &&
                !_this.tooltip.root.contains(e.target) &&
                document.activeElement !== _this.tooltip.textbox &&
                !_this.quill.hasFocus()
              ) {
                _this.tooltip.hide();
              }
              if (_this.pickers != null) {
                _this.pickers.forEach(function (picker) {
                  if (!picker.container.contains(e.target)) {
                    picker.close();
                  }
                });
              }
            };
            quill.emitter.listenDOM('click', document.body, listener);
            return _this;
          }

          _createClass(BaseTheme, [
            {
              key: 'addModule',
              value: function addModule(name) {
                var module = _get(
                  BaseTheme.prototype.__proto__ ||
                    Object.getPrototypeOf(BaseTheme.prototype),
                  'addModule',
                  this,
                ).call(this, name);
                if (name === 'toolbar') {
                  this.extendToolbar(module);
                }
                return module;
              },
            },
            {
              key: 'buildButtons',
              value: function buildButtons(buttons, icons) {
                buttons.forEach(function (button) {
                  var className = button.getAttribute('class') || '';
                  className.split(/\s+/).forEach(function (name) {
                    if (!name.startsWith('ql-')) return;
                    name = name.slice('ql-'.length);
                    if (icons[name] == null) return;
                    if (name === 'direction') {
                      button.innerHTML = icons[name][''] + icons[name]['rtl'];
                    } else if (typeof icons[name] === 'string') {
                      button.innerHTML = icons[name];
                    } else {
                      var value = button.value || '';
                      if (value != null && icons[name][value]) {
                        button.innerHTML = icons[name][value];
                      }
                    }
                  });
                });
              },
            },
            {
              key: 'buildPickers',
              value: function buildPickers(selects, icons) {
                var _this2 = this;

                this.pickers = selects.map(function (select) {
                  if (select.classList.contains('ql-align')) {
                    if (select.querySelector('option') == null) {
                      fillSelect(select, ALIGNS);
                    }
                    return new _iconPicker2.default(select, icons.align);
                  } else if (
                    select.classList.contains('ql-background') ||
                    select.classList.contains('ql-color')
                  ) {
                    var format = select.classList.contains('ql-background')
                      ? 'background'
                      : 'color';
                    if (select.querySelector('option') == null) {
                      fillSelect(
                        select,
                        COLORS,
                        format === 'background' ? '#ffffff' : '#000000',
                      );
                    }
                    return new _colorPicker2.default(select, icons[format]);
                  } else {
                    if (select.querySelector('option') == null) {
                      if (select.classList.contains('ql-font')) {
                        fillSelect(select, FONTS);
                      } else if (select.classList.contains('ql-header')) {
                        fillSelect(select, HEADERS);
                      } else if (select.classList.contains('ql-size')) {
                        fillSelect(select, SIZES);
                      }
                    }
                    return new _picker2.default(select);
                  }
                });
                var update = function update() {
                  _this2.pickers.forEach(function (picker) {
                    picker.update();
                  });
                };
                this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
              },
            },
          ]);

          return BaseTheme;
        })(_theme2.default);

        BaseTheme.DEFAULTS = (0, _extend2.default)(
          true,
          {},
          _theme2.default.DEFAULTS,
          {
            modules: {
              toolbar: {
                handlers: {
                  formula: function formula() {
                    this.quill.theme.tooltip.edit('formula');
                  },
                  image: function image() {
                    var _this3 = this;

                    var fileInput = this.container.querySelector(
                      'input.ql-image[type=file]',
                    );
                    if (fileInput == null) {
                      fileInput = document.createElement('input');
                      fileInput.setAttribute('type', 'file');
                      fileInput.setAttribute(
                        'accept',
                        'image/png, image/gif, image/jpeg, image/bmp, image/x-icon',
                      );
                      fileInput.classList.add('ql-image');
                      fileInput.addEventListener('change', function () {
                        if (
                          fileInput.files != null &&
                          fileInput.files[0] != null
                        ) {
                          var reader = new FileReader();
                          reader.onload = function (e) {
                            var range = _this3.quill.getSelection(true);
                            _this3.quill.updateContents(
                              new _quillDelta2.default()
                                .retain(range.index)
                                .delete(range.length)
                                .insert({image: e.target.result}),
                              _emitter2.default.sources.USER,
                            );
                            _this3.quill.setSelection(
                              range.index + 1,
                              _emitter2.default.sources.SILENT,
                            );
                            fileInput.value = '';
                          };
                          reader.readAsDataURL(fileInput.files[0]);
                        }
                      });
                      this.container.appendChild(fileInput);
                    }
                    fileInput.click();
                  },
                  video: function video() {
                    this.quill.theme.tooltip.edit('video');
                  },
                },
              },
            },
          },
        );

        var BaseTooltip = (function (_Tooltip) {
          _inherits(BaseTooltip, _Tooltip);

          function BaseTooltip(quill, boundsContainer) {
            _classCallCheck(this, BaseTooltip);

            var _this4 = _possibleConstructorReturn(
              this,
              (
                BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)
              ).call(this, quill, boundsContainer),
            );

            _this4.textbox = _this4.root.querySelector('input[type="text"]');
            _this4.listen();
            return _this4;
          }

          _createClass(BaseTooltip, [
            {
              key: 'listen',
              value: function listen() {
                var _this5 = this;

                this.textbox.addEventListener('keydown', function (event) {
                  if (_keyboard2.default.match(event, 'enter')) {
                    _this5.save();
                    event.preventDefault();
                  } else if (_keyboard2.default.match(event, 'escape')) {
                    _this5.cancel();
                    event.preventDefault();
                  }
                });
              },
            },
            {
              key: 'cancel',
              value: function cancel() {
                this.hide();
              },
            },
            {
              key: 'edit',
              value: function edit() {
                var mode =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : 'link';
                var preview =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : null;

                this.root.classList.remove('ql-hidden');
                this.root.classList.add('ql-editing');
                if (preview != null) {
                  this.textbox.value = preview;
                } else if (mode !== this.root.getAttribute('data-mode')) {
                  this.textbox.value = '';
                }
                this.position(
                  this.quill.getBounds(this.quill.selection.savedRange),
                );
                this.textbox.select();
                this.textbox.setAttribute(
                  'placeholder',
                  this.textbox.getAttribute('data-' + mode) || '',
                );
                this.root.setAttribute('data-mode', mode);
              },
            },
            {
              key: 'restoreFocus',
              value: function restoreFocus() {
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.quill.focus();
                this.quill.scrollingContainer.scrollTop = scrollTop;
              },
            },
            {
              key: 'save',
              value: function save() {
                var value = this.textbox.value;
                switch (this.root.getAttribute('data-mode')) {
                  case 'link': {
                    var scrollTop = this.quill.root.scrollTop;
                    if (this.linkRange) {
                      this.quill.formatText(
                        this.linkRange,
                        'link',
                        value,
                        _emitter2.default.sources.USER,
                      );
                      delete this.linkRange;
                    } else {
                      this.restoreFocus();
                      this.quill.format(
                        'link',
                        value,
                        _emitter2.default.sources.USER,
                      );
                    }
                    this.quill.root.scrollTop = scrollTop;
                    break;
                  }
                  case 'video': {
                    value = extractVideoUrl(value);
                  } // eslint-disable-next-line no-fallthrough
                  case 'formula': {
                    if (!value) break;
                    var range = this.quill.getSelection(true);
                    if (range != null) {
                      var index = range.index + range.length;
                      this.quill.insertEmbed(
                        index,
                        this.root.getAttribute('data-mode'),
                        value,
                        _emitter2.default.sources.USER,
                      );
                      if (this.root.getAttribute('data-mode') === 'formula') {
                        this.quill.insertText(
                          index + 1,
                          ' ',
                          _emitter2.default.sources.USER,
                        );
                      }
                      this.quill.setSelection(
                        index + 2,
                        _emitter2.default.sources.USER,
                      );
                    }
                    break;
                  }
                  default:
                }
                this.textbox.value = '';
                this.hide();
              },
            },
          ]);

          return BaseTooltip;
        })(_tooltip2.default);

        function extractVideoUrl(url) {
          var match =
            url.match(
              /^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/,
            ) ||
            url.match(
              /^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/,
            );
          if (match) {
            return (
              (match[1] || 'https') +
              '://www.youtube.com/embed/' +
              match[2] +
              '?showinfo=0'
            );
          }
          if (
            (match = url.match(
              /^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/,
            ))
          ) {
            // eslint-disable-line no-cond-assign
            return (
              (match[1] || 'https') +
              '://player.vimeo.com/video/' +
              match[2] +
              '/'
            );
          }
          return url;
        }

        function fillSelect(select, values) {
          var defaultValue =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;

          values.forEach(function (value) {
            var option = document.createElement('option');
            if (value === defaultValue) {
              option.setAttribute('selected', 'selected');
            } else {
              option.setAttribute('value', value);
            }
            select.appendChild(option);
          });
        }

        exports.BaseTooltip = BaseTooltip;
        exports.default = BaseTheme;

        /***/
      },
      /* 44 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {value: true});
        var LinkedList = /** @class */ (function () {
          function LinkedList() {
            this.head = this.tail = null;
            this.length = 0;
          }
          LinkedList.prototype.append = function () {
            var nodes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              nodes[_i] = arguments[_i];
            }
            this.insertBefore(nodes[0], null);
            if (nodes.length > 1) {
              this.append.apply(this, nodes.slice(1));
            }
          };
          LinkedList.prototype.contains = function (node) {
            var cur,
              next = this.iterator();
            while ((cur = next())) {
              if (cur === node) return true;
            }
            return false;
          };
          LinkedList.prototype.insertBefore = function (node, refNode) {
            if (!node) return;
            node.next = refNode;
            if (refNode != null) {
              node.prev = refNode.prev;
              if (refNode.prev != null) {
                refNode.prev.next = node;
              }
              refNode.prev = node;
              if (refNode === this.head) {
                this.head = node;
              }
            } else if (this.tail != null) {
              this.tail.next = node;
              node.prev = this.tail;
              this.tail = node;
            } else {
              node.prev = null;
              this.head = this.tail = node;
            }
            this.length += 1;
          };
          LinkedList.prototype.offset = function (target) {
            var index = 0,
              cur = this.head;
            while (cur != null) {
              if (cur === target) return index;
              index += cur.length();
              cur = cur.next;
            }
            return -1;
          };
          LinkedList.prototype.remove = function (node) {
            if (!this.contains(node)) return;
            if (node.prev != null) node.prev.next = node.next;
            if (node.next != null) node.next.prev = node.prev;
            if (node === this.head) this.head = node.next;
            if (node === this.tail) this.tail = node.prev;
            this.length -= 1;
          };
          LinkedList.prototype.iterator = function (curNode) {
            if (curNode === void 0) {
              curNode = this.head;
            }
            // TODO use yield when we can
            return function () {
              var ret = curNode;
              if (curNode != null) curNode = curNode.next;
              return ret;
            };
          };
          LinkedList.prototype.find = function (index, inclusive) {
            if (inclusive === void 0) {
              inclusive = false;
            }
            var cur,
              next = this.iterator();
            while ((cur = next())) {
              var length = cur.length();
              if (
                index < length ||
                (inclusive &&
                  index === length &&
                  (cur.next == null || cur.next.length() !== 0))
              ) {
                return [cur, index];
              }
              index -= length;
            }
            return [null, 0];
          };
          LinkedList.prototype.forEach = function (callback) {
            var cur,
              next = this.iterator();
            while ((cur = next())) {
              callback(cur);
            }
          };
          LinkedList.prototype.forEachAt = function (index, length, callback) {
            if (length <= 0) return;
            var _a = this.find(index),
              startNode = _a[0],
              offset = _a[1];
            var cur,
              curIndex = index - offset,
              next = this.iterator(startNode);
            while ((cur = next()) && curIndex < index + length) {
              var curLength = cur.length();
              if (index > curIndex) {
                callback(
                  cur,
                  index - curIndex,
                  Math.min(length, curIndex + curLength - index),
                );
              } else {
                callback(
                  cur,
                  0,
                  Math.min(curLength, index + length - curIndex),
                );
              }
              curIndex += curLength;
            }
          };
          LinkedList.prototype.map = function (callback) {
            return this.reduce(function (memo, cur) {
              memo.push(callback(cur));
              return memo;
            }, []);
          };
          LinkedList.prototype.reduce = function (callback, memo) {
            var cur,
              next = this.iterator();
            while ((cur = next())) {
              memo = callback(memo, cur);
            }
            return memo;
          };
          return LinkedList;
        })();
        exports.default = LinkedList;

        /***/
      },
      /* 45 */
      /***/ function (module, exports, __nested_webpack_require_362405__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var container_1 = __nested_webpack_require_362405__(17);
        var Registry = __nested_webpack_require_362405__(1);
        var OBSERVER_CONFIG = {
          attributes: true,
          characterData: true,
          characterDataOldValue: true,
          childList: true,
          subtree: true,
        };
        var MAX_OPTIMIZE_ITERATIONS = 100;
        var ScrollBlot = /** @class */ (function (_super) {
          __extends(ScrollBlot, _super);
          function ScrollBlot(node) {
            var _this = _super.call(this, node) || this;
            _this.scroll = _this;
            _this.observer = new MutationObserver(function (mutations) {
              _this.update(mutations);
            });
            _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
            _this.attach();
            return _this;
          }
          ScrollBlot.prototype.detach = function () {
            _super.prototype.detach.call(this);
            this.observer.disconnect();
          };
          ScrollBlot.prototype.deleteAt = function (index, length) {
            this.update();
            if (index === 0 && length === this.length()) {
              this.children.forEach(function (child) {
                child.remove();
              });
            } else {
              _super.prototype.deleteAt.call(this, index, length);
            }
          };
          ScrollBlot.prototype.formatAt = function (
            index,
            length,
            name,
            value,
          ) {
            this.update();
            _super.prototype.formatAt.call(this, index, length, name, value);
          };
          ScrollBlot.prototype.insertAt = function (index, value, def) {
            this.update();
            _super.prototype.insertAt.call(this, index, value, def);
          };
          ScrollBlot.prototype.optimize = function (mutations, context) {
            var _this = this;
            if (mutations === void 0) {
              mutations = [];
            }
            if (context === void 0) {
              context = {};
            }
            _super.prototype.optimize.call(this, context);
            // We must modify mutations directly, cannot make copy and then modify
            var records = [].slice.call(this.observer.takeRecords());
            // Array.push currently seems to be implemented by a non-tail recursive function
            // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
            while (records.length > 0) mutations.push(records.pop());
            // TODO use WeakMap
            var mark = function (blot, markParent) {
              if (markParent === void 0) {
                markParent = true;
              }
              if (blot == null || blot === _this) return;
              if (blot.domNode.parentNode == null) return;
              // @ts-ignore
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                // @ts-ignore
                blot.domNode[Registry.DATA_KEY].mutations = [];
              }
              if (markParent) mark(blot.parent);
            };
            var optimize = function (blot) {
              // Post-order traversal
              if (
                // @ts-ignore
                blot.domNode[Registry.DATA_KEY] == null ||
                // @ts-ignore
                blot.domNode[Registry.DATA_KEY].mutations == null
              ) {
                return;
              }
              if (blot instanceof container_1.default) {
                blot.children.forEach(optimize);
              }
              blot.optimize(context);
            };
            var remaining = mutations;
            for (var i = 0; remaining.length > 0; i += 1) {
              if (i >= MAX_OPTIMIZE_ITERATIONS) {
                throw new Error(
                  '[Parchment] Maximum optimize iterations reached',
                );
              }
              remaining.forEach(function (mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null) return;
                if (blot.domNode === mutation.target) {
                  if (mutation.type === 'childList') {
                    mark(Registry.find(mutation.previousSibling, false));
                    [].forEach.call(mutation.addedNodes, function (node) {
                      var child = Registry.find(node, false);
                      mark(child, false);
                      if (child instanceof container_1.default) {
                        child.children.forEach(function (grandChild) {
                          mark(grandChild, false);
                        });
                      }
                    });
                  } else if (mutation.type === 'attributes') {
                    mark(blot.prev);
                  }
                }
                mark(blot);
              });
              this.children.forEach(optimize);
              remaining = [].slice.call(this.observer.takeRecords());
              records = remaining.slice();
              while (records.length > 0) mutations.push(records.pop());
            }
          };
          ScrollBlot.prototype.update = function (mutations, context) {
            var _this = this;
            if (context === void 0) {
              context = {};
            }
            mutations = mutations || this.observer.takeRecords();
            // TODO use WeakMap
            mutations
              .map(function (mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null) return null;
                // @ts-ignore
                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                  return blot;
                } else {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                  return null;
                }
              })
              .forEach(function (blot) {
                if (
                  blot == null ||
                  blot === _this ||
                  //@ts-ignore
                  blot.domNode[Registry.DATA_KEY] == null
                )
                  return;
                // @ts-ignore
                blot.update(
                  blot.domNode[Registry.DATA_KEY].mutations || [],
                  context,
                );
              });
            // @ts-ignore
            if (this.domNode[Registry.DATA_KEY].mutations != null) {
              // @ts-ignore
              _super.prototype.update.call(
                this,
                this.domNode[Registry.DATA_KEY].mutations,
                context,
              );
            }
            this.optimize(mutations, context);
          };
          ScrollBlot.blotName = 'scroll';
          ScrollBlot.defaultChild = 'block';
          ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
          ScrollBlot.tagName = 'DIV';
          return ScrollBlot;
        })(container_1.default);
        exports.default = ScrollBlot;

        /***/
      },
      /* 46 */
      /***/ function (module, exports, __nested_webpack_require_370497__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var format_1 = __nested_webpack_require_370497__(18);
        var Registry = __nested_webpack_require_370497__(1);
        // Shallow object comparison
        function isEqual(obj1, obj2) {
          if (Object.keys(obj1).length !== Object.keys(obj2).length)
            return false;
          // @ts-ignore
          for (var prop in obj1) {
            // @ts-ignore
            if (obj1[prop] !== obj2[prop]) return false;
          }
          return true;
        }
        var InlineBlot = /** @class */ (function (_super) {
          __extends(InlineBlot, _super);
          function InlineBlot() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          InlineBlot.formats = function (domNode) {
            if (domNode.tagName === InlineBlot.tagName) return undefined;
            return _super.formats.call(this, domNode);
          };
          InlineBlot.prototype.format = function (name, value) {
            var _this = this;
            if (name === this.statics.blotName && !value) {
              this.children.forEach(function (child) {
                if (!(child instanceof format_1.default)) {
                  child = child.wrap(InlineBlot.blotName, true);
                }
                _this.attributes.copy(child);
              });
              this.unwrap();
            } else {
              _super.prototype.format.call(this, name, value);
            }
          };
          InlineBlot.prototype.formatAt = function (
            index,
            length,
            name,
            value,
          ) {
            if (
              this.formats()[name] != null ||
              Registry.query(name, Registry.Scope.ATTRIBUTE)
            ) {
              var blot = this.isolate(index, length);
              blot.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index, length, name, value);
            }
          };
          InlineBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            var formats = this.formats();
            if (Object.keys(formats).length === 0) {
              return this.unwrap(); // unformatted span
            }
            var next = this.next;
            if (
              next instanceof InlineBlot &&
              next.prev === this &&
              isEqual(formats, next.formats())
            ) {
              next.moveChildren(this);
              next.remove();
            }
          };
          InlineBlot.blotName = 'inline';
          InlineBlot.scope = Registry.Scope.INLINE_BLOT;
          InlineBlot.tagName = 'SPAN';
          return InlineBlot;
        })(format_1.default);
        exports.default = InlineBlot;

        /***/
      },
      /* 47 */
      /***/ function (module, exports, __nested_webpack_require_374197__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var format_1 = __nested_webpack_require_374197__(18);
        var Registry = __nested_webpack_require_374197__(1);
        var BlockBlot = /** @class */ (function (_super) {
          __extends(BlockBlot, _super);
          function BlockBlot() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          BlockBlot.formats = function (domNode) {
            var tagName = Registry.query(BlockBlot.blotName).tagName;
            if (domNode.tagName === tagName) return undefined;
            return _super.formats.call(this, domNode);
          };
          BlockBlot.prototype.format = function (name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) == null) {
              return;
            } else if (name === this.statics.blotName && !value) {
              this.replaceWith(BlockBlot.blotName);
            } else {
              _super.prototype.format.call(this, name, value);
            }
          };
          BlockBlot.prototype.formatAt = function (index, length, name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) != null) {
              this.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index, length, name, value);
            }
          };
          BlockBlot.prototype.insertAt = function (index, value, def) {
            if (
              def == null ||
              Registry.query(value, Registry.Scope.INLINE) != null
            ) {
              // Insert text or inline
              _super.prototype.insertAt.call(this, index, value, def);
            } else {
              var after = this.split(index);
              var blot = Registry.create(value, def);
              after.parent.insertBefore(blot, after);
            }
          };
          BlockBlot.prototype.update = function (mutations, context) {
            if (navigator.userAgent.match(/Trident/)) {
              this.build();
            } else {
              _super.prototype.update.call(this, mutations, context);
            }
          };
          BlockBlot.blotName = 'block';
          BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
          BlockBlot.tagName = 'P';
          return BlockBlot;
        })(format_1.default);
        exports.default = BlockBlot;

        /***/
      },
      /* 48 */
      /***/ function (module, exports, __nested_webpack_require_377436__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var leaf_1 = __nested_webpack_require_377436__(19);
        var EmbedBlot = /** @class */ (function (_super) {
          __extends(EmbedBlot, _super);
          function EmbedBlot() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          EmbedBlot.formats = function (domNode) {
            return undefined;
          };
          EmbedBlot.prototype.format = function (name, value) {
            // super.formatAt wraps, which is what we want in general,
            // but this allows subclasses to overwrite for formats
            // that just apply to particular embeds
            _super.prototype.formatAt.call(this, 0, this.length(), name, value);
          };
          EmbedBlot.prototype.formatAt = function (index, length, name, value) {
            if (index === 0 && length === this.length()) {
              this.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index, length, name, value);
            }
          };
          EmbedBlot.prototype.formats = function () {
            return this.statics.formats(this.domNode);
          };
          return EmbedBlot;
        })(leaf_1.default);
        exports.default = EmbedBlot;

        /***/
      },
      /* 49 */
      /***/ function (module, exports, __nested_webpack_require_379624__) {
        'use strict';

        var __extends =
          (this && this.__extends) ||
          (function () {
            var extendStatics =
              Object.setPrototypeOf ||
              ({__proto__: []} instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null
                  ? Object.create(b)
                  : ((__.prototype = b.prototype), new __());
            };
          })();
        Object.defineProperty(exports, '__esModule', {value: true});
        var leaf_1 = __nested_webpack_require_379624__(19);
        var Registry = __nested_webpack_require_379624__(1);
        var TextBlot = /** @class */ (function (_super) {
          __extends(TextBlot, _super);
          function TextBlot(node) {
            var _this = _super.call(this, node) || this;
            _this.text = _this.statics.value(_this.domNode);
            return _this;
          }
          TextBlot.create = function (value) {
            return document.createTextNode(value);
          };
          TextBlot.value = function (domNode) {
            var text = domNode.data;
            // @ts-ignore
            if (text['normalize']) text = text['normalize']();
            return text;
          };
          TextBlot.prototype.deleteAt = function (index, length) {
            this.domNode.data = this.text =
              this.text.slice(0, index) + this.text.slice(index + length);
          };
          TextBlot.prototype.index = function (node, offset) {
            if (this.domNode === node) {
              return offset;
            }
            return -1;
          };
          TextBlot.prototype.insertAt = function (index, value, def) {
            if (def == null) {
              this.text =
                this.text.slice(0, index) + value + this.text.slice(index);
              this.domNode.data = this.text;
            } else {
              _super.prototype.insertAt.call(this, index, value, def);
            }
          };
          TextBlot.prototype.length = function () {
            return this.text.length;
          };
          TextBlot.prototype.optimize = function (context) {
            _super.prototype.optimize.call(this, context);
            this.text = this.statics.value(this.domNode);
            if (this.text.length === 0) {
              this.remove();
            } else if (
              this.next instanceof TextBlot &&
              this.next.prev === this
            ) {
              this.insertAt(this.length(), this.next.value());
              this.next.remove();
            }
          };
          TextBlot.prototype.position = function (index, inclusive) {
            if (inclusive === void 0) {
              inclusive = false;
            }
            return [this.domNode, index];
          };
          TextBlot.prototype.split = function (index, force) {
            if (force === void 0) {
              force = false;
            }
            if (!force) {
              if (index === 0) return this;
              if (index === this.length()) return this.next;
            }
            var after = Registry.create(this.domNode.splitText(index));
            this.parent.insertBefore(after, this.next);
            this.text = this.statics.value(this.domNode);
            return after;
          };
          TextBlot.prototype.update = function (mutations, context) {
            var _this = this;
            if (
              mutations.some(function (mutation) {
                return (
                  mutation.type === 'characterData' &&
                  mutation.target === _this.domNode
                );
              })
            ) {
              this.text = this.statics.value(this.domNode);
            }
          };
          TextBlot.prototype.value = function () {
            return this.text;
          };
          TextBlot.blotName = 'text';
          TextBlot.scope = Registry.Scope.INLINE_BLOT;
          return TextBlot;
        })(leaf_1.default);
        exports.default = TextBlot;

        /***/
      },
      /* 50 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        var elem = document.createElement('div');
        elem.classList.toggle('test-class', false);
        if (elem.classList.contains('test-class')) {
          var _toggle = DOMTokenList.prototype.toggle;
          DOMTokenList.prototype.toggle = function (token, force) {
            if (arguments.length > 1 && !this.contains(token) === !force) {
              return force;
            } else {
              return _toggle.call(this, token);
            }
          };
        }

        if (!String.prototype.startsWith) {
          String.prototype.startsWith = function (searchString, position) {
            position = position || 0;
            return this.substr(position, searchString.length) === searchString;
          };
        }

        if (!String.prototype.endsWith) {
          String.prototype.endsWith = function (searchString, position) {
            var subjectString = this.toString();
            if (
              typeof position !== 'number' ||
              !isFinite(position) ||
              Math.floor(position) !== position ||
              position > subjectString.length
            ) {
              position = subjectString.length;
            }
            position -= searchString.length;
            var lastIndex = subjectString.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
          };
        }

        if (!Array.prototype.find) {
          Object.defineProperty(Array.prototype, 'find', {
            value: function value(predicate) {
              if (this === null) {
                throw new TypeError(
                  'Array.prototype.find called on null or undefined',
                );
              }
              if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
              }
              var list = Object(this);
              var length = list.length >>> 0;
              var thisArg = arguments[1];
              var value;

              for (var i = 0; i < length; i++) {
                value = list[i];
                if (predicate.call(thisArg, value, i, list)) {
                  return value;
                }
              }
              return undefined;
            },
          });
        }

        document.addEventListener('DOMContentLoaded', function () {
          // Disable resizing in Firefox
          document.execCommand('enableObjectResizing', false, false);
          // Disable automatic linkifying in IE11
          document.execCommand('autoUrlDetect', false, false);
        });

        /***/
      },
      /* 51 */
      /***/ function (module, exports) {
        /**
         * This library modifies the diff-patch-match library by Neil Fraser
         * by removing the patch and match functionality and certain advanced
         * options in the diff function. The original license is as follows:
         *
         * ===
         *
         * Diff Match and Patch
         *
         * Copyright 2006 Google Inc.
         * http://code.google.com/p/google-diff-match-patch/
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */

        /**
         * The data structure representing a diff is an array of tuples:
         * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
         * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
         */
        var DIFF_DELETE = -1;
        var DIFF_INSERT = 1;
        var DIFF_EQUAL = 0;

        /**
         * Find the differences between two texts.  Simplifies the problem by stripping
         * any common prefix or suffix off the texts before diffing.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {Int} cursor_pos Expected edit position in text1 (optional)
         * @return {Array} Array of diff tuples.
         */
        function diff_main(text1, text2, cursor_pos) {
          // Check for equality (speedup).
          if (text1 == text2) {
            if (text1) {
              return [[DIFF_EQUAL, text1]];
            }
            return [];
          }

          // Check cursor_pos within bounds
          if (cursor_pos < 0 || text1.length < cursor_pos) {
            cursor_pos = null;
          }

          // Trim off common prefix (speedup).
          var commonlength = diff_commonPrefix(text1, text2);
          var commonprefix = text1.substring(0, commonlength);
          text1 = text1.substring(commonlength);
          text2 = text2.substring(commonlength);

          // Trim off common suffix (speedup).
          commonlength = diff_commonSuffix(text1, text2);
          var commonsuffix = text1.substring(text1.length - commonlength);
          text1 = text1.substring(0, text1.length - commonlength);
          text2 = text2.substring(0, text2.length - commonlength);

          // Compute the diff on the middle block.
          var diffs = diff_compute_(text1, text2);

          // Restore the prefix and suffix.
          if (commonprefix) {
            diffs.unshift([DIFF_EQUAL, commonprefix]);
          }
          if (commonsuffix) {
            diffs.push([DIFF_EQUAL, commonsuffix]);
          }
          diff_cleanupMerge(diffs);
          if (cursor_pos != null) {
            diffs = fix_cursor(diffs, cursor_pos);
          }
          diffs = fix_emoji(diffs);
          return diffs;
        }

        /**
         * Find the differences between two texts.  Assumes that the texts do not
         * have any common prefix or suffix.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @return {Array} Array of diff tuples.
         */
        function diff_compute_(text1, text2) {
          var diffs;

          if (!text1) {
            // Just add some text (speedup).
            return [[DIFF_INSERT, text2]];
          }

          if (!text2) {
            // Just delete some text (speedup).
            return [[DIFF_DELETE, text1]];
          }

          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          var i = longtext.indexOf(shorttext);
          if (i != -1) {
            // Shorter text is inside the longer text (speedup).
            diffs = [
              [DIFF_INSERT, longtext.substring(0, i)],
              [DIFF_EQUAL, shorttext],
              [DIFF_INSERT, longtext.substring(i + shorttext.length)],
            ];
            // Swap insertions for deletions if diff is reversed.
            if (text1.length > text2.length) {
              diffs[0][0] = diffs[2][0] = DIFF_DELETE;
            }
            return diffs;
          }

          if (shorttext.length == 1) {
            // Single character string.
            // After the previous speedup, the character can't be an equality.
            return [
              [DIFF_DELETE, text1],
              [DIFF_INSERT, text2],
            ];
          }

          // Check to see if the problem can be split in two.
          var hm = diff_halfMatch_(text1, text2);
          if (hm) {
            // A half-match was found, sort out the return data.
            var text1_a = hm[0];
            var text1_b = hm[1];
            var text2_a = hm[2];
            var text2_b = hm[3];
            var mid_common = hm[4];
            // Send both pairs off for separate processing.
            var diffs_a = diff_main(text1_a, text2_a);
            var diffs_b = diff_main(text1_b, text2_b);
            // Merge the results.
            return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
          }

          return diff_bisect_(text1, text2);
        }

        /**
         * Find the 'middle snake' of a diff, split the problem in two
         * and return the recursively constructed diff.
         * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @return {Array} Array of diff tuples.
         * @private
         */
        function diff_bisect_(text1, text2) {
          // Cache the text lengths to prevent multiple calls.
          var text1_length = text1.length;
          var text2_length = text2.length;
          var max_d = Math.ceil((text1_length + text2_length) / 2);
          var v_offset = max_d;
          var v_length = 2 * max_d;
          var v1 = new Array(v_length);
          var v2 = new Array(v_length);
          // Setting all elements to -1 is faster in Chrome & Firefox than mixing
          // integers and undefined.
          for (var x = 0; x < v_length; x++) {
            v1[x] = -1;
            v2[x] = -1;
          }
          v1[v_offset + 1] = 0;
          v2[v_offset + 1] = 0;
          var delta = text1_length - text2_length;
          // If the total number of characters is odd, then the front path will collide
          // with the reverse path.
          var front = delta % 2 != 0;
          // Offsets for start and end of k loop.
          // Prevents mapping of space beyond the grid.
          var k1start = 0;
          var k1end = 0;
          var k2start = 0;
          var k2end = 0;
          for (var d = 0; d < max_d; d++) {
            // Walk the front path one step.
            for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
              var k1_offset = v_offset + k1;
              var x1;
              if (
                k1 == -d ||
                (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])
              ) {
                x1 = v1[k1_offset + 1];
              } else {
                x1 = v1[k1_offset - 1] + 1;
              }
              var y1 = x1 - k1;
              while (
                x1 < text1_length &&
                y1 < text2_length &&
                text1.charAt(x1) == text2.charAt(y1)
              ) {
                x1++;
                y1++;
              }
              v1[k1_offset] = x1;
              if (x1 > text1_length) {
                // Ran off the right of the graph.
                k1end += 2;
              } else if (y1 > text2_length) {
                // Ran off the bottom of the graph.
                k1start += 2;
              } else if (front) {
                var k2_offset = v_offset + delta - k1;
                if (
                  k2_offset >= 0 &&
                  k2_offset < v_length &&
                  v2[k2_offset] != -1
                ) {
                  // Mirror x2 onto top-left coordinate system.
                  var x2 = text1_length - v2[k2_offset];
                  if (x1 >= x2) {
                    // Overlap detected.
                    return diff_bisectSplit_(text1, text2, x1, y1);
                  }
                }
              }
            }

            // Walk the reverse path one step.
            for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
              var k2_offset = v_offset + k2;
              var x2;
              if (
                k2 == -d ||
                (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])
              ) {
                x2 = v2[k2_offset + 1];
              } else {
                x2 = v2[k2_offset - 1] + 1;
              }
              var y2 = x2 - k2;
              while (
                x2 < text1_length &&
                y2 < text2_length &&
                text1.charAt(text1_length - x2 - 1) ==
                  text2.charAt(text2_length - y2 - 1)
              ) {
                x2++;
                y2++;
              }
              v2[k2_offset] = x2;
              if (x2 > text1_length) {
                // Ran off the left of the graph.
                k2end += 2;
              } else if (y2 > text2_length) {
                // Ran off the top of the graph.
                k2start += 2;
              } else if (!front) {
                var k1_offset = v_offset + delta - k2;
                if (
                  k1_offset >= 0 &&
                  k1_offset < v_length &&
                  v1[k1_offset] != -1
                ) {
                  var x1 = v1[k1_offset];
                  var y1 = v_offset + x1 - k1_offset;
                  // Mirror x2 onto top-left coordinate system.
                  x2 = text1_length - x2;
                  if (x1 >= x2) {
                    // Overlap detected.
                    return diff_bisectSplit_(text1, text2, x1, y1);
                  }
                }
              }
            }
          }
          // Diff took too long and hit the deadline or
          // number of diffs equals number of characters, no commonality at all.
          return [
            [DIFF_DELETE, text1],
            [DIFF_INSERT, text2],
          ];
        }

        /**
         * Given the location of the 'middle snake', split the diff in two parts
         * and recurse.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} x Index of split point in text1.
         * @param {number} y Index of split point in text2.
         * @return {Array} Array of diff tuples.
         */
        function diff_bisectSplit_(text1, text2, x, y) {
          var text1a = text1.substring(0, x);
          var text2a = text2.substring(0, y);
          var text1b = text1.substring(x);
          var text2b = text2.substring(y);

          // Compute both diffs serially.
          var diffs = diff_main(text1a, text2a);
          var diffsb = diff_main(text1b, text2b);

          return diffs.concat(diffsb);
        }

        /**
         * Determine the common prefix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the start of each
         *     string.
         */
        function diff_commonPrefix(text1, text2) {
          // Quick check for common null cases.
          if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
            return 0;
          }
          // Binary search.
          // Performance analysis: http://neil.fraser.name/news/2007/10/09/
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerstart = 0;
          while (pointermin < pointermid) {
            if (
              text1.substring(pointerstart, pointermid) ==
              text2.substring(pointerstart, pointermid)
            ) {
              pointermin = pointermid;
              pointerstart = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }

        /**
         * Determine the common suffix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the end of each string.
         */
        function diff_commonSuffix(text1, text2) {
          // Quick check for common null cases.
          if (
            !text1 ||
            !text2 ||
            text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)
          ) {
            return 0;
          }
          // Binary search.
          // Performance analysis: http://neil.fraser.name/news/2007/10/09/
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerend = 0;
          while (pointermin < pointermid) {
            if (
              text1.substring(
                text1.length - pointermid,
                text1.length - pointerend,
              ) ==
              text2.substring(
                text2.length - pointermid,
                text2.length - pointerend,
              )
            ) {
              pointermin = pointermid;
              pointerend = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }

        /**
         * Do the two texts share a substring which is at least half the length of the
         * longer text?
         * This speedup can produce non-minimal diffs.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {Array.<string>} Five element Array, containing the prefix of
         *     text1, the suffix of text1, the prefix of text2, the suffix of
         *     text2 and the common middle.  Or null if there was no match.
         */
        function diff_halfMatch_(text1, text2) {
          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
            return null; // Pointless.
          }

          /**
           * Does a substring of shorttext exist within longtext such that the substring
           * is at least half the length of longtext?
           * Closure, but does not reference any external variables.
           * @param {string} longtext Longer string.
           * @param {string} shorttext Shorter string.
           * @param {number} i Start index of quarter length substring within longtext.
           * @return {Array.<string>} Five element Array, containing the prefix of
           *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
           *     of shorttext and the common middle.  Or null if there was no match.
           * @private
           */
          function diff_halfMatchI_(longtext, shorttext, i) {
            // Start with a 1/4 length substring at position i as a seed.
            var seed = longtext.substring(
              i,
              i + Math.floor(longtext.length / 4),
            );
            var j = -1;
            var best_common = '';
            var best_longtext_a,
              best_longtext_b,
              best_shorttext_a,
              best_shorttext_b;
            while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
              var prefixLength = diff_commonPrefix(
                longtext.substring(i),
                shorttext.substring(j),
              );
              var suffixLength = diff_commonSuffix(
                longtext.substring(0, i),
                shorttext.substring(0, j),
              );
              if (best_common.length < suffixLength + prefixLength) {
                best_common =
                  shorttext.substring(j - suffixLength, j) +
                  shorttext.substring(j, j + prefixLength);
                best_longtext_a = longtext.substring(0, i - suffixLength);
                best_longtext_b = longtext.substring(i + prefixLength);
                best_shorttext_a = shorttext.substring(0, j - suffixLength);
                best_shorttext_b = shorttext.substring(j + prefixLength);
              }
            }
            if (best_common.length * 2 >= longtext.length) {
              return [
                best_longtext_a,
                best_longtext_b,
                best_shorttext_a,
                best_shorttext_b,
                best_common,
              ];
            } else {
              return null;
            }
          }

          // First check if the second quarter is the seed for a half-match.
          var hm1 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 4),
          );
          // Check again based on the third quarter.
          var hm2 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 2),
          );
          var hm;
          if (!hm1 && !hm2) {
            return null;
          } else if (!hm2) {
            hm = hm1;
          } else if (!hm1) {
            hm = hm2;
          } else {
            // Both matched.  Select the longest.
            hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
          }

          // A half-match was found, sort out the return data.
          var text1_a, text1_b, text2_a, text2_b;
          if (text1.length > text2.length) {
            text1_a = hm[0];
            text1_b = hm[1];
            text2_a = hm[2];
            text2_b = hm[3];
          } else {
            text2_a = hm[0];
            text2_b = hm[1];
            text1_a = hm[2];
            text1_b = hm[3];
          }
          var mid_common = hm[4];
          return [text1_a, text1_b, text2_a, text2_b, mid_common];
        }

        /**
         * Reorder and merge like edit sections.  Merge equalities.
         * Any edit section can move as long as it doesn't cross an equality.
         * @param {Array} diffs Array of diff tuples.
         */
        function diff_cleanupMerge(diffs) {
          diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.
          var pointer = 0;
          var count_delete = 0;
          var count_insert = 0;
          var text_delete = '';
          var text_insert = '';
          var commonlength;
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_EQUAL:
                // Upon reaching an equality, check for prior redundancies.
                if (count_delete + count_insert > 1) {
                  if (count_delete !== 0 && count_insert !== 0) {
                    // Factor out any common prefixies.
                    commonlength = diff_commonPrefix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      if (
                        pointer - count_delete - count_insert > 0 &&
                        diffs[pointer - count_delete - count_insert - 1][0] ==
                          DIFF_EQUAL
                      ) {
                        diffs[pointer - count_delete - count_insert - 1][1] +=
                          text_insert.substring(0, commonlength);
                      } else {
                        diffs.splice(0, 0, [
                          DIFF_EQUAL,
                          text_insert.substring(0, commonlength),
                        ]);
                        pointer++;
                      }
                      text_insert = text_insert.substring(commonlength);
                      text_delete = text_delete.substring(commonlength);
                    }
                    // Factor out any common suffixies.
                    commonlength = diff_commonSuffix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      diffs[pointer][1] =
                        text_insert.substring(
                          text_insert.length - commonlength,
                        ) + diffs[pointer][1];
                      text_insert = text_insert.substring(
                        0,
                        text_insert.length - commonlength,
                      );
                      text_delete = text_delete.substring(
                        0,
                        text_delete.length - commonlength,
                      );
                    }
                  }
                  // Delete the offending records and add the merged ones.
                  if (count_delete === 0) {
                    diffs.splice(
                      pointer - count_insert,
                      count_delete + count_insert,
                      [DIFF_INSERT, text_insert],
                    );
                  } else if (count_insert === 0) {
                    diffs.splice(
                      pointer - count_delete,
                      count_delete + count_insert,
                      [DIFF_DELETE, text_delete],
                    );
                  } else {
                    diffs.splice(
                      pointer - count_delete - count_insert,
                      count_delete + count_insert,
                      [DIFF_DELETE, text_delete],
                      [DIFF_INSERT, text_insert],
                    );
                  }
                  pointer =
                    pointer -
                    count_delete -
                    count_insert +
                    (count_delete ? 1 : 0) +
                    (count_insert ? 1 : 0) +
                    1;
                } else if (
                  pointer !== 0 &&
                  diffs[pointer - 1][0] == DIFF_EQUAL
                ) {
                  // Merge this equality with the previous one.
                  diffs[pointer - 1][1] += diffs[pointer][1];
                  diffs.splice(pointer, 1);
                } else {
                  pointer++;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = '';
                text_insert = '';
                break;
            }
          }
          if (diffs[diffs.length - 1][1] === '') {
            diffs.pop(); // Remove the dummy entry at the end.
          }

          // Second pass: look for single edits surrounded on both sides by equalities
          // which can be shifted sideways to eliminate an equality.
          // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
          var changes = false;
          pointer = 1;
          // Intentionally ignore the first and last element (don't need checking).
          while (pointer < diffs.length - 1) {
            if (
              diffs[pointer - 1][0] == DIFF_EQUAL &&
              diffs[pointer + 1][0] == DIFF_EQUAL
            ) {
              // This is a single edit surrounded by equalities.
              if (
                diffs[pointer][1].substring(
                  diffs[pointer][1].length - diffs[pointer - 1][1].length,
                ) == diffs[pointer - 1][1]
              ) {
                // Shift the edit over the previous equality.
                diffs[pointer][1] =
                  diffs[pointer - 1][1] +
                  diffs[pointer][1].substring(
                    0,
                    diffs[pointer][1].length - diffs[pointer - 1][1].length,
                  );
                diffs[pointer + 1][1] =
                  diffs[pointer - 1][1] + diffs[pointer + 1][1];
                diffs.splice(pointer - 1, 1);
                changes = true;
              } else if (
                diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
                diffs[pointer + 1][1]
              ) {
                // Shift the edit over the next equality.
                diffs[pointer - 1][1] += diffs[pointer + 1][1];
                diffs[pointer][1] =
                  diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
                  diffs[pointer + 1][1];
                diffs.splice(pointer + 1, 1);
                changes = true;
              }
            }
            pointer++;
          }
          // If shifts were made, the diff needs reordering and another shift sweep.
          if (changes) {
            diff_cleanupMerge(diffs);
          }
        }

        var diff = diff_main;
        diff.INSERT = DIFF_INSERT;
        diff.DELETE = DIFF_DELETE;
        diff.EQUAL = DIFF_EQUAL;

        module.exports = diff;

        /*
         * Modify a diff such that the cursor position points to the start of a change:
         * E.g.
         *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
         *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
         *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
         *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
         *
         * @param {Array} diffs Array of diff tuples
         * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
         * @return {Array} A tuple [cursor location in the modified diff, modified diff]
         */
        function cursor_normalize_diff(diffs, cursor_pos) {
          if (cursor_pos === 0) {
            return [DIFF_EQUAL, diffs];
          }
          for (var current_pos = 0, i = 0; i < diffs.length; i++) {
            var d = diffs[i];
            if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
              var next_pos = current_pos + d[1].length;
              if (cursor_pos === next_pos) {
                return [i + 1, diffs];
              } else if (cursor_pos < next_pos) {
                // copy to prevent side effects
                diffs = diffs.slice();
                // split d into two diff changes
                var split_pos = cursor_pos - current_pos;
                var d_left = [d[0], d[1].slice(0, split_pos)];
                var d_right = [d[0], d[1].slice(split_pos)];
                diffs.splice(i, 1, d_left, d_right);
                return [i + 1, diffs];
              } else {
                current_pos = next_pos;
              }
            }
          }
          throw new Error('cursor_pos is out of bounds!');
        }

        /*
         * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
         *
         * Case 1)
         *   Check if a naive shift is possible:
         *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
         *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
         * Case 2)
         *   Check if the following shifts are possible:
         *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
         *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
         *         ^            ^
         *         d          d_next
         *
         * @param {Array} diffs Array of diff tuples
         * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
         * @return {Array} Array of diff tuples
         */
        function fix_cursor(diffs, cursor_pos) {
          var norm = cursor_normalize_diff(diffs, cursor_pos);
          var ndiffs = norm[1];
          var cursor_pointer = norm[0];
          var d = ndiffs[cursor_pointer];
          var d_next = ndiffs[cursor_pointer + 1];

          if (d == null) {
            // Text was deleted from end of original string,
            // cursor is now out of bounds in new string
            return diffs;
          } else if (d[0] !== DIFF_EQUAL) {
            // A modification happened at the cursor location.
            // This is the expected outcome, so we can return the original diff.
            return diffs;
          } else {
            if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
              // Case 1)
              // It is possible to perform a naive shift
              ndiffs.splice(cursor_pointer, 2, d_next, d);
              return merge_tuples(ndiffs, cursor_pointer, 2);
            } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
              // Case 2)
              // d[1] is a prefix of d_next[1]
              // We can assume that d_next[0] !== 0, since d[0] === 0
              // Shift edit locations..
              ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
              var suffix = d_next[1].slice(d[1].length);
              if (suffix.length > 0) {
                ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
              }
              return merge_tuples(ndiffs, cursor_pointer, 3);
            } else {
              // Not possible to perform any modification
              return diffs;
            }
          }
        }

        /*
         * Check diff did not split surrogate pairs.
         * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
         *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
         *
         * @param {Array} diffs Array of diff tuples
         * @return {Array} Array of diff tuples
         */
        function fix_emoji(diffs) {
          var compact = false;
          var starts_with_pair_end = function (str) {
            return str.charCodeAt(0) >= 0xdc00 && str.charCodeAt(0) <= 0xdfff;
          };
          var ends_with_pair_start = function (str) {
            return (
              str.charCodeAt(str.length - 1) >= 0xd800 &&
              str.charCodeAt(str.length - 1) <= 0xdbff
            );
          };
          for (var i = 2; i < diffs.length; i += 1) {
            if (
              diffs[i - 2][0] === DIFF_EQUAL &&
              ends_with_pair_start(diffs[i - 2][1]) &&
              diffs[i - 1][0] === DIFF_DELETE &&
              starts_with_pair_end(diffs[i - 1][1]) &&
              diffs[i][0] === DIFF_INSERT &&
              starts_with_pair_end(diffs[i][1])
            ) {
              compact = true;

              diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];
              diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];

              diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);
            }
          }
          if (!compact) {
            return diffs;
          }
          var fixed_diffs = [];
          for (var i = 0; i < diffs.length; i += 1) {
            if (diffs[i][1].length > 0) {
              fixed_diffs.push(diffs[i]);
            }
          }
          return fixed_diffs;
        }

        /*
         * Try to merge tuples with their neigbors in a given range.
         * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
         *
         * @param {Array} diffs Array of diff tuples.
         * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
         * @param {Int} length Number of consecutive elements to check.
         * @return {Array} Array of merged diff tuples.
         */
        function merge_tuples(diffs, start, length) {
          // Check from (start-1) to (start+length).
          for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
            if (i + 1 < diffs.length) {
              var left_d = diffs[i];
              var right_d = diffs[i + 1];
              if (left_d[0] === right_d[1]) {
                diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
              }
            }
          }
          return diffs;
        }

        /***/
      },
      /* 52 */
      /***/ function (module, exports) {
        exports = module.exports =
          typeof Object.keys === 'function' ? Object.keys : shim;

        exports.shim = shim;
        function shim(obj) {
          var keys = [];
          for (var key in obj) keys.push(key);
          return keys;
        }

        /***/
      },
      /* 53 */
      /***/ function (module, exports) {
        var supportsArgumentsClass =
          (function () {
            return Object.prototype.toString.call(arguments);
          })() == '[object Arguments]';

        exports = module.exports = supportsArgumentsClass
          ? supported
          : unsupported;

        exports.supported = supported;
        function supported(object) {
          return Object.prototype.toString.call(object) == '[object Arguments]';
        }

        exports.unsupported = unsupported;
        function unsupported(object) {
          return (
            (object &&
              typeof object == 'object' &&
              typeof object.length == 'number' &&
              Object.prototype.hasOwnProperty.call(object, 'callee') &&
              !Object.prototype.propertyIsEnumerable.call(object, 'callee')) ||
            false
          );
        }

        /***/
      },
      /* 54 */
      /***/ function (module, exports) {
        'use strict';

        var has = Object.prototype.hasOwnProperty,
          prefix = '~';

        /**
         * Constructor to create a storage for our `EE` objects.
         * An `Events` instance is a plain object whose properties are event names.
         *
         * @constructor
         * @api private
         */
        function Events() {}

        //
        // We try to not inherit from `Object.prototype`. In some engines creating an
        // instance in this way is faster than calling `Object.create(null)` directly.
        // If `Object.create(null)` is not supported we prefix the event names with a
        // character to make sure that the built-in object properties are not
        // overridden or used as an attack vector.
        //
        if (Object.create) {
          Events.prototype = Object.create(null);

          //
          // This hack is needed because the `__proto__` property is still inherited in
          // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
          //
          if (!new Events().__proto__) prefix = false;
        }

        /**
         * Representation of a single event listener.
         *
         * @param {Function} fn The listener function.
         * @param {Mixed} context The context to invoke the listener with.
         * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
         * @constructor
         * @api private
         */
        function EE(fn, context, once) {
          this.fn = fn;
          this.context = context;
          this.once = once || false;
        }

        /**
         * Minimal `EventEmitter` interface that is molded against the Node.js
         * `EventEmitter` interface.
         *
         * @constructor
         * @api public
         */
        function EventEmitter() {
          this._events = new Events();
          this._eventsCount = 0;
        }

        /**
         * Return an array listing the events for which the emitter has registered
         * listeners.
         *
         * @returns {Array}
         * @api public
         */
        EventEmitter.prototype.eventNames = function eventNames() {
          var names = [],
            events,
            name;

          if (this._eventsCount === 0) return names;

          for (name in (events = this._events)) {
            if (has.call(events, name))
              names.push(prefix ? name.slice(1) : name);
          }

          if (Object.getOwnPropertySymbols) {
            return names.concat(Object.getOwnPropertySymbols(events));
          }

          return names;
        };

        /**
         * Return the listeners registered for a given event.
         *
         * @param {String|Symbol} event The event name.
         * @param {Boolean} exists Only check if there are listeners.
         * @returns {Array|Boolean}
         * @api public
         */
        EventEmitter.prototype.listeners = function listeners(event, exists) {
          var evt = prefix ? prefix + event : event,
            available = this._events[evt];

          if (exists) return !!available;
          if (!available) return [];
          if (available.fn) return [available.fn];

          for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
            ee[i] = available[i].fn;
          }

          return ee;
        };

        /**
         * Calls each of the listeners registered for a given event.
         *
         * @param {String|Symbol} event The event name.
         * @returns {Boolean} `true` if the event had listeners, else `false`.
         * @api public
         */
        EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
          var evt = prefix ? prefix + event : event;

          if (!this._events[evt]) return false;

          var listeners = this._events[evt],
            len = arguments.length,
            args,
            i;

          if (listeners.fn) {
            if (listeners.once)
              this.removeListener(event, listeners.fn, undefined, true);

            switch (len) {
              case 1:
                return listeners.fn.call(listeners.context), true;
              case 2:
                return listeners.fn.call(listeners.context, a1), true;
              case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
              case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
              case 5:
                return (
                  listeners.fn.call(listeners.context, a1, a2, a3, a4), true
                );
              case 6:
                return (
                  listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true
                );
            }

            for (i = 1, args = new Array(len - 1); i < len; i++) {
              args[i - 1] = arguments[i];
            }

            listeners.fn.apply(listeners.context, args);
          } else {
            var length = listeners.length,
              j;

            for (i = 0; i < length; i++) {
              if (listeners[i].once)
                this.removeListener(event, listeners[i].fn, undefined, true);

              switch (len) {
                case 1:
                  listeners[i].fn.call(listeners[i].context);
                  break;
                case 2:
                  listeners[i].fn.call(listeners[i].context, a1);
                  break;
                case 3:
                  listeners[i].fn.call(listeners[i].context, a1, a2);
                  break;
                case 4:
                  listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                  break;
                default:
                  if (!args)
                    for (j = 1, args = new Array(len - 1); j < len; j++) {
                      args[j - 1] = arguments[j];
                    }

                  listeners[i].fn.apply(listeners[i].context, args);
              }
            }
          }

          return true;
        };

        /**
         * Add a listener for a given event.
         *
         * @param {String|Symbol} event The event name.
         * @param {Function} fn The listener function.
         * @param {Mixed} [context=this] The context to invoke the listener with.
         * @returns {EventEmitter} `this`.
         * @api public
         */
        EventEmitter.prototype.on = function on(event, fn, context) {
          var listener = new EE(fn, context || this),
            evt = prefix ? prefix + event : event;

          if (!this._events[evt])
            (this._events[evt] = listener), this._eventsCount++;
          else if (!this._events[evt].fn) this._events[evt].push(listener);
          else this._events[evt] = [this._events[evt], listener];

          return this;
        };

        /**
         * Add a one-time listener for a given event.
         *
         * @param {String|Symbol} event The event name.
         * @param {Function} fn The listener function.
         * @param {Mixed} [context=this] The context to invoke the listener with.
         * @returns {EventEmitter} `this`.
         * @api public
         */
        EventEmitter.prototype.once = function once(event, fn, context) {
          var listener = new EE(fn, context || this, true),
            evt = prefix ? prefix + event : event;

          if (!this._events[evt])
            (this._events[evt] = listener), this._eventsCount++;
          else if (!this._events[evt].fn) this._events[evt].push(listener);
          else this._events[evt] = [this._events[evt], listener];

          return this;
        };

        /**
         * Remove the listeners of a given event.
         *
         * @param {String|Symbol} event The event name.
         * @param {Function} fn Only remove the listeners that match this function.
         * @param {Mixed} context Only remove the listeners that have this context.
         * @param {Boolean} once Only remove one-time listeners.
         * @returns {EventEmitter} `this`.
         * @api public
         */
        EventEmitter.prototype.removeListener = function removeListener(
          event,
          fn,
          context,
          once,
        ) {
          var evt = prefix ? prefix + event : event;

          if (!this._events[evt]) return this;
          if (!fn) {
            if (--this._eventsCount === 0) this._events = new Events();
            else delete this._events[evt];
            return this;
          }

          var listeners = this._events[evt];

          if (listeners.fn) {
            if (
              listeners.fn === fn &&
              (!once || listeners.once) &&
              (!context || listeners.context === context)
            ) {
              if (--this._eventsCount === 0) this._events = new Events();
              else delete this._events[evt];
            }
          } else {
            for (
              var i = 0, events = [], length = listeners.length;
              i < length;
              i++
            ) {
              if (
                listeners[i].fn !== fn ||
                (once && !listeners[i].once) ||
                (context && listeners[i].context !== context)
              ) {
                events.push(listeners[i]);
              }
            }

            //
            // Reset the array, or remove it completely if we have no more listeners.
            //
            if (events.length)
              this._events[evt] = events.length === 1 ? events[0] : events;
            else if (--this._eventsCount === 0) this._events = new Events();
            else delete this._events[evt];
          }

          return this;
        };

        /**
         * Remove all listeners, or those of the specified event.
         *
         * @param {String|Symbol} [event] The event name.
         * @returns {EventEmitter} `this`.
         * @api public
         */
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(
          event,
        ) {
          var evt;

          if (event) {
            evt = prefix ? prefix + event : event;
            if (this._events[evt]) {
              if (--this._eventsCount === 0) this._events = new Events();
              else delete this._events[evt];
            }
          } else {
            this._events = new Events();
            this._eventsCount = 0;
          }

          return this;
        };

        //
        // Alias methods names because people roll like that.
        //
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;

        //
        // This function doesn't apply anymore.
        //
        EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
          return this;
        };

        //
        // Expose the prefix.
        //
        EventEmitter.prefixed = prefix;

        //
        // Allow `EventEmitter` to be imported as module namespace.
        //
        EventEmitter.EventEmitter = EventEmitter;

        //
        // Expose the module.
        //
        if ('undefined' !== typeof module) {
          module.exports = EventEmitter;
        }

        /***/
      },
      /* 55 */
      /***/ function (module, exports, __nested_webpack_require_432304__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.matchText =
          exports.matchSpacing =
          exports.matchNewline =
          exports.matchBlot =
          exports.matchAttributor =
          exports.default =
            undefined;

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _extend2 = __nested_webpack_require_432304__(3);

        var _extend3 = _interopRequireDefault(_extend2);

        var _quillDelta = __nested_webpack_require_432304__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _parchment = __nested_webpack_require_432304__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_432304__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _logger = __nested_webpack_require_432304__(10);

        var _logger2 = _interopRequireDefault(_logger);

        var _module = __nested_webpack_require_432304__(9);

        var _module2 = _interopRequireDefault(_module);

        var _align = __nested_webpack_require_432304__(36);

        var _background = __nested_webpack_require_432304__(37);

        var _code = __nested_webpack_require_432304__(13);

        var _code2 = _interopRequireDefault(_code);

        var _color = __nested_webpack_require_432304__(26);

        var _direction = __nested_webpack_require_432304__(38);

        var _font = __nested_webpack_require_432304__(39);

        var _size = __nested_webpack_require_432304__(40);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var debug = (0, _logger2.default)('quill:clipboard');

        var DOM_KEY = '__ql-matcher';

        var CLIPBOARD_CONFIG = [
          [Node.TEXT_NODE, matchText],
          [Node.TEXT_NODE, matchNewline],
          ['br', matchBreak],
          [Node.ELEMENT_NODE, matchNewline],
          [Node.ELEMENT_NODE, matchBlot],
          [Node.ELEMENT_NODE, matchSpacing],
          [Node.ELEMENT_NODE, matchAttributor],
          [Node.ELEMENT_NODE, matchStyles],
          ['li', matchIndent],
          ['b', matchAlias.bind(matchAlias, 'bold')],
          ['i', matchAlias.bind(matchAlias, 'italic')],
          ['style', matchIgnore],
        ];

        var ATTRIBUTE_ATTRIBUTORS = [
          _align.AlignAttribute,
          _direction.DirectionAttribute,
        ].reduce(function (memo, attr) {
          memo[attr.keyName] = attr;
          return memo;
        }, {});

        var STYLE_ATTRIBUTORS = [
          _align.AlignStyle,
          _background.BackgroundStyle,
          _color.ColorStyle,
          _direction.DirectionStyle,
          _font.FontStyle,
          _size.SizeStyle,
        ].reduce(function (memo, attr) {
          memo[attr.keyName] = attr;
          return memo;
        }, {});

        var Clipboard = (function (_Module) {
          _inherits(Clipboard, _Module);

          function Clipboard(quill, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(
              this,
              (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(
                this,
                quill,
                options,
              ),
            );

            _this.quill.root.addEventListener(
              'paste',
              _this.onPaste.bind(_this),
            );
            _this.container = _this.quill.addContainer('ql-clipboard');
            _this.container.setAttribute('contenteditable', true);
            _this.container.setAttribute('tabindex', -1);
            _this.matchers = [];
            CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (
              _ref,
            ) {
              var _ref2 = _slicedToArray(_ref, 2),
                selector = _ref2[0],
                matcher = _ref2[1];

              if (!options.matchVisual && matcher === matchSpacing) return;
              _this.addMatcher(selector, matcher);
            });
            return _this;
          }

          _createClass(Clipboard, [
            {
              key: 'addMatcher',
              value: function addMatcher(selector, matcher) {
                this.matchers.push([selector, matcher]);
              },
            },
            {
              key: 'convert',
              value: function convert(html) {
                if (typeof html === 'string') {
                  this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
                  return this.convert();
                }
                var formats = this.quill.getFormat(
                  this.quill.selection.savedRange.index,
                );
                if (formats[_code2.default.blotName]) {
                  var text = this.container.innerText;
                  this.container.innerHTML = '';
                  return new _quillDelta2.default().insert(
                    text,
                    _defineProperty(
                      {},
                      _code2.default.blotName,
                      formats[_code2.default.blotName],
                    ),
                  );
                }

                var _prepareMatching = this.prepareMatching(),
                  _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
                  elementMatchers = _prepareMatching2[0],
                  textMatchers = _prepareMatching2[1];

                var delta = traverse(
                  this.container,
                  elementMatchers,
                  textMatchers,
                );
                // Remove trailing newline
                if (
                  deltaEndsWith(delta, '\n') &&
                  delta.ops[delta.ops.length - 1].attributes == null
                ) {
                  delta = delta.compose(
                    new _quillDelta2.default()
                      .retain(delta.length() - 1)
                      .delete(1),
                  );
                }
                debug.log('convert', this.container.innerHTML, delta);
                this.container.innerHTML = '';
                return delta;
              },
            },
            {
              key: 'dangerouslyPasteHTML',
              value: function dangerouslyPasteHTML(index, html) {
                var source =
                  arguments.length > 2 && arguments[2] !== undefined
                    ? arguments[2]
                    : _quill2.default.sources.API;

                if (typeof index === 'string') {
                  this.quill.setContents(this.convert(index), html);
                  this.quill.setSelection(0, _quill2.default.sources.SILENT);
                } else {
                  var paste = this.convert(html);
                  this.quill.updateContents(
                    new _quillDelta2.default().retain(index).concat(paste),
                    source,
                  );
                  this.quill.setSelection(
                    index + paste.length(),
                    _quill2.default.sources.SILENT,
                  );
                }
              },
            },
            {
              key: 'onPaste',
              value: function onPaste(e) {
                var _this2 = this;

                if (e.defaultPrevented || !this.quill.isEnabled()) return;
                var range = this.quill.getSelection();
                var delta = new _quillDelta2.default().retain(range.index);
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.container.focus();
                this.quill.selection.update(_quill2.default.sources.SILENT);
                setTimeout(function () {
                  delta = delta.concat(_this2.convert()).delete(range.length);
                  _this2.quill.updateContents(
                    delta,
                    _quill2.default.sources.USER,
                  );
                  // range.length contributes to delta.length()
                  _this2.quill.setSelection(
                    delta.length() - range.length,
                    _quill2.default.sources.SILENT,
                  );
                  _this2.quill.scrollingContainer.scrollTop = scrollTop;
                  _this2.quill.focus();
                }, 1);
              },
            },
            {
              key: 'prepareMatching',
              value: function prepareMatching() {
                var _this3 = this;

                var elementMatchers = [],
                  textMatchers = [];
                this.matchers.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                    selector = _pair[0],
                    matcher = _pair[1];

                  switch (selector) {
                    case Node.TEXT_NODE:
                      textMatchers.push(matcher);
                      break;
                    case Node.ELEMENT_NODE:
                      elementMatchers.push(matcher);
                      break;
                    default:
                      [].forEach.call(
                        _this3.container.querySelectorAll(selector),
                        function (node) {
                          // TODO use weakmap
                          node[DOM_KEY] = node[DOM_KEY] || [];
                          node[DOM_KEY].push(matcher);
                        },
                      );
                      break;
                  }
                });
                return [elementMatchers, textMatchers];
              },
            },
          ]);

          return Clipboard;
        })(_module2.default);

        Clipboard.DEFAULTS = {
          matchers: [],
          matchVisual: true,
        };

        function applyFormat(delta, format, value) {
          if (
            (typeof format === 'undefined' ? 'undefined' : _typeof(format)) ===
            'object'
          ) {
            return Object.keys(format).reduce(function (delta, key) {
              return applyFormat(delta, key, format[key]);
            }, delta);
          } else {
            return delta.reduce(function (delta, op) {
              if (op.attributes && op.attributes[format]) {
                return delta.push(op);
              } else {
                return delta.insert(
                  op.insert,
                  (0, _extend3.default)(
                    {},
                    _defineProperty({}, format, value),
                    op.attributes,
                  ),
                );
              }
            }, new _quillDelta2.default());
          }
        }

        function computeStyle(node) {
          if (node.nodeType !== Node.ELEMENT_NODE) return {};
          var DOM_KEY = '__ql-computed-style';
          return (
            node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node))
          );
        }

        function deltaEndsWith(delta, text) {
          var endText = '';
          for (
            var i = delta.ops.length - 1;
            i >= 0 && endText.length < text.length;
            --i
          ) {
            var op = delta.ops[i];
            if (typeof op.insert !== 'string') break;
            endText = op.insert + endText;
          }
          return endText.slice(-1 * text.length) === text;
        }

        function isLine(node) {
          if (node.childNodes.length === 0) return false; // Exclude embed blocks
          var style = computeStyle(node);
          return ['block', 'list-item'].indexOf(style.display) > -1;
        }

        function traverse(node, elementMatchers, textMatchers) {
          // Post-order
          if (node.nodeType === node.TEXT_NODE) {
            return textMatchers.reduce(function (delta, matcher) {
              return matcher(node, delta);
            }, new _quillDelta2.default());
          } else if (node.nodeType === node.ELEMENT_NODE) {
            return [].reduce.call(
              node.childNodes || [],
              function (delta, childNode) {
                var childrenDelta = traverse(
                  childNode,
                  elementMatchers,
                  textMatchers,
                );
                if (childNode.nodeType === node.ELEMENT_NODE) {
                  childrenDelta = elementMatchers.reduce(function (
                    childrenDelta,
                    matcher,
                  ) {
                    return matcher(childNode, childrenDelta);
                  },
                  childrenDelta);
                  childrenDelta = (childNode[DOM_KEY] || []).reduce(function (
                    childrenDelta,
                    matcher,
                  ) {
                    return matcher(childNode, childrenDelta);
                  },
                  childrenDelta);
                }
                return delta.concat(childrenDelta);
              },
              new _quillDelta2.default(),
            );
          } else {
            return new _quillDelta2.default();
          }
        }

        function matchAlias(format, node, delta) {
          return applyFormat(delta, format, true);
        }

        function matchAttributor(node, delta) {
          var attributes = _parchment2.default.Attributor.Attribute.keys(node);
          var classes = _parchment2.default.Attributor.Class.keys(node);
          var styles = _parchment2.default.Attributor.Style.keys(node);
          var formats = {};
          attributes
            .concat(classes)
            .concat(styles)
            .forEach(function (name) {
              var attr = _parchment2.default.query(
                name,
                _parchment2.default.Scope.ATTRIBUTE,
              );
              if (attr != null) {
                formats[attr.attrName] = attr.value(node);
                if (formats[attr.attrName]) return;
              }
              attr = ATTRIBUTE_ATTRIBUTORS[name];
              if (
                attr != null &&
                (attr.attrName === name || attr.keyName === name)
              ) {
                formats[attr.attrName] = attr.value(node) || undefined;
              }
              attr = STYLE_ATTRIBUTORS[name];
              if (
                attr != null &&
                (attr.attrName === name || attr.keyName === name)
              ) {
                attr = STYLE_ATTRIBUTORS[name];
                formats[attr.attrName] = attr.value(node) || undefined;
              }
            });
          if (Object.keys(formats).length > 0) {
            delta = applyFormat(delta, formats);
          }
          return delta;
        }

        function matchBlot(node, delta) {
          var match = _parchment2.default.query(node);
          if (match == null) return delta;
          if (match.prototype instanceof _parchment2.default.Embed) {
            var embed = {};
            var value = match.value(node);
            if (value != null) {
              embed[match.blotName] = value;
              delta = new _quillDelta2.default().insert(
                embed,
                match.formats(node),
              );
            }
          } else if (typeof match.formats === 'function') {
            delta = applyFormat(delta, match.blotName, match.formats(node));
          }
          return delta;
        }

        function matchBreak(node, delta) {
          if (!deltaEndsWith(delta, '\n')) {
            delta.insert('\n');
          }
          return delta;
        }

        function matchIgnore() {
          return new _quillDelta2.default();
        }

        function matchIndent(node, delta) {
          var match = _parchment2.default.query(node);
          if (
            match == null ||
            match.blotName !== 'list-item' ||
            !deltaEndsWith(delta, '\n')
          ) {
            return delta;
          }
          var indent = -1,
            parent = node.parentNode;
          while (!parent.classList.contains('ql-clipboard')) {
            if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
              indent += 1;
            }
            parent = parent.parentNode;
          }
          if (indent <= 0) return delta;
          return delta.compose(
            new _quillDelta2.default()
              .retain(delta.length() - 1)
              .retain(1, {indent: indent}),
          );
        }

        function matchNewline(node, delta) {
          if (!deltaEndsWith(delta, '\n')) {
            if (
              isLine(node) ||
              (delta.length() > 0 &&
                node.nextSibling &&
                isLine(node.nextSibling))
            ) {
              delta.insert('\n');
            }
          }
          return delta;
        }

        function matchSpacing(node, delta) {
          if (
            isLine(node) &&
            node.nextElementSibling != null &&
            !deltaEndsWith(delta, '\n\n')
          ) {
            var nodeHeight =
              node.offsetHeight +
              parseFloat(computeStyle(node).marginTop) +
              parseFloat(computeStyle(node).marginBottom);
            if (
              node.nextElementSibling.offsetTop >
              node.offsetTop + nodeHeight * 1.5
            ) {
              delta.insert('\n');
            }
          }
          return delta;
        }

        function matchStyles(node, delta) {
          var formats = {};
          var style = node.style || {};
          if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
            formats.italic = true;
          }
          if (
            style.fontWeight &&
            (computeStyle(node).fontWeight.startsWith('bold') ||
              parseInt(computeStyle(node).fontWeight) >= 700)
          ) {
            formats.bold = true;
          }
          if (Object.keys(formats).length > 0) {
            delta = applyFormat(delta, formats);
          }
          if (parseFloat(style.textIndent || 0) > 0) {
            // Could be 0.5in
            delta = new _quillDelta2.default().insert('\t').concat(delta);
          }
          return delta;
        }

        function matchText(node, delta) {
          var text = node.data;
          // Word represents empty line with <o:p>&nbsp;</o:p>
          if (node.parentNode.tagName === 'O:P') {
            return delta.insert(text.trim());
          }
          if (
            text.trim().length === 0 &&
            node.parentNode.classList.contains('ql-clipboard')
          ) {
            return delta;
          }
          if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
            // eslint-disable-next-line func-style
            var replacer = function replacer(collapse, match) {
              match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
              return match.length < 1 && collapse ? ' ' : match;
            };
            text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
            text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
            if (
              (node.previousSibling == null && isLine(node.parentNode)) ||
              (node.previousSibling != null && isLine(node.previousSibling))
            ) {
              text = text.replace(/^\s+/, replacer.bind(replacer, false));
            }
            if (
              (node.nextSibling == null && isLine(node.parentNode)) ||
              (node.nextSibling != null && isLine(node.nextSibling))
            ) {
              text = text.replace(/\s+$/, replacer.bind(replacer, false));
            }
          }
          return delta.insert(text);
        }

        exports.default = Clipboard;
        exports.matchAttributor = matchAttributor;
        exports.matchBlot = matchBlot;
        exports.matchNewline = matchNewline;
        exports.matchSpacing = matchSpacing;
        exports.matchText = matchText;

        /***/
      },
      /* 56 */
      /***/ function (module, exports, __nested_webpack_require_456301__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _inline = __nested_webpack_require_456301__(6);

        var _inline2 = _interopRequireDefault(_inline);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Bold = (function (_Inline) {
          _inherits(Bold, _Inline);

          function Bold() {
            _classCallCheck(this, Bold);

            return _possibleConstructorReturn(
              this,
              (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Bold,
            [
              {
                key: 'optimize',
                value: function optimize(context) {
                  _get(
                    Bold.prototype.__proto__ ||
                      Object.getPrototypeOf(Bold.prototype),
                    'optimize',
                    this,
                  ).call(this, context);
                  if (this.domNode.tagName !== this.statics.tagName[0]) {
                    this.replaceWith(this.statics.blotName);
                  }
                },
              },
            ],
            [
              {
                key: 'create',
                value: function create() {
                  return _get(
                    Bold.__proto__ || Object.getPrototypeOf(Bold),
                    'create',
                    this,
                  ).call(this);
                },
              },
              {
                key: 'formats',
                value: function formats() {
                  return true;
                },
              },
            ],
          );

          return Bold;
        })(_inline2.default);

        Bold.blotName = 'bold';
        Bold.tagName = ['STRONG', 'B'];

        exports.default = Bold;

        /***/
      },
      /* 57 */
      /***/ function (module, exports, __nested_webpack_require_461222__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.addControls = exports.default = undefined;

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _quillDelta = __nested_webpack_require_461222__(2);

        var _quillDelta2 = _interopRequireDefault(_quillDelta);

        var _parchment = __nested_webpack_require_461222__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_461222__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _logger = __nested_webpack_require_461222__(10);

        var _logger2 = _interopRequireDefault(_logger);

        var _module = __nested_webpack_require_461222__(9);

        var _module2 = _interopRequireDefault(_module);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var debug = (0, _logger2.default)('quill:toolbar');

        var Toolbar = (function (_Module) {
          _inherits(Toolbar, _Module);

          function Toolbar(quill, options) {
            _classCallCheck(this, Toolbar);

            var _this = _possibleConstructorReturn(
              this,
              (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(
                this,
                quill,
                options,
              ),
            );

            if (Array.isArray(_this.options.container)) {
              var container = document.createElement('div');
              addControls(container, _this.options.container);
              quill.container.parentNode.insertBefore(
                container,
                quill.container,
              );
              _this.container = container;
            } else if (typeof _this.options.container === 'string') {
              _this.container = document.querySelector(_this.options.container);
            } else {
              _this.container = _this.options.container;
            }
            if (!(_this.container instanceof HTMLElement)) {
              var _ret;

              return (
                (_ret = debug.error(
                  'Container required for toolbar',
                  _this.options,
                )),
                _possibleConstructorReturn(_this, _ret)
              );
            }
            _this.container.classList.add('ql-toolbar');
            _this.controls = [];
            _this.handlers = {};
            Object.keys(_this.options.handlers).forEach(function (format) {
              _this.addHandler(format, _this.options.handlers[format]);
            });
            [].forEach.call(
              _this.container.querySelectorAll('button, select'),
              function (input) {
                _this.attach(input);
              },
            );
            _this.quill.on(
              _quill2.default.events.EDITOR_CHANGE,
              function (type, range) {
                if (type === _quill2.default.events.SELECTION_CHANGE) {
                  _this.update(range);
                }
              },
            );
            _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
              var _this$quill$selection = _this.quill.selection.getRange(),
                _this$quill$selection2 = _slicedToArray(
                  _this$quill$selection,
                  1,
                ),
                range = _this$quill$selection2[0]; // quill.getSelection triggers update

              _this.update(range);
            });
            return _this;
          }

          _createClass(Toolbar, [
            {
              key: 'addHandler',
              value: function addHandler(format, handler) {
                this.handlers[format] = handler;
              },
            },
            {
              key: 'attach',
              value: function attach(input) {
                var _this2 = this;

                var format = [].find.call(
                  input.classList,
                  function (className) {
                    return className.indexOf('ql-') === 0;
                  },
                );
                if (!format) return;
                format = format.slice('ql-'.length);
                if (input.tagName === 'BUTTON') {
                  input.setAttribute('type', 'button');
                }
                if (this.handlers[format] == null) {
                  if (
                    this.quill.scroll.whitelist != null &&
                    this.quill.scroll.whitelist[format] == null
                  ) {
                    debug.warn(
                      'ignoring attaching to disabled format',
                      format,
                      input,
                    );
                    return;
                  }
                  if (_parchment2.default.query(format) == null) {
                    debug.warn(
                      'ignoring attaching to nonexistent format',
                      format,
                      input,
                    );
                    return;
                  }
                }
                var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
                input.addEventListener(eventName, function (e) {
                  var value = void 0;
                  if (input.tagName === 'SELECT') {
                    if (input.selectedIndex < 0) return;
                    var selected = input.options[input.selectedIndex];
                    if (selected.hasAttribute('selected')) {
                      value = false;
                    } else {
                      value = selected.value || false;
                    }
                  } else {
                    if (input.classList.contains('ql-active')) {
                      value = false;
                    } else {
                      value = input.value || !input.hasAttribute('value');
                    }
                    e.preventDefault();
                  }
                  _this2.quill.focus();

                  var _quill$selection$getR = _this2.quill.selection.getRange(),
                    _quill$selection$getR2 = _slicedToArray(
                      _quill$selection$getR,
                      1,
                    ),
                    range = _quill$selection$getR2[0];

                  if (_this2.handlers[format] != null) {
                    _this2.handlers[format].call(_this2, value);
                  } else if (
                    _parchment2.default.query(format).prototype instanceof
                    _parchment2.default.Embed
                  ) {
                    value = prompt('Enter ' + format);
                    if (!value) return;
                    _this2.quill.updateContents(
                      new _quillDelta2.default()
                        .retain(range.index)
                        .delete(range.length)
                        .insert(_defineProperty({}, format, value)),
                      _quill2.default.sources.USER,
                    );
                  } else {
                    _this2.quill.format(
                      format,
                      value,
                      _quill2.default.sources.USER,
                    );
                  }
                  _this2.update(range);
                });
                // TODO use weakmap
                this.controls.push([format, input]);
              },
            },
            {
              key: 'update',
              value: function update(range) {
                var formats = range == null ? {} : this.quill.getFormat(range);
                this.controls.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                    format = _pair[0],
                    input = _pair[1];

                  if (input.tagName === 'SELECT') {
                    var option = void 0;
                    if (range == null) {
                      option = null;
                    } else if (formats[format] == null) {
                      option = input.querySelector('option[selected]');
                    } else if (!Array.isArray(formats[format])) {
                      var value = formats[format];
                      if (typeof value === 'string') {
                        value = value.replace(/\"/g, '\\"');
                      }
                      option = input.querySelector(
                        'option[value="' + value + '"]',
                      );
                    }
                    if (option == null) {
                      input.value = ''; // TODO make configurable?
                      input.selectedIndex = -1;
                    } else {
                      option.selected = true;
                    }
                  } else {
                    if (range == null) {
                      input.classList.remove('ql-active');
                    } else if (input.hasAttribute('value')) {
                      // both being null should match (default values)
                      // '1' should match with 1 (headers)
                      var isActive =
                        formats[format] === input.getAttribute('value') ||
                        (formats[format] != null &&
                          formats[format].toString() ===
                            input.getAttribute('value')) ||
                        (formats[format] == null &&
                          !input.getAttribute('value'));
                      input.classList.toggle('ql-active', isActive);
                    } else {
                      input.classList.toggle(
                        'ql-active',
                        formats[format] != null,
                      );
                    }
                  }
                });
              },
            },
          ]);

          return Toolbar;
        })(_module2.default);

        Toolbar.DEFAULTS = {};

        function addButton(container, format, value) {
          var input = document.createElement('button');
          input.setAttribute('type', 'button');
          input.classList.add('ql-' + format);
          if (value != null) {
            input.value = value;
          }
          container.appendChild(input);
        }

        function addControls(container, groups) {
          if (!Array.isArray(groups[0])) {
            groups = [groups];
          }
          groups.forEach(function (controls) {
            var group = document.createElement('span');
            group.classList.add('ql-formats');
            controls.forEach(function (control) {
              if (typeof control === 'string') {
                addButton(group, control);
              } else {
                var format = Object.keys(control)[0];
                var value = control[format];
                if (Array.isArray(value)) {
                  addSelect(group, format, value);
                } else {
                  addButton(group, format, value);
                }
              }
            });
            container.appendChild(group);
          });
        }

        function addSelect(container, format, values) {
          var input = document.createElement('select');
          input.classList.add('ql-' + format);
          values.forEach(function (value) {
            var option = document.createElement('option');
            if (value !== false) {
              option.setAttribute('value', value);
            } else {
              option.setAttribute('selected', 'selected');
            }
            input.appendChild(option);
          });
          container.appendChild(input);
        }

        Toolbar.DEFAULTS = {
          container: null,
          handlers: {
            clean: function clean() {
              var _this3 = this;

              var range = this.quill.getSelection();
              if (range == null) return;
              if (range.length == 0) {
                var formats = this.quill.getFormat();
                Object.keys(formats).forEach(function (name) {
                  // Clean functionality in existing apps only clean inline formats
                  if (
                    _parchment2.default.query(
                      name,
                      _parchment2.default.Scope.INLINE,
                    ) != null
                  ) {
                    _this3.quill.format(name, false);
                  }
                });
              } else {
                this.quill.removeFormat(range, _quill2.default.sources.USER);
              }
            },
            direction: function direction(value) {
              var align = this.quill.getFormat()['align'];
              if (value === 'rtl' && align == null) {
                this.quill.format(
                  'align',
                  'right',
                  _quill2.default.sources.USER,
                );
              } else if (!value && align === 'right') {
                this.quill.format('align', false, _quill2.default.sources.USER);
              }
              this.quill.format(
                'direction',
                value,
                _quill2.default.sources.USER,
              );
            },
            indent: function indent(value) {
              var range = this.quill.getSelection();
              var formats = this.quill.getFormat(range);
              var indent = parseInt(formats.indent || 0);
              if (value === '+1' || value === '-1') {
                var modifier = value === '+1' ? 1 : -1;
                if (formats.direction === 'rtl') modifier *= -1;
                this.quill.format(
                  'indent',
                  indent + modifier,
                  _quill2.default.sources.USER,
                );
              }
            },
            link: function link(value) {
              if (value === true) {
                value = prompt('Enter link URL:');
              }
              this.quill.format('link', value, _quill2.default.sources.USER);
            },
            list: function list(value) {
              var range = this.quill.getSelection();
              var formats = this.quill.getFormat(range);
              if (value === 'check') {
                if (
                  formats['list'] === 'checked' ||
                  formats['list'] === 'unchecked'
                ) {
                  this.quill.format(
                    'list',
                    false,
                    _quill2.default.sources.USER,
                  );
                } else {
                  this.quill.format(
                    'list',
                    'unchecked',
                    _quill2.default.sources.USER,
                  );
                }
              } else {
                this.quill.format('list', value, _quill2.default.sources.USER);
              }
            },
          },
        };

        exports.default = Toolbar;
        exports.addControls = addControls;

        /***/
      },
      /* 58 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>';

        /***/
      },
      /* 59 */
      /***/ function (module, exports, __nested_webpack_require_480223__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _picker = __nested_webpack_require_480223__(28);

        var _picker2 = _interopRequireDefault(_picker);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ColorPicker = (function (_Picker) {
          _inherits(ColorPicker, _Picker);

          function ColorPicker(select, label) {
            _classCallCheck(this, ColorPicker);

            var _this = _possibleConstructorReturn(
              this,
              (
                ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)
              ).call(this, select),
            );

            _this.label.innerHTML = label;
            _this.container.classList.add('ql-color-picker');
            [].slice
              .call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7)
              .forEach(function (item) {
                item.classList.add('ql-primary');
              });
            return _this;
          }

          _createClass(ColorPicker, [
            {
              key: 'buildItem',
              value: function buildItem(option) {
                var item = _get(
                  ColorPicker.prototype.__proto__ ||
                    Object.getPrototypeOf(ColorPicker.prototype),
                  'buildItem',
                  this,
                ).call(this, option);
                item.style.backgroundColor = option.getAttribute('value') || '';
                return item;
              },
            },
            {
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(
                  ColorPicker.prototype.__proto__ ||
                    Object.getPrototypeOf(ColorPicker.prototype),
                  'selectItem',
                  this,
                ).call(this, item, trigger);
                var colorLabel = this.label.querySelector('.ql-color-label');
                var value = item ? item.getAttribute('data-value') || '' : '';
                if (colorLabel) {
                  if (colorLabel.tagName === 'line') {
                    colorLabel.style.stroke = value;
                  } else {
                    colorLabel.style.fill = value;
                  }
                }
              },
            },
          ]);

          return ColorPicker;
        })(_picker2.default);

        exports.default = ColorPicker;

        /***/
      },
      /* 60 */
      /***/ function (module, exports, __nested_webpack_require_485687__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _picker = __nested_webpack_require_485687__(28);

        var _picker2 = _interopRequireDefault(_picker);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var IconPicker = (function (_Picker) {
          _inherits(IconPicker, _Picker);

          function IconPicker(select, icons) {
            _classCallCheck(this, IconPicker);

            var _this = _possibleConstructorReturn(
              this,
              (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(
                this,
                select,
              ),
            );

            _this.container.classList.add('ql-icon-picker');
            [].forEach.call(
              _this.container.querySelectorAll('.ql-picker-item'),
              function (item) {
                item.innerHTML = icons[item.getAttribute('data-value') || ''];
              },
            );
            _this.defaultItem = _this.container.querySelector('.ql-selected');
            _this.selectItem(_this.defaultItem);
            return _this;
          }

          _createClass(IconPicker, [
            {
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(
                  IconPicker.prototype.__proto__ ||
                    Object.getPrototypeOf(IconPicker.prototype),
                  'selectItem',
                  this,
                ).call(this, item, trigger);
                item = item || this.defaultItem;
                this.label.innerHTML = item.innerHTML;
              },
            },
          ]);

          return IconPicker;
        })(_picker2.default);

        exports.default = IconPicker;

        /***/
      },
      /* 61 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        var Tooltip = (function () {
          function Tooltip(quill, boundsContainer) {
            var _this = this;

            _classCallCheck(this, Tooltip);

            this.quill = quill;
            this.boundsContainer = boundsContainer || document.body;
            this.root = quill.addContainer('ql-tooltip');
            this.root.innerHTML = this.constructor.TEMPLATE;
            if (this.quill.root === this.quill.scrollingContainer) {
              this.quill.root.addEventListener('scroll', function () {
                _this.root.style.marginTop =
                  -1 * _this.quill.root.scrollTop + 'px';
              });
            }
            this.hide();
          }

          _createClass(Tooltip, [
            {
              key: 'hide',
              value: function hide() {
                this.root.classList.add('ql-hidden');
              },
            },
            {
              key: 'position',
              value: function position(reference) {
                var left =
                  reference.left +
                  reference.width / 2 -
                  this.root.offsetWidth / 2;
                // root.scrollTop should be 0 if scrollContainer !== root
                var top = reference.bottom + this.quill.root.scrollTop;
                this.root.style.left = left + 'px';
                this.root.style.top = top + 'px';
                this.root.classList.remove('ql-flip');
                var containerBounds =
                  this.boundsContainer.getBoundingClientRect();
                var rootBounds = this.root.getBoundingClientRect();
                var shift = 0;
                if (rootBounds.right > containerBounds.right) {
                  shift = containerBounds.right - rootBounds.right;
                  this.root.style.left = left + shift + 'px';
                }
                if (rootBounds.left < containerBounds.left) {
                  shift = containerBounds.left - rootBounds.left;
                  this.root.style.left = left + shift + 'px';
                }
                if (rootBounds.bottom > containerBounds.bottom) {
                  var height = rootBounds.bottom - rootBounds.top;
                  var verticalShift = reference.bottom - reference.top + height;
                  this.root.style.top = top - verticalShift + 'px';
                  this.root.classList.add('ql-flip');
                }
                return shift;
              },
            },
            {
              key: 'show',
              value: function show() {
                this.root.classList.remove('ql-editing');
                this.root.classList.remove('ql-hidden');
              },
            },
          ]);

          return Tooltip;
        })();

        exports.default = Tooltip;

        /***/
      },
      /* 62 */
      /***/ function (module, exports, __nested_webpack_require_494450__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i['return']) _i['return']();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance',
              );
            }
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _extend = __nested_webpack_require_494450__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _emitter = __nested_webpack_require_494450__(8);

        var _emitter2 = _interopRequireDefault(_emitter);

        var _base = __nested_webpack_require_494450__(43);

        var _base2 = _interopRequireDefault(_base);

        var _link = __nested_webpack_require_494450__(27);

        var _link2 = _interopRequireDefault(_link);

        var _selection = __nested_webpack_require_494450__(15);

        var _icons = __nested_webpack_require_494450__(41);

        var _icons2 = _interopRequireDefault(_icons);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var TOOLBAR_CONFIG = [
          [{header: ['1', '2', '3', false]}],
          ['bold', 'italic', 'underline', 'link'],
          [{list: 'ordered'}, {list: 'bullet'}],
          ['clean'],
        ];

        var SnowTheme = (function (_BaseTheme) {
          _inherits(SnowTheme, _BaseTheme);

          function SnowTheme(quill, options) {
            _classCallCheck(this, SnowTheme);

            if (
              options.modules.toolbar != null &&
              options.modules.toolbar.container == null
            ) {
              options.modules.toolbar.container = TOOLBAR_CONFIG;
            }

            var _this = _possibleConstructorReturn(
              this,
              (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(
                this,
                quill,
                options,
              ),
            );

            _this.quill.container.classList.add('ql-snow');
            return _this;
          }

          _createClass(SnowTheme, [
            {
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                toolbar.container.classList.add('ql-snow');
                this.buildButtons(
                  [].slice.call(toolbar.container.querySelectorAll('button')),
                  _icons2.default,
                );
                this.buildPickers(
                  [].slice.call(toolbar.container.querySelectorAll('select')),
                  _icons2.default,
                );
                this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
                if (toolbar.container.querySelector('.ql-link')) {
                  this.quill.keyboard.addBinding(
                    {key: 'K', shortKey: true},
                    function (range, context) {
                      toolbar.handlers['link'].call(
                        toolbar,
                        !context.format.link,
                      );
                    },
                  );
                }
              },
            },
          ]);

          return SnowTheme;
        })(_base2.default);

        SnowTheme.DEFAULTS = (0, _extend2.default)(
          true,
          {},
          _base2.default.DEFAULTS,
          {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (value) {
                      var range = this.quill.getSelection();
                      if (range == null || range.length == 0) return;
                      var preview = this.quill.getText(range);
                      if (
                        /^\S+@\S+\.\S+$/.test(preview) &&
                        preview.indexOf('mailto:') !== 0
                      ) {
                        preview = 'mailto:' + preview;
                      }
                      var tooltip = this.quill.theme.tooltip;
                      tooltip.edit('link', preview);
                    } else {
                      this.quill.format('link', false);
                    }
                  },
                },
              },
            },
          },
        );

        var SnowTooltip = (function (_BaseTooltip) {
          _inherits(SnowTooltip, _BaseTooltip);

          function SnowTooltip(quill, bounds) {
            _classCallCheck(this, SnowTooltip);

            var _this2 = _possibleConstructorReturn(
              this,
              (
                SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)
              ).call(this, quill, bounds),
            );

            _this2.preview = _this2.root.querySelector('a.ql-preview');
            return _this2;
          }

          _createClass(SnowTooltip, [
            {
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(
                  SnowTooltip.prototype.__proto__ ||
                    Object.getPrototypeOf(SnowTooltip.prototype),
                  'listen',
                  this,
                ).call(this);
                this.root
                  .querySelector('a.ql-action')
                  .addEventListener('click', function (event) {
                    if (_this3.root.classList.contains('ql-editing')) {
                      _this3.save();
                    } else {
                      _this3.edit('link', _this3.preview.textContent);
                    }
                    event.preventDefault();
                  });
                this.root
                  .querySelector('a.ql-remove')
                  .addEventListener('click', function (event) {
                    if (_this3.linkRange != null) {
                      var range = _this3.linkRange;
                      _this3.restoreFocus();
                      _this3.quill.formatText(
                        range,
                        'link',
                        false,
                        _emitter2.default.sources.USER,
                      );
                      delete _this3.linkRange;
                    }
                    event.preventDefault();
                    _this3.hide();
                  });
                this.quill.on(
                  _emitter2.default.events.SELECTION_CHANGE,
                  function (range, oldRange, source) {
                    if (range == null) return;
                    if (
                      range.length === 0 &&
                      source === _emitter2.default.sources.USER
                    ) {
                      var _quill$scroll$descend =
                          _this3.quill.scroll.descendant(
                            _link2.default,
                            range.index,
                          ),
                        _quill$scroll$descend2 = _slicedToArray(
                          _quill$scroll$descend,
                          2,
                        ),
                        link = _quill$scroll$descend2[0],
                        offset = _quill$scroll$descend2[1];

                      if (link != null) {
                        _this3.linkRange = new _selection.Range(
                          range.index - offset,
                          link.length(),
                        );
                        var preview = _link2.default.formats(link.domNode);
                        _this3.preview.textContent = preview;
                        _this3.preview.setAttribute('href', preview);
                        _this3.show();
                        _this3.position(
                          _this3.quill.getBounds(_this3.linkRange),
                        );
                        return;
                      }
                    } else {
                      delete _this3.linkRange;
                    }
                    _this3.hide();
                  },
                );
              },
            },
            {
              key: 'show',
              value: function show() {
                _get(
                  SnowTooltip.prototype.__proto__ ||
                    Object.getPrototypeOf(SnowTooltip.prototype),
                  'show',
                  this,
                ).call(this);
                this.root.removeAttribute('data-mode');
              },
            },
          ]);

          return SnowTooltip;
        })(_base.BaseTooltip);

        SnowTooltip.TEMPLATE = [
          '<a class="ql-preview" target="_blank" href="about:blank"></a>',
          '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">',
          '<a class="ql-action"></a>',
          '<a class="ql-remove"></a>',
        ].join('');

        exports.default = SnowTheme;

        /***/
      },
      /* 63 */
      /***/ function (module, exports, __nested_webpack_require_507111__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _core = __nested_webpack_require_507111__(29);

        var _core2 = _interopRequireDefault(_core);

        var _align = __nested_webpack_require_507111__(36);

        var _direction = __nested_webpack_require_507111__(38);

        var _indent = __nested_webpack_require_507111__(64);

        var _blockquote = __nested_webpack_require_507111__(65);

        var _blockquote2 = _interopRequireDefault(_blockquote);

        var _header = __nested_webpack_require_507111__(66);

        var _header2 = _interopRequireDefault(_header);

        var _list = __nested_webpack_require_507111__(67);

        var _list2 = _interopRequireDefault(_list);

        var _background = __nested_webpack_require_507111__(37);

        var _color = __nested_webpack_require_507111__(26);

        var _font = __nested_webpack_require_507111__(39);

        var _size = __nested_webpack_require_507111__(40);

        var _bold = __nested_webpack_require_507111__(56);

        var _bold2 = _interopRequireDefault(_bold);

        var _italic = __nested_webpack_require_507111__(68);

        var _italic2 = _interopRequireDefault(_italic);

        var _link = __nested_webpack_require_507111__(27);

        var _link2 = _interopRequireDefault(_link);

        var _script = __nested_webpack_require_507111__(69);

        var _script2 = _interopRequireDefault(_script);

        var _strike = __nested_webpack_require_507111__(70);

        var _strike2 = _interopRequireDefault(_strike);

        var _underline = __nested_webpack_require_507111__(71);

        var _underline2 = _interopRequireDefault(_underline);

        var _image = __nested_webpack_require_507111__(72);

        var _image2 = _interopRequireDefault(_image);

        var _video = __nested_webpack_require_507111__(73);

        var _video2 = _interopRequireDefault(_video);

        var _code = __nested_webpack_require_507111__(13);

        var _code2 = _interopRequireDefault(_code);

        var _formula = __nested_webpack_require_507111__(74);

        var _formula2 = _interopRequireDefault(_formula);

        var _syntax = __nested_webpack_require_507111__(75);

        var _syntax2 = _interopRequireDefault(_syntax);

        var _toolbar = __nested_webpack_require_507111__(57);

        var _toolbar2 = _interopRequireDefault(_toolbar);

        var _icons = __nested_webpack_require_507111__(41);

        var _icons2 = _interopRequireDefault(_icons);

        var _picker = __nested_webpack_require_507111__(28);

        var _picker2 = _interopRequireDefault(_picker);

        var _colorPicker = __nested_webpack_require_507111__(59);

        var _colorPicker2 = _interopRequireDefault(_colorPicker);

        var _iconPicker = __nested_webpack_require_507111__(60);

        var _iconPicker2 = _interopRequireDefault(_iconPicker);

        var _tooltip = __nested_webpack_require_507111__(61);

        var _tooltip2 = _interopRequireDefault(_tooltip);

        var _bubble = __nested_webpack_require_507111__(108);

        var _bubble2 = _interopRequireDefault(_bubble);

        var _snow = __nested_webpack_require_507111__(62);

        var _snow2 = _interopRequireDefault(_snow);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        _core2.default.register(
          {
            'attributors/attribute/direction': _direction.DirectionAttribute,

            'attributors/class/align': _align.AlignClass,
            'attributors/class/background': _background.BackgroundClass,
            'attributors/class/color': _color.ColorClass,
            'attributors/class/direction': _direction.DirectionClass,
            'attributors/class/font': _font.FontClass,
            'attributors/class/size': _size.SizeClass,

            'attributors/style/align': _align.AlignStyle,
            'attributors/style/background': _background.BackgroundStyle,
            'attributors/style/color': _color.ColorStyle,
            'attributors/style/direction': _direction.DirectionStyle,
            'attributors/style/font': _font.FontStyle,
            'attributors/style/size': _size.SizeStyle,
          },
          true,
        );

        _core2.default.register(
          {
            'formats/align': _align.AlignClass,
            'formats/direction': _direction.DirectionClass,
            'formats/indent': _indent.IndentClass,

            'formats/background': _background.BackgroundStyle,
            'formats/color': _color.ColorStyle,
            'formats/font': _font.FontClass,
            'formats/size': _size.SizeClass,

            'formats/blockquote': _blockquote2.default,
            'formats/code-block': _code2.default,
            'formats/header': _header2.default,
            'formats/list': _list2.default,

            'formats/bold': _bold2.default,
            'formats/code': _code.Code,
            'formats/italic': _italic2.default,
            'formats/link': _link2.default,
            'formats/script': _script2.default,
            'formats/strike': _strike2.default,
            'formats/underline': _underline2.default,

            'formats/image': _image2.default,
            'formats/video': _video2.default,

            'formats/list/item': _list.ListItem,

            'modules/formula': _formula2.default,
            'modules/syntax': _syntax2.default,
            'modules/toolbar': _toolbar2.default,

            'themes/bubble': _bubble2.default,
            'themes/snow': _snow2.default,

            'ui/icons': _icons2.default,
            'ui/picker': _picker2.default,
            'ui/icon-picker': _iconPicker2.default,
            'ui/color-picker': _colorPicker2.default,
            'ui/tooltip': _tooltip2.default,
          },
          true,
        );

        exports.default = _core2.default;

        /***/
      },
      /* 64 */
      /***/ function (module, exports, __nested_webpack_require_512750__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.IndentClass = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_512750__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var IdentAttributor = (function (_Parchment$Attributor) {
          _inherits(IdentAttributor, _Parchment$Attributor);

          function IdentAttributor() {
            _classCallCheck(this, IdentAttributor);

            return _possibleConstructorReturn(
              this,
              (
                IdentAttributor.__proto__ ||
                Object.getPrototypeOf(IdentAttributor)
              ).apply(this, arguments),
            );
          }

          _createClass(IdentAttributor, [
            {
              key: 'add',
              value: function add(node, value) {
                if (value === '+1' || value === '-1') {
                  var indent = this.value(node) || 0;
                  value = value === '+1' ? indent + 1 : indent - 1;
                }
                if (value === 0) {
                  this.remove(node);
                  return true;
                } else {
                  return _get(
                    IdentAttributor.prototype.__proto__ ||
                      Object.getPrototypeOf(IdentAttributor.prototype),
                    'add',
                    this,
                  ).call(this, node, value);
                }
              },
            },
            {
              key: 'canAdd',
              value: function canAdd(node, value) {
                return (
                  _get(
                    IdentAttributor.prototype.__proto__ ||
                      Object.getPrototypeOf(IdentAttributor.prototype),
                    'canAdd',
                    this,
                  ).call(this, node, value) ||
                  _get(
                    IdentAttributor.prototype.__proto__ ||
                      Object.getPrototypeOf(IdentAttributor.prototype),
                    'canAdd',
                    this,
                  ).call(this, node, parseInt(value))
                );
              },
            },
            {
              key: 'value',
              value: function value(node) {
                return (
                  parseInt(
                    _get(
                      IdentAttributor.prototype.__proto__ ||
                        Object.getPrototypeOf(IdentAttributor.prototype),
                      'value',
                      this,
                    ).call(this, node),
                  ) || undefined
                ); // Don't return NaN
              },
            },
          ]);

          return IdentAttributor;
        })(_parchment2.default.Attributor.Class);

        var IndentClass = new IdentAttributor('indent', 'ql-indent', {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: [1, 2, 3, 4, 5, 6, 7, 8],
        });

        exports.IndentClass = IndentClass;

        /***/
      },
      /* 65 */
      /***/ function (module, exports, __nested_webpack_require_518832__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _block = __nested_webpack_require_518832__(4);

        var _block2 = _interopRequireDefault(_block);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Blockquote = (function (_Block) {
          _inherits(Blockquote, _Block);

          function Blockquote() {
            _classCallCheck(this, Blockquote);

            return _possibleConstructorReturn(
              this,
              (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(
                this,
                arguments,
              ),
            );
          }

          return Blockquote;
        })(_block2.default);

        Blockquote.blotName = 'blockquote';
        Blockquote.tagName = 'blockquote';

        exports.default = Blockquote;

        /***/
      },
      /* 66 */
      /***/ function (module, exports, __nested_webpack_require_521228__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _block = __nested_webpack_require_521228__(4);

        var _block2 = _interopRequireDefault(_block);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Header = (function (_Block) {
          _inherits(Header, _Block);

          function Header() {
            _classCallCheck(this, Header);

            return _possibleConstructorReturn(
              this,
              (Header.__proto__ || Object.getPrototypeOf(Header)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(Header, null, [
            {
              key: 'formats',
              value: function formats(domNode) {
                return this.tagName.indexOf(domNode.tagName) + 1;
              },
            },
          ]);

          return Header;
        })(_block2.default);

        Header.blotName = 'header';
        Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

        exports.default = Header;

        /***/
      },
      /* 67 */
      /***/ function (module, exports, __nested_webpack_require_524603__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.ListItem = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_524603__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _block = __nested_webpack_require_524603__(4);

        var _block2 = _interopRequireDefault(_block);

        var _container = __nested_webpack_require_524603__(25);

        var _container2 = _interopRequireDefault(_container);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ListItem = (function (_Block) {
          _inherits(ListItem, _Block);

          function ListItem() {
            _classCallCheck(this, ListItem);

            return _possibleConstructorReturn(
              this,
              (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            ListItem,
            [
              {
                key: 'format',
                value: function format(name, value) {
                  if (name === List.blotName && !value) {
                    this.replaceWith(
                      _parchment2.default.create(this.statics.scope),
                    );
                  } else {
                    _get(
                      ListItem.prototype.__proto__ ||
                        Object.getPrototypeOf(ListItem.prototype),
                      'format',
                      this,
                    ).call(this, name, value);
                  }
                },
              },
              {
                key: 'remove',
                value: function remove() {
                  if (this.prev == null && this.next == null) {
                    this.parent.remove();
                  } else {
                    _get(
                      ListItem.prototype.__proto__ ||
                        Object.getPrototypeOf(ListItem.prototype),
                      'remove',
                      this,
                    ).call(this);
                  }
                },
              },
              {
                key: 'replaceWith',
                value: function replaceWith(name, value) {
                  this.parent.isolate(this.offset(this.parent), this.length());
                  if (name === this.parent.statics.blotName) {
                    this.parent.replaceWith(name, value);
                    return this;
                  } else {
                    this.parent.unwrap();
                    return _get(
                      ListItem.prototype.__proto__ ||
                        Object.getPrototypeOf(ListItem.prototype),
                      'replaceWith',
                      this,
                    ).call(this, name, value);
                  }
                },
              },
            ],
            [
              {
                key: 'formats',
                value: function formats(domNode) {
                  return domNode.tagName === this.tagName
                    ? undefined
                    : _get(
                        ListItem.__proto__ || Object.getPrototypeOf(ListItem),
                        'formats',
                        this,
                      ).call(this, domNode);
                },
              },
            ],
          );

          return ListItem;
        })(_block2.default);

        ListItem.blotName = 'list-item';
        ListItem.tagName = 'LI';

        var List = (function (_Container) {
          _inherits(List, _Container);

          _createClass(List, null, [
            {
              key: 'create',
              value: function create(value) {
                var tagName = value === 'ordered' ? 'OL' : 'UL';
                var node = _get(
                  List.__proto__ || Object.getPrototypeOf(List),
                  'create',
                  this,
                ).call(this, tagName);
                if (value === 'checked' || value === 'unchecked') {
                  node.setAttribute('data-checked', value === 'checked');
                }
                return node;
              },
            },
            {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'OL') return 'ordered';
                if (domNode.tagName === 'UL') {
                  if (domNode.hasAttribute('data-checked')) {
                    return domNode.getAttribute('data-checked') === 'true'
                      ? 'checked'
                      : 'unchecked';
                  } else {
                    return 'bullet';
                  }
                }
                return undefined;
              },
            },
          ]);

          function List(domNode) {
            _classCallCheck(this, List);

            var _this2 = _possibleConstructorReturn(
              this,
              (List.__proto__ || Object.getPrototypeOf(List)).call(
                this,
                domNode,
              ),
            );

            var listEventHandler = function listEventHandler(e) {
              if (e.target.parentNode !== domNode) return;
              var format = _this2.statics.formats(domNode);
              var blot = _parchment2.default.find(e.target);
              if (format === 'checked') {
                blot.format('list', 'unchecked');
              } else if (format === 'unchecked') {
                blot.format('list', 'checked');
              }
            };

            domNode.addEventListener('touchstart', listEventHandler);
            domNode.addEventListener('mousedown', listEventHandler);
            return _this2;
          }

          _createClass(List, [
            {
              key: 'format',
              value: function format(name, value) {
                if (this.children.length > 0) {
                  this.children.tail.format(name, value);
                }
              },
            },
            {
              key: 'formats',
              value: function formats() {
                // We don't inherit from FormatBlot
                return _defineProperty(
                  {},
                  this.statics.blotName,
                  this.statics.formats(this.domNode),
                );
              },
            },
            {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (blot instanceof ListItem) {
                  _get(
                    List.prototype.__proto__ ||
                      Object.getPrototypeOf(List.prototype),
                    'insertBefore',
                    this,
                  ).call(this, blot, ref);
                } else {
                  var index = ref == null ? this.length() : ref.offset(this);
                  var after = this.split(index);
                  after.parent.insertBefore(blot, after);
                }
              },
            },
            {
              key: 'optimize',
              value: function optimize(context) {
                _get(
                  List.prototype.__proto__ ||
                    Object.getPrototypeOf(List.prototype),
                  'optimize',
                  this,
                ).call(this, context);
                var next = this.next;
                if (
                  next != null &&
                  next.prev === this &&
                  next.statics.blotName === this.statics.blotName &&
                  next.domNode.tagName === this.domNode.tagName &&
                  next.domNode.getAttribute('data-checked') ===
                    this.domNode.getAttribute('data-checked')
                ) {
                  next.moveChildren(this);
                  next.remove();
                }
              },
            },
            {
              key: 'replace',
              value: function replace(target) {
                if (target.statics.blotName !== this.statics.blotName) {
                  var item = _parchment2.default.create(
                    this.statics.defaultChild,
                  );
                  target.moveChildren(item);
                  this.appendChild(item);
                }
                _get(
                  List.prototype.__proto__ ||
                    Object.getPrototypeOf(List.prototype),
                  'replace',
                  this,
                ).call(this, target);
              },
            },
          ]);

          return List;
        })(_container2.default);

        List.blotName = 'list';
        List.scope = _parchment2.default.Scope.BLOCK_BLOT;
        List.tagName = ['OL', 'UL'];
        List.defaultChild = 'list-item';
        List.allowedChildren = [ListItem];

        exports.ListItem = ListItem;
        exports.default = List;

        /***/
      },
      /* 68 */
      /***/ function (module, exports, __nested_webpack_require_536854__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _bold = __nested_webpack_require_536854__(56);

        var _bold2 = _interopRequireDefault(_bold);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Italic = (function (_Bold) {
          _inherits(Italic, _Bold);

          function Italic() {
            _classCallCheck(this, Italic);

            return _possibleConstructorReturn(
              this,
              (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(
                this,
                arguments,
              ),
            );
          }

          return Italic;
        })(_bold2.default);

        Italic.blotName = 'italic';
        Italic.tagName = ['EM', 'I'];

        exports.default = Italic;

        /***/
      },
      /* 69 */
      /***/ function (module, exports, __nested_webpack_require_539200__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _inline = __nested_webpack_require_539200__(6);

        var _inline2 = _interopRequireDefault(_inline);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Script = (function (_Inline) {
          _inherits(Script, _Inline);

          function Script() {
            _classCallCheck(this, Script);

            return _possibleConstructorReturn(
              this,
              (Script.__proto__ || Object.getPrototypeOf(Script)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(Script, null, [
            {
              key: 'create',
              value: function create(value) {
                if (value === 'super') {
                  return document.createElement('sup');
                } else if (value === 'sub') {
                  return document.createElement('sub');
                } else {
                  return _get(
                    Script.__proto__ || Object.getPrototypeOf(Script),
                    'create',
                    this,
                  ).call(this, value);
                }
              },
            },
            {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'SUB') return 'sub';
                if (domNode.tagName === 'SUP') return 'super';
                return undefined;
              },
            },
          ]);

          return Script;
        })(_inline2.default);

        Script.blotName = 'script';
        Script.tagName = ['SUB', 'SUP'];

        exports.default = Script;

        /***/
      },
      /* 70 */
      /***/ function (module, exports, __nested_webpack_require_543930__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _inline = __nested_webpack_require_543930__(6);

        var _inline2 = _interopRequireDefault(_inline);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Strike = (function (_Inline) {
          _inherits(Strike, _Inline);

          function Strike() {
            _classCallCheck(this, Strike);

            return _possibleConstructorReturn(
              this,
              (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(
                this,
                arguments,
              ),
            );
          }

          return Strike;
        })(_inline2.default);

        Strike.blotName = 'strike';
        Strike.tagName = 'S';

        exports.default = Strike;

        /***/
      },
      /* 71 */
      /***/ function (module, exports, __nested_webpack_require_546279__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _inline = __nested_webpack_require_546279__(6);

        var _inline2 = _interopRequireDefault(_inline);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Underline = (function (_Inline) {
          _inherits(Underline, _Inline);

          function Underline() {
            _classCallCheck(this, Underline);

            return _possibleConstructorReturn(
              this,
              (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(
                this,
                arguments,
              ),
            );
          }

          return Underline;
        })(_inline2.default);

        Underline.blotName = 'underline';
        Underline.tagName = 'U';

        exports.default = Underline;

        /***/
      },
      /* 72 */
      /***/ function (module, exports, __nested_webpack_require_548661__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_548661__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _link = __nested_webpack_require_548661__(27);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ATTRIBUTES = ['alt', 'height', 'width'];

        var Image = (function (_Parchment$Embed) {
          _inherits(Image, _Parchment$Embed);

          function Image() {
            _classCallCheck(this, Image);

            return _possibleConstructorReturn(
              this,
              (Image.__proto__ || Object.getPrototypeOf(Image)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Image,
            [
              {
                key: 'format',
                value: function format(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(
                      Image.prototype.__proto__ ||
                        Object.getPrototypeOf(Image.prototype),
                      'format',
                      this,
                    ).call(this, name, value);
                  }
                },
              },
            ],
            [
              {
                key: 'create',
                value: function create(value) {
                  var node = _get(
                    Image.__proto__ || Object.getPrototypeOf(Image),
                    'create',
                    this,
                  ).call(this, value);
                  if (typeof value === 'string') {
                    node.setAttribute('src', this.sanitize(value));
                  }
                  return node;
                },
              },
              {
                key: 'formats',
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function (formats, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats;
                  }, {});
                },
              },
              {
                key: 'match',
                value: function match(url) {
                  return (
                    /\.(jpe?g|gif|png)$/.test(url) ||
                    /^data:image\/.+;base64/.test(url)
                  );
                },
              },
              {
                key: 'sanitize',
                value: function sanitize(url) {
                  return (0, _link.sanitize)(url, ['http', 'https', 'data'])
                    ? url
                    : '//:0';
                },
              },
              {
                key: 'value',
                value: function value(domNode) {
                  return domNode.getAttribute('src');
                },
              },
            ],
          );

          return Image;
        })(_parchment2.default.Embed);

        Image.blotName = 'image';
        Image.tagName = 'IMG';

        exports.default = Image;

        /***/
      },
      /* 73 */
      /***/ function (module, exports, __nested_webpack_require_555080__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _block = __nested_webpack_require_555080__(4);

        var _link = __nested_webpack_require_555080__(27);

        var _link2 = _interopRequireDefault(_link);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var ATTRIBUTES = ['height', 'width'];

        var Video = (function (_BlockEmbed) {
          _inherits(Video, _BlockEmbed);

          function Video() {
            _classCallCheck(this, Video);

            return _possibleConstructorReturn(
              this,
              (Video.__proto__ || Object.getPrototypeOf(Video)).apply(
                this,
                arguments,
              ),
            );
          }

          _createClass(
            Video,
            [
              {
                key: 'format',
                value: function format(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(
                      Video.prototype.__proto__ ||
                        Object.getPrototypeOf(Video.prototype),
                      'format',
                      this,
                    ).call(this, name, value);
                  }
                },
              },
            ],
            [
              {
                key: 'create',
                value: function create(value) {
                  var node = _get(
                    Video.__proto__ || Object.getPrototypeOf(Video),
                    'create',
                    this,
                  ).call(this, value);
                  node.setAttribute('frameborder', '0');
                  node.setAttribute('allowfullscreen', true);
                  node.setAttribute('src', this.sanitize(value));
                  return node;
                },
              },
              {
                key: 'formats',
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function (formats, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats;
                  }, {});
                },
              },
              {
                key: 'sanitize',
                value: function sanitize(url) {
                  return _link2.default.sanitize(url);
                },
              },
              {
                key: 'value',
                value: function value(domNode) {
                  return domNode.getAttribute('src');
                },
              },
            ],
          );

          return Video;
        })(_block.BlockEmbed);

        Video.blotName = 'video';
        Video.className = 'ql-video';
        Video.tagName = 'IFRAME';

        exports.default = Video;

        /***/
      },
      /* 74 */
      /***/ function (module, exports, __nested_webpack_require_561185__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.FormulaBlot = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _embed = __nested_webpack_require_561185__(35);

        var _embed2 = _interopRequireDefault(_embed);

        var _quill = __nested_webpack_require_561185__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _module = __nested_webpack_require_561185__(9);

        var _module2 = _interopRequireDefault(_module);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var FormulaBlot = (function (_Embed) {
          _inherits(FormulaBlot, _Embed);

          function FormulaBlot() {
            _classCallCheck(this, FormulaBlot);

            return _possibleConstructorReturn(
              this,
              (
                FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)
              ).apply(this, arguments),
            );
          }

          _createClass(FormulaBlot, null, [
            {
              key: 'create',
              value: function create(value) {
                var node = _get(
                  FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot),
                  'create',
                  this,
                ).call(this, value);
                if (typeof value === 'string') {
                  window.katex.render(value, node, {
                    throwOnError: false,
                    errorColor: '#f00',
                  });
                  node.setAttribute('data-value', value);
                }
                return node;
              },
            },
            {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('data-value');
              },
            },
          ]);

          return FormulaBlot;
        })(_embed2.default);

        FormulaBlot.blotName = 'formula';
        FormulaBlot.className = 'ql-formula';
        FormulaBlot.tagName = 'SPAN';

        var Formula = (function (_Module) {
          _inherits(Formula, _Module);

          _createClass(Formula, null, [
            {
              key: 'register',
              value: function register() {
                _quill2.default.register(FormulaBlot, true);
              },
            },
          ]);

          function Formula() {
            _classCallCheck(this, Formula);

            var _this2 = _possibleConstructorReturn(
              this,
              (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this),
            );

            if (window.katex == null) {
              throw new Error('Formula module requires KaTeX.');
            }
            return _this2;
          }

          return Formula;
        })(_module2.default);

        exports.FormulaBlot = FormulaBlot;
        exports.default = Formula;

        /***/
      },
      /* 75 */
      /***/ function (module, exports, __nested_webpack_require_567040__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.CodeToken = exports.CodeBlock = undefined;

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _parchment = __nested_webpack_require_567040__(0);

        var _parchment2 = _interopRequireDefault(_parchment);

        var _quill = __nested_webpack_require_567040__(5);

        var _quill2 = _interopRequireDefault(_quill);

        var _module = __nested_webpack_require_567040__(9);

        var _module2 = _interopRequireDefault(_module);

        var _code = __nested_webpack_require_567040__(13);

        var _code2 = _interopRequireDefault(_code);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var SyntaxCodeBlock = (function (_CodeBlock) {
          _inherits(SyntaxCodeBlock, _CodeBlock);

          function SyntaxCodeBlock() {
            _classCallCheck(this, SyntaxCodeBlock);

            return _possibleConstructorReturn(
              this,
              (
                SyntaxCodeBlock.__proto__ ||
                Object.getPrototypeOf(SyntaxCodeBlock)
              ).apply(this, arguments),
            );
          }

          _createClass(SyntaxCodeBlock, [
            {
              key: 'replaceWith',
              value: function replaceWith(block) {
                this.domNode.textContent = this.domNode.textContent;
                this.attach();
                _get(
                  SyntaxCodeBlock.prototype.__proto__ ||
                    Object.getPrototypeOf(SyntaxCodeBlock.prototype),
                  'replaceWith',
                  this,
                ).call(this, block);
              },
            },
            {
              key: 'highlight',
              value: function highlight(_highlight) {
                var text = this.domNode.textContent;
                if (this.cachedText !== text) {
                  if (text.trim().length > 0 || this.cachedText == null) {
                    this.domNode.innerHTML = _highlight(text);
                    this.domNode.normalize();
                    this.attach();
                  }
                  this.cachedText = text;
                }
              },
            },
          ]);

          return SyntaxCodeBlock;
        })(_code2.default);

        SyntaxCodeBlock.className = 'ql-syntax';

        var CodeToken = new _parchment2.default.Attributor.Class(
          'token',
          'hljs',
          {
            scope: _parchment2.default.Scope.INLINE,
          },
        );

        var Syntax = (function (_Module) {
          _inherits(Syntax, _Module);

          _createClass(Syntax, null, [
            {
              key: 'register',
              value: function register() {
                _quill2.default.register(CodeToken, true);
                _quill2.default.register(SyntaxCodeBlock, true);
              },
            },
          ]);

          function Syntax(quill, options) {
            _classCallCheck(this, Syntax);

            var _this2 = _possibleConstructorReturn(
              this,
              (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(
                this,
                quill,
                options,
              ),
            );

            if (typeof _this2.options.highlight !== 'function') {
              throw new Error(
                'Syntax module requires highlight.js. Please include the library on the page before Quill.',
              );
            }
            var timer = null;
            _this2.quill.on(
              _quill2.default.events.SCROLL_OPTIMIZE,
              function () {
                clearTimeout(timer);
                timer = setTimeout(function () {
                  _this2.highlight();
                  timer = null;
                }, _this2.options.interval);
              },
            );
            _this2.highlight();
            return _this2;
          }

          _createClass(Syntax, [
            {
              key: 'highlight',
              value: function highlight() {
                var _this3 = this;

                if (this.quill.selection.composing) return;
                this.quill.update(_quill2.default.sources.USER);
                var range = this.quill.getSelection();
                this.quill.scroll
                  .descendants(SyntaxCodeBlock)
                  .forEach(function (code) {
                    code.highlight(_this3.options.highlight);
                  });
                this.quill.update(_quill2.default.sources.SILENT);
                if (range != null) {
                  this.quill.setSelection(
                    range,
                    _quill2.default.sources.SILENT,
                  );
                }
              },
            },
          ]);

          return Syntax;
        })(_module2.default);

        Syntax.DEFAULTS = {
          highlight: (function () {
            if (window.hljs == null) return null;
            return function (text) {
              var result = window.hljs.highlightAuto(text);
              return result.value;
            };
          })(),
          interval: 1000,
        };

        exports.CodeBlock = SyntaxCodeBlock;
        exports.CodeToken = CodeToken;
        exports.default = Syntax;

        /***/
      },
      /* 76 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>';

        /***/
      },
      /* 77 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>';

        /***/
      },
      /* 78 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>';

        /***/
      },
      /* 79 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>';

        /***/
      },
      /* 80 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>';

        /***/
      },
      /* 81 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>';

        /***/
      },
      /* 82 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>';

        /***/
      },
      /* 83 */
      /***/ function (module, exports) {
        module.exports =
          '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>';

        /***/
      },
      /* 84 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>';

        /***/
      },
      /* 85 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>';

        /***/
      },
      /* 86 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>';

        /***/
      },
      /* 87 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>';

        /***/
      },
      /* 88 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>';

        /***/
      },
      /* 89 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>';

        /***/
      },
      /* 90 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>';

        /***/
      },
      /* 91 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>';

        /***/
      },
      /* 92 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>';

        /***/
      },
      /* 93 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>';

        /***/
      },
      /* 94 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>';

        /***/
      },
      /* 95 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>';

        /***/
      },
      /* 96 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>';

        /***/
      },
      /* 97 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>';

        /***/
      },
      /* 98 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>';

        /***/
      },
      /* 99 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>';

        /***/
      },
      /* 100 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>';

        /***/
      },
      /* 101 */
      /***/ function (module, exports) {
        module.exports =
          '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>';

        /***/
      },
      /* 102 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>';

        /***/
      },
      /* 103 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>';

        /***/
      },
      /* 104 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>';

        /***/
      },
      /* 105 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>';

        /***/
      },
      /* 106 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>';

        /***/
      },
      /* 107 */
      /***/ function (module, exports) {
        module.exports =
          '<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>';

        /***/
      },
      /* 108 */
      /***/ function (module, exports, __nested_webpack_require_593470__) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.default = exports.BubbleTooltip = undefined;

        var _get = function get(object, property, receiver) {
          if (object === null) object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return undefined;
            } else {
              return get(parent, property, receiver);
            }
          } else if ('value' in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === undefined) {
              return undefined;
            }
            return getter.call(receiver);
          }
        };

        var _createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var _extend = __nested_webpack_require_593470__(3);

        var _extend2 = _interopRequireDefault(_extend);

        var _emitter = __nested_webpack_require_593470__(8);

        var _emitter2 = _interopRequireDefault(_emitter);

        var _base = __nested_webpack_require_593470__(43);

        var _base2 = _interopRequireDefault(_base);

        var _selection = __nested_webpack_require_593470__(15);

        var _icons = __nested_webpack_require_593470__(41);

        var _icons2 = _interopRequireDefault(_icons);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called",
            );
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass,
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            },
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var TOOLBAR_CONFIG = [
          ['bold', 'italic', 'link'],
          [{header: 1}, {header: 2}, 'blockquote'],
        ];

        var BubbleTheme = (function (_BaseTheme) {
          _inherits(BubbleTheme, _BaseTheme);

          function BubbleTheme(quill, options) {
            _classCallCheck(this, BubbleTheme);

            if (
              options.modules.toolbar != null &&
              options.modules.toolbar.container == null
            ) {
              options.modules.toolbar.container = TOOLBAR_CONFIG;
            }

            var _this = _possibleConstructorReturn(
              this,
              (
                BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)
              ).call(this, quill, options),
            );

            _this.quill.container.classList.add('ql-bubble');
            return _this;
          }

          _createClass(BubbleTheme, [
            {
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                this.tooltip = new BubbleTooltip(
                  this.quill,
                  this.options.bounds,
                );
                this.tooltip.root.appendChild(toolbar.container);
                this.buildButtons(
                  [].slice.call(toolbar.container.querySelectorAll('button')),
                  _icons2.default,
                );
                this.buildPickers(
                  [].slice.call(toolbar.container.querySelectorAll('select')),
                  _icons2.default,
                );
              },
            },
          ]);

          return BubbleTheme;
        })(_base2.default);

        BubbleTheme.DEFAULTS = (0, _extend2.default)(
          true,
          {},
          _base2.default.DEFAULTS,
          {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (!value) {
                      this.quill.format('link', false);
                    } else {
                      this.quill.theme.tooltip.edit();
                    }
                  },
                },
              },
            },
          },
        );

        var BubbleTooltip = (function (_BaseTooltip) {
          _inherits(BubbleTooltip, _BaseTooltip);

          function BubbleTooltip(quill, bounds) {
            _classCallCheck(this, BubbleTooltip);

            var _this2 = _possibleConstructorReturn(
              this,
              (
                BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)
              ).call(this, quill, bounds),
            );

            _this2.quill.on(
              _emitter2.default.events.EDITOR_CHANGE,
              function (type, range, oldRange, source) {
                if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
                if (
                  range != null &&
                  range.length > 0 &&
                  source === _emitter2.default.sources.USER
                ) {
                  _this2.show();
                  // Lock our width so we will expand beyond our offsetParent boundaries
                  _this2.root.style.left = '0px';
                  _this2.root.style.width = '';
                  _this2.root.style.width = _this2.root.offsetWidth + 'px';
                  var lines = _this2.quill.getLines(range.index, range.length);
                  if (lines.length === 1) {
                    _this2.position(_this2.quill.getBounds(range));
                  } else {
                    var lastLine = lines[lines.length - 1];
                    var index = _this2.quill.getIndex(lastLine);
                    var length = Math.min(
                      lastLine.length() - 1,
                      range.index + range.length - index,
                    );
                    var _bounds = _this2.quill.getBounds(
                      new _selection.Range(index, length),
                    );
                    _this2.position(_bounds);
                  }
                } else if (
                  document.activeElement !== _this2.textbox &&
                  _this2.quill.hasFocus()
                ) {
                  _this2.hide();
                }
              },
            );
            return _this2;
          }

          _createClass(BubbleTooltip, [
            {
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(
                  BubbleTooltip.prototype.__proto__ ||
                    Object.getPrototypeOf(BubbleTooltip.prototype),
                  'listen',
                  this,
                ).call(this);
                this.root
                  .querySelector('.ql-close')
                  .addEventListener('click', function () {
                    _this3.root.classList.remove('ql-editing');
                  });
                this.quill.on(
                  _emitter2.default.events.SCROLL_OPTIMIZE,
                  function () {
                    // Let selection be restored by toolbar handlers before repositioning
                    setTimeout(function () {
                      if (_this3.root.classList.contains('ql-hidden')) return;
                      var range = _this3.quill.getSelection();
                      if (range != null) {
                        _this3.position(_this3.quill.getBounds(range));
                      }
                    }, 1);
                  },
                );
              },
            },
            {
              key: 'cancel',
              value: function cancel() {
                this.show();
              },
            },
            {
              key: 'position',
              value: function position(reference) {
                var shift = _get(
                  BubbleTooltip.prototype.__proto__ ||
                    Object.getPrototypeOf(BubbleTooltip.prototype),
                  'position',
                  this,
                ).call(this, reference);
                var arrow = this.root.querySelector('.ql-tooltip-arrow');
                arrow.style.marginLeft = '';
                if (shift === 0) return shift;
                arrow.style.marginLeft =
                  -1 * shift - arrow.offsetWidth / 2 + 'px';
              },
            },
          ]);

          return BubbleTooltip;
        })(_base.BaseTooltip);

        BubbleTooltip.TEMPLATE = [
          '<span class="ql-tooltip-arrow"></span>',
          '<div class="ql-tooltip-editor">',
          '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">',
          '<a class="ql-close"></a>',
          '</div>',
        ].join('');

        exports.BubbleTooltip = BubbleTooltip;
        exports.default = BubbleTheme;

        /***/
      },
      /* 109 */
      /***/ function (module, exports, __nested_webpack_require_604017__) {
        module.exports = __nested_webpack_require_604017__(63);

        /***/
      },
      /******/
    ],
  )['default'];
});


/***/ }),

/***/ "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e":
/*!***************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e ***!
  \***************************************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e";

/***/ }),

/***/ "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e":
/*!*********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e ***!
  \*********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e";

/***/ }),

/***/ "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e";

/***/ }),

/***/ "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236B7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e":
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236B7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e ***!
  \******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236B7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ./styles.css */ "./src/styles.css");
var books_1 = __webpack_require__(/*! ./books */ "./src/books.ts");
var contributors_1 = __webpack_require__(/*! ./contributors */ "./src/contributors.ts");
var initQuill_1 = __webpack_require__(/*! ./initQuill */ "./src/initQuill.ts");
var quill_value_to_textarea_1 = __webpack_require__(/*! ./quill_value_to_textarea */ "./src/quill_value_to_textarea.ts");
document.addEventListener('DOMContentLoaded', function () {
    (0, books_1.initBooks)();
    (0, contributors_1.initContributors)();
    (0, initQuill_1.initQuill)();
    (0, quill_value_to_textarea_1.initQuillValueToTextArea)();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,